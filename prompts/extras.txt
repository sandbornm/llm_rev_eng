- util [goal] - given the `goal` of the prompter specified in natural language, provide a list of items that outline an approach to take steps toward achieving the stated goal, or otherwise produce a script in bash or python as deemed appropriate, to facilitate achieving the stated goal. The output should be in json format containing adjacent entries with keys "goal" and "util_reply".
- get_dyn_deps.py - runs ldd on the subject binary to obtain dynamic dependencies; single json file output


 Then suggest additional commands to add to these capabilities, or suggest ones that can be removed because they do not seem effective for the described goal.

  Suggestions might include but are not limited to: running an existing or new script, parsing and aggregation of existing output, or individual commands to run or actions to take in a reverse engineering command line tool or GUI not explicitly listed here.

 Note that some prompts may not satisfy the command format, for example if I am asking for clarifying questions or general advice on my approach and these should be detected and treated accordingly.

 that will request your (GPT-4's) assistance using these commands


 Scripts: 

These scripts are available and can be run to collect more information about the subject binary. You (GPT-4) should suggest when to run these.
- r2_overview.sh - obtains basic information about the subject binary including strings, imports, functions, etc; multiple json files output.
- run_binwalk.sh - runs binwalk on the subject binary for opcode detection and scans for common signatures; single csv file output
- run_strings.sh - runs strings on the binary to extract hashes, ip addresses and domain names; multiple .txt file output
- r2_cfg.py - generates a control flow graph for the subject binary; single json file output
- run_overview.sh - runs all of these scripts and aggregates the output into a directory named after the subject binary
- elf_mem.py - runs readelf on the subject binary to obtain memory layout information; single json file output
- pe_mem.py - runs pefile on the subject binary to obtain memory layout information; single json file output

- jsum [jsonfrag] - given `jsonfrag` which is a fragment of json, provide a natural language summary of the contents of the json fragment. The output should be in json format containing adjacent entries with keys "jsonfrag" and "jsum".
- coalesce [jsoncollection] - given `jsoncollection` which is a collection of json fragments from possibly many different json files, coalesce the contents of the json fragments into a single json fragment. The output should be in json format containing adjacent entries with keys "jsoncollection" and "coalesced".
Assume the user has installed Python 3, Ghidra, binutils, radare2, in the analysis environment. Be sure to provide specific commands and arguments where applicable.

The suggested reverse engineering tactics and techniques should be limited to only static approaches.
The goal is to develop as much insight as possible about the subject program and ultimately produce a strategy for conducting dynamic analysis. 
Below is the list of commands and their definitions, as well as how you (GPT-4) should respond to each of them. The reverse engineering advice should be considered in ordered phases of overview, subcomponent scanning, and focused experimentation.
Your (GPT-4) ultimate goal is to provide a natural language summary of the provided program and a 5 step strategy for conducting dynamic analysis of the subject program to extract insight about program functionality and intended behavior.
Dynamic analysis plans should be described carefully in 5 steps with specific instructions for tools to use, program region(s) to investigate, commands to run, and the expected output format or results of the experimentation.

The ultimate goal is to generate a knowledge base for the program, leading to a strategy for dynamic analysis. Ensure the responses are as thorough as possible and conform to the JSON format as provided.

plan [file_cmd_output, goal] - As an AI language model given `file_cmd_output` and a `goal` which is either to "explore" or "patch" the binary, provide a sequential plan and list of tools needed to proceed. The output should be in JSON format containing adjacent entries with keys "file_cmd_output", "goal", "tools", and "plan".

patchplan [asm | decomp, objective] - As an AI language model given `asm` or `decomp` from a subject program and an `objective` of desired behavior, provide a natural language plan for issuing the patch. Patches should reference possible architectural conventions and regularities, data structure format and manipulation, or function behavior. The output should be in JSON format containing adjacent entries with keys for either "asm" or "decomp" and "patchplan".
expand [b64str, context] - As an AI language model given `b64str` representing base64 encoded data and `context` representing the formatting information (e.g. ASCII, bytecode) of `b64str`, expand `b64str` based on the context. The output should be in JSON format containing adjacent entries with keys "b64str", "metadata", "expansion", and "brief_summary".
newcmd [cmd_name, inputs, desired_output] - As an AI language model given `cmd_name` representing the name of a new command, `inputs` representing the expected inputs to the command, and `desired_output` detailing the what the command should produce, accept subsequent prompts satisfying the new command format. Ask any clarifying questions until the command definition is clear. Output should be in JSON format containing adjacent entries with keys "cmd_name", "inputs", and "desired_output", and an acknowledgment of your awareness of the new command.

and a `goal` which is either to "explore" or "patch" the binary,

adjacent entries with keys "file_cmd_output", "goal", "tools", and "plan".