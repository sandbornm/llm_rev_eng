"{\"annotations\":[{\"start\":52,\"end\":52,\"offset\":4201216,\"type\":\"offset\"},{\"start\":115,\"end\":115,\"offset\":4201216,\"type\":\"offset\"},{\"start\":176,\"end\":176,\"offset\":4201220,\"type\":\"offset\"},{\"start\":219,\"end\":219,\"offset\":4201225,\"type\":\"offset\"},{\"start\":235,\"end\":235,\"offset\":4201227,\"type\":\"offset\"},{\"start\":394,\"end\":394,\"offset\":4201232,\"type\":\"offset\"},{\"start\":424,\"end\":424,\"offset\":4201237,\"type\":\"offset\"},{\"start\":484,\"end\":484,\"offset\":4201237,\"type\":\"offset\"},{\"start\":526,\"end\":526,\"offset\":4201244,\"type\":\"offset\"},{\"start\":570,\"end\":570,\"offset\":4201247,\"type\":\"offset\"},{\"start\":586,\"end\":586,\"offset\":4201249,\"type\":\"offset\"},{\"start\":614,\"end\":614,\"offset\":4201249,\"type\":\"offset\"},{\"start\":647,\"end\":647,\"offset\":4201254,\"type\":\"offset\"},{\"start\":690,\"end\":690,\"offset\":4201256,\"type\":\"offset\"},{\"start\":706,\"end\":706,\"offset\":4201261,\"type\":\"offset\"},{\"start\":781,\"end\":781,\"offset\":4201266,\"type\":\"offset\"},{\"start\":811,\"end\":811,\"offset\":4201271,\"type\":\"offset\"},{\"start\":871,\"end\":871,\"offset\":4201271,\"type\":\"offset\"},{\"start\":913,\"end\":913,\"offset\":4201278,\"type\":\"offset\"},{\"start\":957,\"end\":957,\"offset\":4201281,\"type\":\"offset\"},{\"start\":1021,\"end\":1021,\"offset\":4201286,\"type\":\"offset\"},{\"start\":1037,\"end\":1037,\"offset\":4201288,\"type\":\"offset\"},{\"start\":1065,\"end\":1065,\"offset\":4201288,\"type\":\"offset\"},{\"start\":1098,\"end\":1098,\"offset\":4201293,\"type\":\"offset\"},{\"start\":1141,\"end\":1141,\"offset\":4201298,\"type\":\"offset\"},{\"start\":1157,\"end\":1157,\"offset\":4201300,\"type\":\"offset\"},{\"start\":1214,\"end\":1214,\"offset\":4201305,\"type\":\"offset\"},{\"start\":1244,\"end\":1244,\"offset\":4201310,\"type\":\"offset\"},{\"start\":1304,\"end\":1304,\"offset\":4201310,\"type\":\"offset\"},{\"start\":1346,\"end\":1346,\"offset\":4201317,\"type\":\"offset\"},{\"start\":1390,\"end\":1390,\"offset\":4201320,\"type\":\"offset\"},{\"start\":1406,\"end\":1406,\"offset\":4201322,\"type\":\"offset\"},{\"start\":1434,\"end\":1434,\"offset\":4201322,\"type\":\"offset\"},{\"start\":1467,\"end\":1467,\"offset\":4201327,\"type\":\"offset\"},{\"start\":1510,\"end\":1510,\"offset\":4201332,\"type\":\"offset\"},{\"start\":1526,\"end\":1526,\"offset\":4201334,\"type\":\"offset\"},{\"start\":1669,\"end\":1669,\"offset\":4201339,\"type\":\"offset\"},{\"start\":1699,\"end\":1699,\"offset\":4201344,\"type\":\"offset\"},{\"start\":1759,\"end\":1759,\"offset\":4201344,\"type\":\"offset\"},{\"start\":1801,\"end\":1801,\"offset\":4201351,\"type\":\"offset\"},{\"start\":1845,\"end\":1845,\"offset\":4201354,\"type\":\"offset\"},{\"start\":1861,\"end\":1861,\"offset\":4201356,\"type\":\"offset\"},{\"start\":1889,\"end\":1889,\"offset\":4201356,\"type\":\"offset\"},{\"start\":1922,\"end\":1922,\"offset\":4201361,\"type\":\"offset\"},{\"start\":1965,\"end\":1965,\"offset\":4201366,\"type\":\"offset\"},{\"start\":1981,\"end\":1981,\"offset\":4201368,\"type\":\"offset\"},{\"start\":2100,\"end\":2100,\"offset\":4201373,\"type\":\"offset\"},{\"start\":2130,\"end\":2130,\"offset\":4201378,\"type\":\"offset\"},{\"start\":2190,\"end\":2190,\"offset\":4201378,\"type\":\"offset\"},{\"start\":2232,\"end\":2232,\"offset\":4201385,\"type\":\"offset\"},{\"start\":2276,\"end\":2276,\"offset\":4201388,\"type\":\"offset\"},{\"start\":2292,\"end\":2292,\"offset\":4201390,\"type\":\"offset\"},{\"start\":2320,\"end\":2320,\"offset\":4201390,\"type\":\"offset\"},{\"start\":2353,\"end\":2353,\"offset\":4201395,\"type\":\"offset\"},{\"start\":2396,\"end\":2396,\"offset\":4201400,\"type\":\"offset\"},{\"start\":2412,\"end\":2412,\"offset\":4201402,\"type\":\"offset\"},{\"start\":2531,\"end\":2531,\"offset\":4201407,\"type\":\"offset\"},{\"start\":2561,\"end\":2561,\"offset\":4201412,\"type\":\"offset\"},{\"start\":2621,\"end\":2621,\"offset\":4201412,\"type\":\"offset\"},{\"start\":2663,\"end\":2663,\"offset\":4201419,\"type\":\"offset\"},{\"start\":2707,\"end\":2707,\"offset\":4201422,\"type\":\"offset\"},{\"start\":2723,\"end\":2723,\"offset\":4201424,\"type\":\"offset\"},{\"start\":2751,\"end\":2751,\"offset\":4201424,\"type\":\"offset\"},{\"start\":2784,\"end\":2784,\"offset\":4201429,\"type\":\"offset\"},{\"start\":2827,\"end\":2827,\"offset\":4201434,\"type\":\"offset\"},{\"start\":2843,\"end\":2843,\"offset\":4201436,\"type\":\"offset\"},{\"start\":2962,\"end\":2962,\"offset\":4201441,\"type\":\"offset\"},{\"start\":2992,\"end\":2992,\"offset\":4201446,\"type\":\"offset\"},{\"start\":3052,\"end\":3052,\"offset\":4201446,\"type\":\"offset\"},{\"start\":3094,\"end\":3094,\"offset\":4201453,\"type\":\"offset\"},{\"start\":3138,\"end\":3138,\"offset\":4201456,\"type\":\"offset\"},{\"start\":3154,\"end\":3154,\"offset\":4201458,\"type\":\"offset\"},{\"start\":3182,\"end\":3182,\"offset\":4201458,\"type\":\"offset\"},{\"start\":3215,\"end\":3215,\"offset\":4201463,\"type\":\"offset\"},{\"start\":3258,\"end\":3258,\"offset\":4201468,\"type\":\"offset\"},{\"start\":3274,\"end\":3274,\"offset\":4201470,\"type\":\"offset\"},{\"start\":3393,\"end\":3393,\"offset\":4201475,\"type\":\"offset\"},{\"start\":3423,\"end\":3423,\"offset\":4201480,\"type\":\"offset\"},{\"start\":3483,\"end\":3483,\"offset\":4201480,\"type\":\"offset\"},{\"start\":3525,\"end\":3525,\"offset\":4201487,\"type\":\"offset\"},{\"start\":3569,\"end\":3569,\"offset\":4201490,\"type\":\"offset\"},{\"start\":3585,\"end\":3585,\"offset\":4201492,\"type\":\"offset\"},{\"start\":3613,\"end\":3613,\"offset\":4201492,\"type\":\"offset\"},{\"start\":3646,\"end\":3646,\"offset\":4201497,\"type\":\"offset\"},{\"start\":3689,\"end\":3689,\"offset\":4201499,\"type\":\"offset\"},{\"start\":3705,\"end\":3705,\"offset\":4201504,\"type\":\"offset\"},{\"start\":3824,\"end\":3824,\"offset\":4201509,\"type\":\"offset\"},{\"start\":3854,\"end\":3854,\"offset\":4201514,\"type\":\"offset\"},{\"start\":3914,\"end\":3914,\"offset\":4201514,\"type\":\"offset\"},{\"start\":3956,\"end\":3956,\"offset\":4201521,\"type\":\"offset\"},{\"start\":4000,\"end\":4000,\"offset\":4201524,\"type\":\"offset\"},{\"start\":4016,\"end\":4016,\"offset\":4201526,\"type\":\"offset\"},{\"start\":4044,\"end\":4044,\"offset\":4201526,\"type\":\"offset\"},{\"start\":4077,\"end\":4077,\"offset\":4201531,\"type\":\"offset\"},{\"start\":4120,\"end\":4120,\"offset\":4201536,\"type\":\"offset\"},{\"start\":4136,\"end\":4136,\"offset\":4201538,\"type\":\"offset\"},{\"start\":4269,\"end\":4269,\"offset\":4201543,\"type\":\"offset\"},{\"start\":4299,\"end\":4299,\"offset\":4201548,\"type\":\"offset\"},{\"start\":4359,\"end\":4359,\"offset\":4201548,\"type\":\"offset\"},{\"start\":4401,\"end\":4401,\"offset\":4201555,\"type\":\"offset\"},{\"start\":4445,\"end\":4445,\"offset\":4201558,\"type\":\"offset\"},{\"start\":4461,\"end\":4461,\"offset\":4201560,\"type\":\"offset\"},{\"start\":4489,\"end\":4489,\"offset\":4201560,\"type\":\"offset\"},{\"start\":4522,\"end\":4522,\"offset\":4201565,\"type\":\"offset\"},{\"start\":4565,\"end\":4565,\"offset\":4201570,\"type\":\"offset\"},{\"start\":4581,\"end\":4581,\"offset\":4201572,\"type\":\"offset\"},{\"start\":4732,\"end\":4732,\"offset\":4201577,\"type\":\"offset\"},{\"start\":4762,\"end\":4762,\"offset\":4201582,\"type\":\"offset\"},{\"start\":4822,\"end\":4822,\"offset\":4201582,\"type\":\"offset\"},{\"start\":4864,\"end\":4864,\"offset\":4201589,\"type\":\"offset\"},{\"start\":4908,\"end\":4908,\"offset\":4201592,\"type\":\"offset\"},{\"start\":4924,\"end\":4924,\"offset\":4201594,\"type\":\"offset\"},{\"start\":4952,\"end\":4952,\"offset\":4201594,\"type\":\"offset\"},{\"start\":4985,\"end\":4985,\"offset\":4201599,\"type\":\"offset\"},{\"start\":5028,\"end\":5028,\"offset\":4201604,\"type\":\"offset\"},{\"start\":5044,\"end\":5044,\"offset\":4201606,\"type\":\"offset\"},{\"start\":5167,\"end\":5167,\"offset\":4201611,\"type\":\"offset\"},{\"start\":5197,\"end\":5197,\"offset\":4201616,\"type\":\"offset\"},{\"start\":5257,\"end\":5257,\"offset\":4201616,\"type\":\"offset\"},{\"start\":5299,\"end\":5299,\"offset\":4201623,\"type\":\"offset\"},{\"start\":5343,\"end\":5343,\"offset\":4201626,\"type\":\"offset\"},{\"start\":5359,\"end\":5359,\"offset\":4201628,\"type\":\"offset\"},{\"start\":5387,\"end\":5387,\"offset\":4201628,\"type\":\"offset\"},{\"start\":5420,\"end\":5420,\"offset\":4201633,\"type\":\"offset\"},{\"start\":5463,\"end\":5463,\"offset\":4201638,\"type\":\"offset\"},{\"start\":5479,\"end\":5479,\"offset\":4201640,\"type\":\"offset\"},{\"start\":5584,\"end\":5584,\"offset\":4201645,\"type\":\"offset\"},{\"start\":5614,\"end\":5614,\"offset\":4201650,\"type\":\"offset\"},{\"start\":5674,\"end\":5674,\"offset\":4201650,\"type\":\"offset\"},{\"start\":5716,\"end\":5716,\"offset\":4201657,\"type\":\"offset\"},{\"start\":5760,\"end\":5760,\"offset\":4201660,\"type\":\"offset\"},{\"start\":5776,\"end\":5776,\"offset\":4201662,\"type\":\"offset\"},{\"start\":5804,\"end\":5804,\"offset\":4201662,\"type\":\"offset\"},{\"start\":5837,\"end\":5837,\"offset\":4201667,\"type\":\"offset\"},{\"start\":5880,\"end\":5880,\"offset\":4201672,\"type\":\"offset\"},{\"start\":5896,\"end\":5896,\"offset\":4201674,\"type\":\"offset\"},{\"start\":6033,\"end\":6033,\"offset\":4201679,\"type\":\"offset\"},{\"start\":6063,\"end\":6063,\"offset\":4201684,\"type\":\"offset\"},{\"start\":6123,\"end\":6123,\"offset\":4201684,\"type\":\"offset\"},{\"start\":6165,\"end\":6165,\"offset\":4201691,\"type\":\"offset\"},{\"start\":6209,\"end\":6209,\"offset\":4201694,\"type\":\"offset\"},{\"start\":6225,\"end\":6225,\"offset\":4201696,\"type\":\"offset\"},{\"start\":6253,\"end\":6253,\"offset\":4201696,\"type\":\"offset\"},{\"start\":6286,\"end\":6286,\"offset\":4201701,\"type\":\"offset\"},{\"start\":6329,\"end\":6329,\"offset\":4201706,\"type\":\"offset\"},{\"start\":6345,\"end\":6345,\"offset\":4201708,\"type\":\"offset\"},{\"start\":6494,\"end\":6494,\"offset\":4201713,\"type\":\"offset\"},{\"start\":6524,\"end\":6524,\"offset\":4201718,\"type\":\"offset\"},{\"start\":6584,\"end\":6584,\"offset\":4201718,\"type\":\"offset\"},{\"start\":6626,\"end\":6626,\"offset\":4201725,\"type\":\"offset\"},{\"start\":6670,\"end\":6670,\"offset\":4201728,\"type\":\"offset\"},{\"start\":6686,\"end\":6686,\"offset\":4201730,\"type\":\"offset\"},{\"start\":6714,\"end\":6714,\"offset\":4201730,\"type\":\"offset\"},{\"start\":6747,\"end\":6747,\"offset\":4201735,\"type\":\"offset\"},{\"start\":6790,\"end\":6790,\"offset\":4201740,\"type\":\"offset\"},{\"start\":6806,\"end\":6806,\"offset\":4201742,\"type\":\"offset\"},{\"start\":6941,\"end\":6941,\"offset\":4201747,\"type\":\"offset\"},{\"start\":6971,\"end\":6971,\"offset\":4201752,\"type\":\"offset\"},{\"start\":7031,\"end\":7031,\"offset\":4201752,\"type\":\"offset\"},{\"start\":7073,\"end\":7073,\"offset\":4201759,\"type\":\"offset\"},{\"start\":7117,\"end\":7117,\"offset\":4201762,\"type\":\"offset\"},{\"start\":7133,\"end\":7133,\"offset\":4201764,\"type\":\"offset\"},{\"start\":7161,\"end\":7161,\"offset\":4201764,\"type\":\"offset\"},{\"start\":7194,\"end\":7194,\"offset\":4201769,\"type\":\"offset\"},{\"start\":7237,\"end\":7237,\"offset\":4201774,\"type\":\"offset\"},{\"start\":7310,\"end\":7310,\"offset\":4201779,\"type\":\"offset\"},{\"start\":7326,\"end\":7326,\"offset\":4201781,\"type\":\"offset\"},{\"start\":7356,\"end\":7356,\"offset\":4201786,\"type\":\"offset\"},{\"start\":7416,\"end\":7416,\"offset\":4201786,\"type\":\"offset\"},{\"start\":7458,\"end\":7458,\"offset\":4201793,\"type\":\"offset\"},{\"start\":7502,\"end\":7502,\"offset\":4201796,\"type\":\"offset\"},{\"start\":7518,\"end\":7518,\"offset\":4201798,\"type\":\"offset\"},{\"start\":7546,\"end\":7546,\"offset\":4201798,\"type\":\"offset\"},{\"start\":7579,\"end\":7579,\"offset\":4201803,\"type\":\"offset\"},{\"start\":7622,\"end\":7622,\"offset\":4201808,\"type\":\"offset\"},{\"start\":7638,\"end\":7638,\"offset\":4201810,\"type\":\"offset\"},{\"start\":7787,\"end\":7787,\"offset\":4201815,\"type\":\"offset\"},{\"start\":7817,\"end\":7817,\"offset\":4201820,\"type\":\"offset\"},{\"start\":7877,\"end\":7877,\"offset\":4201820,\"type\":\"offset\"},{\"start\":7919,\"end\":7919,\"offset\":4201827,\"type\":\"offset\"},{\"start\":7963,\"end\":7963,\"offset\":4201830,\"type\":\"offset\"},{\"start\":7979,\"end\":7979,\"offset\":4201832,\"type\":\"offset\"},{\"start\":8007,\"end\":8007,\"offset\":4201832,\"type\":\"offset\"},{\"start\":8040,\"end\":8040,\"offset\":4201837,\"type\":\"offset\"},{\"start\":8083,\"end\":8083,\"offset\":4201842,\"type\":\"offset\"},{\"start\":8099,\"end\":8099,\"offset\":4201844,\"type\":\"offset\"},{\"start\":8258,\"end\":8258,\"offset\":4201849,\"type\":\"offset\"},{\"start\":8288,\"end\":8288,\"offset\":4201854,\"type\":\"offset\"},{\"start\":8348,\"end\":8348,\"offset\":4201854,\"type\":\"offset\"},{\"start\":8390,\"end\":8390,\"offset\":4201861,\"type\":\"offset\"},{\"start\":8434,\"end\":8434,\"offset\":4201864,\"type\":\"offset\"},{\"start\":8450,\"end\":8450,\"offset\":4201866,\"type\":\"offset\"},{\"start\":8478,\"end\":8478,\"offset\":4201866,\"type\":\"offset\"},{\"start\":8511,\"end\":8511,\"offset\":4201871,\"type\":\"offset\"},{\"start\":8592,\"end\":8592,\"offset\":4201871,\"type\":\"offset\"},{\"start\":8634,\"end\":8634,\"offset\":4201878,\"type\":\"offset\"},{\"start\":8679,\"end\":8679,\"offset\":4201883,\"type\":\"offset\"},{\"start\":8716,\"end\":8716,\"offset\":4201888,\"type\":\"offset\"},{\"start\":8832,\"end\":8832,\"offset\":4201893,\"type\":\"offset\"},{\"start\":8859,\"end\":8859,\"offset\":4201893,\"type\":\"offset\"},{\"start\":8915,\"end\":8915,\"offset\":4201898,\"type\":\"offset\"},{\"start\":8997,\"end\":8997,\"offset\":4201898,\"type\":\"offset\"},{\"start\":9039,\"end\":9039,\"offset\":4201905,\"type\":\"offset\"},{\"start\":9084,\"end\":9084,\"offset\":4201910,\"type\":\"offset\"},{\"start\":9121,\"end\":9121,\"offset\":4201915,\"type\":\"offset\"},{\"start\":9237,\"end\":9237,\"offset\":4201920,\"type\":\"offset\"},{\"start\":9264,\"end\":9264,\"offset\":4201920,\"type\":\"offset\"},{\"start\":9320,\"end\":9320,\"offset\":4201925,\"type\":\"offset\"},{\"start\":9402,\"end\":9402,\"offset\":4201925,\"type\":\"offset\"},{\"start\":9444,\"end\":9444,\"offset\":4201932,\"type\":\"offset\"},{\"start\":9497,\"end\":9497,\"offset\":4201937,\"type\":\"offset\"},{\"start\":9534,\"end\":9534,\"offset\":4201942,\"type\":\"offset\"},{\"start\":9662,\"end\":9662,\"offset\":4201947,\"type\":\"offset\"},{\"start\":9689,\"end\":9689,\"offset\":4201947,\"type\":\"offset\"},{\"start\":9745,\"end\":9745,\"offset\":4201952,\"type\":\"offset\"},{\"start\":9827,\"end\":9827,\"offset\":4201952,\"type\":\"offset\"},{\"start\":9869,\"end\":9869,\"offset\":4201959,\"type\":\"offset\"},{\"start\":9922,\"end\":9922,\"offset\":4201964,\"type\":\"offset\"},{\"start\":9959,\"end\":9959,\"offset\":4201969,\"type\":\"offset\"},{\"start\":10087,\"end\":10087,\"offset\":4201974,\"type\":\"offset\"},{\"start\":10114,\"end\":10114,\"offset\":4201974,\"type\":\"offset\"},{\"start\":10170,\"end\":10170,\"offset\":4201979,\"type\":\"offset\"},{\"start\":10252,\"end\":10252,\"offset\":4201979,\"type\":\"offset\"},{\"start\":10294,\"end\":10294,\"offset\":4201986,\"type\":\"offset\"},{\"start\":10346,\"end\":10346,\"offset\":4201991,\"type\":\"offset\"},{\"start\":10383,\"end\":10383,\"offset\":4201996,\"type\":\"offset\"},{\"start\":10513,\"end\":10513,\"offset\":4202001,\"type\":\"offset\"},{\"start\":10540,\"end\":10540,\"offset\":4202001,\"type\":\"offset\"},{\"start\":10596,\"end\":10596,\"offset\":4202006,\"type\":\"offset\"},{\"start\":10678,\"end\":10678,\"offset\":4202006,\"type\":\"offset\"},{\"start\":10720,\"end\":10720,\"offset\":4202013,\"type\":\"offset\"},{\"start\":10772,\"end\":10772,\"offset\":4202018,\"type\":\"offset\"},{\"start\":10809,\"end\":10809,\"offset\":4202023,\"type\":\"offset\"},{\"start\":10935,\"end\":10935,\"offset\":4202028,\"type\":\"offset\"},{\"start\":10962,\"end\":10962,\"offset\":4202028,\"type\":\"offset\"},{\"start\":11018,\"end\":11018,\"offset\":4202033,\"type\":\"offset\"},{\"start\":11100,\"end\":11100,\"offset\":4202033,\"type\":\"offset\"},{\"start\":11142,\"end\":11142,\"offset\":4202040,\"type\":\"offset\"},{\"start\":11195,\"end\":11195,\"offset\":4202045,\"type\":\"offset\"},{\"start\":11232,\"end\":11232,\"offset\":4202050,\"type\":\"offset\"},{\"start\":11360,\"end\":11360,\"offset\":4202055,\"type\":\"offset\"},{\"start\":11387,\"end\":11387,\"offset\":4202055,\"type\":\"offset\"},{\"start\":11443,\"end\":11443,\"offset\":4202060,\"type\":\"offset\"},{\"start\":11525,\"end\":11525,\"offset\":4202060,\"type\":\"offset\"},{\"start\":11567,\"end\":11567,\"offset\":4202067,\"type\":\"offset\"},{\"start\":11619,\"end\":11619,\"offset\":4202072,\"type\":\"offset\"},{\"start\":11656,\"end\":11656,\"offset\":4202077,\"type\":\"offset\"},{\"start\":11794,\"end\":11794,\"offset\":4202082,\"type\":\"offset\"},{\"start\":11821,\"end\":11821,\"offset\":4202082,\"type\":\"offset\"},{\"start\":11877,\"end\":11877,\"offset\":4202087,\"type\":\"offset\"},{\"start\":11959,\"end\":11959,\"offset\":4202087,\"type\":\"offset\"},{\"start\":12001,\"end\":12001,\"offset\":4202094,\"type\":\"offset\"},{\"start\":12053,\"end\":12053,\"offset\":4202099,\"type\":\"offset\"},{\"start\":12090,\"end\":12090,\"offset\":4202104,\"type\":\"offset\"},{\"start\":12222,\"end\":12222,\"offset\":4202109,\"type\":\"offset\"},{\"start\":12249,\"end\":12249,\"offset\":4202109,\"type\":\"offset\"},{\"start\":12305,\"end\":12305,\"offset\":4202114,\"type\":\"offset\"},{\"start\":12387,\"end\":12387,\"offset\":4202114,\"type\":\"offset\"},{\"start\":12429,\"end\":12429,\"offset\":4202121,\"type\":\"offset\"},{\"start\":12481,\"end\":12481,\"offset\":4202126,\"type\":\"offset\"},{\"start\":12518,\"end\":12518,\"offset\":4202131,\"type\":\"offset\"},{\"start\":12652,\"end\":12652,\"offset\":4202136,\"type\":\"offset\"},{\"start\":12679,\"end\":12679,\"offset\":4202136,\"type\":\"offset\"},{\"start\":12735,\"end\":12735,\"offset\":4202141,\"type\":\"offset\"},{\"start\":12817,\"end\":12817,\"offset\":4202141,\"type\":\"offset\"},{\"start\":12859,\"end\":12859,\"offset\":4202148,\"type\":\"offset\"},{\"start\":12911,\"end\":12911,\"offset\":4202153,\"type\":\"offset\"},{\"start\":12948,\"end\":12948,\"offset\":4202158,\"type\":\"offset\"},{\"start\":13078,\"end\":13078,\"offset\":4202163,\"type\":\"offset\"},{\"start\":13105,\"end\":13105,\"offset\":4202163,\"type\":\"offset\"},{\"start\":13161,\"end\":13161,\"offset\":4202168,\"type\":\"offset\"},{\"start\":13243,\"end\":13243,\"offset\":4202168,\"type\":\"offset\"},{\"start\":13285,\"end\":13285,\"offset\":4202175,\"type\":\"offset\"},{\"start\":13337,\"end\":13337,\"offset\":4202180,\"type\":\"offset\"},{\"start\":13374,\"end\":13374,\"offset\":4202185,\"type\":\"offset\"},{\"start\":13506,\"end\":13506,\"offset\":4202190,\"type\":\"offset\"},{\"start\":13533,\"end\":13533,\"offset\":4202190,\"type\":\"offset\"},{\"start\":13589,\"end\":13589,\"offset\":4202195,\"type\":\"offset\"},{\"start\":13671,\"end\":13671,\"offset\":4202195,\"type\":\"offset\"},{\"start\":13713,\"end\":13713,\"offset\":4202202,\"type\":\"offset\"},{\"start\":13765,\"end\":13765,\"offset\":4202207,\"type\":\"offset\"},{\"start\":13802,\"end\":13802,\"offset\":4202212,\"type\":\"offset\"},{\"start\":13944,\"end\":13944,\"offset\":4202217,\"type\":\"offset\"},{\"start\":13971,\"end\":13971,\"offset\":4202217,\"type\":\"offset\"},{\"start\":14027,\"end\":14027,\"offset\":4202222,\"type\":\"offset\"},{\"start\":14071,\"end\":14071,\"offset\":4202227,\"type\":\"offset\"},{\"start\":14087,\"end\":14087,\"offset\":4202229,\"type\":\"offset\"},{\"start\":14226,\"end\":14226,\"offset\":4202234,\"type\":\"offset\"},{\"start\":14256,\"end\":14256,\"offset\":4202239,\"type\":\"offset\"},{\"start\":14316,\"end\":14316,\"offset\":4202239,\"type\":\"offset\"},{\"start\":14358,\"end\":14358,\"offset\":4202246,\"type\":\"offset\"},{\"start\":14402,\"end\":14402,\"offset\":4202249,\"type\":\"offset\"},{\"start\":14418,\"end\":14418,\"offset\":4202251,\"type\":\"offset\"},{\"start\":14446,\"end\":14446,\"offset\":4202251,\"type\":\"offset\"},{\"start\":14479,\"end\":14479,\"offset\":4202256,\"type\":\"offset\"},{\"start\":14523,\"end\":14523,\"offset\":4202261,\"type\":\"offset\"},{\"start\":14539,\"end\":14539,\"offset\":4202263,\"type\":\"offset\"},{\"start\":14690,\"end\":14690,\"offset\":4202268,\"type\":\"offset\"},{\"start\":14720,\"end\":14720,\"offset\":4202273,\"type\":\"offset\"},{\"start\":14780,\"end\":14780,\"offset\":4202273,\"type\":\"offset\"},{\"start\":14822,\"end\":14822,\"offset\":4202280,\"type\":\"offset\"},{\"start\":14866,\"end\":14866,\"offset\":4202283,\"type\":\"offset\"},{\"start\":14882,\"end\":14882,\"offset\":4202285,\"type\":\"offset\"},{\"start\":14910,\"end\":14910,\"offset\":4202285,\"type\":\"offset\"},{\"start\":14943,\"end\":14943,\"offset\":4202290,\"type\":\"offset\"},{\"start\":14987,\"end\":14987,\"offset\":4202295,\"type\":\"offset\"},{\"start\":15084,\"end\":15084,\"offset\":4202300,\"type\":\"offset\"},{\"start\":15100,\"end\":15100,\"offset\":4202302,\"type\":\"offset\"},{\"start\":15130,\"end\":15130,\"offset\":4202307,\"type\":\"offset\"},{\"start\":15190,\"end\":15190,\"offset\":4202307,\"type\":\"offset\"},{\"start\":15232,\"end\":15232,\"offset\":4202314,\"type\":\"offset\"},{\"start\":15276,\"end\":15276,\"offset\":4202317,\"type\":\"offset\"},{\"start\":15292,\"end\":15292,\"offset\":4202319,\"type\":\"offset\"},{\"start\":15320,\"end\":15320,\"offset\":4202319,\"type\":\"offset\"},{\"start\":15353,\"end\":15353,\"offset\":4202324,\"type\":\"offset\"},{\"start\":15397,\"end\":15397,\"offset\":4202329,\"type\":\"offset\"},{\"start\":15522,\"end\":15522,\"offset\":4202334,\"type\":\"offset\"},{\"start\":15538,\"end\":15538,\"offset\":4202336,\"type\":\"offset\"},{\"start\":15568,\"end\":15568,\"offset\":4202341,\"type\":\"offset\"},{\"start\":15628,\"end\":15628,\"offset\":4202341,\"type\":\"offset\"},{\"start\":15670,\"end\":15670,\"offset\":4202348,\"type\":\"offset\"},{\"start\":15714,\"end\":15714,\"offset\":4202351,\"type\":\"offset\"},{\"start\":15730,\"end\":15730,\"offset\":4202353,\"type\":\"offset\"},{\"start\":15758,\"end\":15758,\"offset\":4202353,\"type\":\"offset\"},{\"start\":15791,\"end\":15791,\"offset\":4202358,\"type\":\"offset\"},{\"start\":15835,\"end\":15835,\"offset\":4202363,\"type\":\"offset\"},{\"start\":15950,\"end\":15950,\"offset\":4202368,\"type\":\"offset\"},{\"start\":15966,\"end\":15966,\"offset\":4202370,\"type\":\"offset\"},{\"start\":15996,\"end\":15996,\"offset\":4202375,\"type\":\"offset\"},{\"start\":16056,\"end\":16056,\"offset\":4202375,\"type\":\"offset\"},{\"start\":16098,\"end\":16098,\"offset\":4202382,\"type\":\"offset\"},{\"start\":16142,\"end\":16142,\"offset\":4202385,\"type\":\"offset\"},{\"start\":16158,\"end\":16158,\"offset\":4202387,\"type\":\"offset\"},{\"start\":16186,\"end\":16186,\"offset\":4202387,\"type\":\"offset\"},{\"start\":16219,\"end\":16219,\"offset\":4202392,\"type\":\"offset\"},{\"start\":16263,\"end\":16263,\"offset\":4202397,\"type\":\"offset\"},{\"start\":16374,\"end\":16374,\"offset\":4202402,\"type\":\"offset\"},{\"start\":16390,\"end\":16390,\"offset\":4202404,\"type\":\"offset\"},{\"start\":16420,\"end\":16420,\"offset\":4202409,\"type\":\"offset\"},{\"start\":16480,\"end\":16480,\"offset\":4202409,\"type\":\"offset\"},{\"start\":16522,\"end\":16522,\"offset\":4202416,\"type\":\"offset\"},{\"start\":16566,\"end\":16566,\"offset\":4202419,\"type\":\"offset\"},{\"start\":16582,\"end\":16582,\"offset\":4202421,\"type\":\"offset\"},{\"start\":16610,\"end\":16610,\"offset\":4202421,\"type\":\"offset\"},{\"start\":16643,\"end\":16643,\"offset\":4202426,\"type\":\"offset\"},{\"start\":16790,\"end\":16790,\"offset\":4202431,\"type\":\"offset\"},{\"start\":16806,\"end\":16806,\"offset\":4202433,\"type\":\"offset\"},{\"start\":16822,\"end\":16822,\"offset\":4202438,\"type\":\"offset\"},{\"start\":16852,\"end\":16852,\"offset\":4202443,\"type\":\"offset\"},{\"start\":16912,\"end\":16912,\"offset\":4202443,\"type\":\"offset\"},{\"start\":16938,\"end\":16938,\"offset\":4202450,\"type\":\"offset\"},{\"start\":16956,\"end\":16956,\"offset\":4202453,\"type\":\"offset\"},{\"start\":17000,\"end\":17000,\"offset\":4202457,\"type\":\"offset\"},{\"start\":17044,\"end\":17044,\"offset\":4202459,\"type\":\"offset\"},{\"start\":17108,\"end\":17108,\"offset\":4202459,\"type\":\"offset\"}],\"code\":\"int dbg.Usage (int esi, int edx) {\\n    loc_0x401b00:\\n        // CALL XREFS from dbg.main @ 0x400c14(x), 0x400ecc(x)\\n        rsp -= 8      // binary2ascii.c:79 // void Usage()//\\n        edx = 5       // binary2ascii.c:80\\n        edi = 0\\n        esi = str.Filter_to_convert_binary_numbers_to_textual_representation._n // 0x4027c8 // \\\"Filter to convert binary numbers to textual representation.\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edi = 0       // binary2ascii.c:81\\n        edx = 5\\n        esi = str.Usage:__s__flags__n // 0x403241 // \\\"Usage: %s [flags]\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        edx = obj.pgname // 0x60459a // \\\"binary2ascii\\\" //   ...\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:82\\n        edi = 0\\n        esi = str.Options:_n // 0x403254 // \\\"Options:\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:83\\n        edi = 0\\n        esi = str._t_b__base________set_base_for_integer_conversions:_n // 0x402808 // \\\"\\\\t-b <base>       set base for integer conversions:\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:84\\n        edi = 0\\n        esi = str._t________________b_inary_________or__2_n // 0x402840 // \\\"\\\\t                b(inary)        or  2\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:85\\n        edi = 0\\n        esi = str._t________________d_ecimal________or_10_n // 0x402868 // \\\"\\\\t                d(ecimal)       or 10\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:86\\n        edi = 0\\n        esi = str._t________________h_exadecimal____or_16_n // 0x402890 // \\\"\\\\t                h(exadecimal)   or 16\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:87\\n        edi = 0\\n        esi = str._t________________o_ctal__________or__8_n // 0x4028b8 // \\\"\\\\t                o(ctal)         or  8\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edi = 0       // binary2ascii.c:88\\n        edx = 5\\n        esi = str._t_d______________delimit_as_per_locale_n // 0x4028e0 // \\\"\\\\t-d              delimit as per locale\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:89\\n        edi = 0\\n        esi = str._t_D______________do_not_delimit_as_per_locale_n // 0x402908 // \\\"\\\\t-D              do not delimit as per locale\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:90\\n        edi = 0\\n        esi = str._t_e______________use_exponential__scientific__notation_n // 0x402938 // \\\"\\\\t-e              use exponential (scientific) notation\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:91\\n        edi = 0\\n        esi = str._t_h______________print_this_help_message_n // 0x402970 // \\\"\\\\t-h              print this help message\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:92\\n        edi = 0\\n        esi = str._t_L__locale______set_the_locale_n // 0x4029a0 // \\\"\\\\t-L <locale>     set the locale\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:93\\n        edi = 0\\n        esi = str._t_l______________add_a_linefeed_after_each_0x0A_n // 0x4029c8 // \\\"\\\\t-l              add a linefeed after each 0x0A\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:94\\n        edi = 0\\n        esi = str._t_n__number______number_of_items_per_line__default_1__n // 0x402a00 // \\\"\\\\t-n <number>     number of items per line [default 1]\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:95\\n        edi = 0\\n        esi = str._t_o__offset______byte_offset_at_which_to_start_n // 0x402a38 // \\\"\\\\t-o <offset>     byte offset at which to start\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:96\\n        esi = str._t_p__precision__n // 0x40325e // \\\"\\\\t-p <precision>\\\\n\\\"\\n        edi = 0\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:97\\n        edi = 0\\n        esi = str._t_s______________print_sizes_of_types_on_this_machine_n // 0x402a68 // \\\"\\\\t-s              print sizes of types on this machine\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:98\\n        edi = 0\\n        esi = str._t_t__type________specify_type_of_input._The_default_is_uc._n // 0x402aa0 // \\\"\\\\t-t <type>       specify type of input. The default is uc.\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:99 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x1c    // 28 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________d__double__n // 0x40326f // \\\"\\\\t                d [double]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:100 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x1c    // 28 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________f___float__n // 0x40328c // \\\"\\\\t                f  [float]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:102 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x22    // '\\\\\\\"' // 34 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________q___long_double__n // 0x402ae0 // \\\"\\\\t                q  [long double]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:104 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x22    // '\\\\\\\"' // 34 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________sc__signed_char__n // 0x402b08 // \\\"\\\\t                sc [signed char]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:105 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x23    // '#' // 35 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________ss__signed_short__n // 0x402b30 // \\\"\\\\t                ss [signed short]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:106 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x21    // '!' // 33 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________si__signed_int__n // 0x402b58 // \\\"\\\\t                si [signed int]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:107 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x22    // '\\\\\\\"' // 34 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________sl__signed_long__n // 0x402b80 // \\\"\\\\t                sl [signed long]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:108 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x27    // ''' // 39 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________sq__signed_long_long__n // 0x402ba8 // \\\"\\\\t                sq [signed long long]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:109 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x24    // '$' // 36 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________uc__unsigned_char__n // 0x402bd0 // \\\"\\\\t                uc [unsigned char]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:110 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x25    // '%' // 37 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________us__unsigned_short__n // 0x402bf8 // \\\"\\\\t                us [unsigned short]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:111 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x23    // '#' // 35 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________ui__unsigned_int__n // 0x402c20 // \\\"\\\\t                ui [unsigned int]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:112 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x24    // '$' // 36 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________ul__unsigned_long__n // 0x402c48 // \\\"\\\\t                ul [unsigned long]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        rcx = qword [obj.stderr] // binary2ascii.c:113 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        edx = 0x29    // ')' // 41 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str._t________________uq__unsigned_long_long__n // 0x402c70 // \\\"\\\\t                uq [unsigned long long]\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x2020202020202009, -1, -1, ?)\\n        edx = 5       // binary2ascii.c:114\\n        edi = 0\\n        esi = str._t_X______________print_explanation_of_exit_codes_n // 0x402ca0 // \\\"\\\\t-X              print explanation of exit codes\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:115\\n        edi = 0\\n        esi = str._t_x______________do_not_mark_hex_output_with_prefix_0x_n // 0x402cd8 // \\\"\\\\t-x              do not mark hex output with prefix 0x\\\\n\\\"\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:116\\n        esi = str._t_V______________be_verbose_n // 0x4032a9 // \\\"\\\\t-V              be verbose\\\\n\\\"\\n        edi = 0\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:117\\n        esi = str._t_v______________identify_program_version_n // 0x402d10 // \\\"\\\\t-v              identify program version\\\\n\\\"\\n        edi = 0\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:118\\n        esi = str._t_w__width_______minimum_field_width_n // 0x402d40 // \\\"\\\\t-w <width>      minimum field width\\\\n\\\"\\n        edi = 0\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        edx = 5       // binary2ascii.c:119\\n        esi = str._t_z______________zero_pad_integers_n // 0x402d68 // \\\"\\\\t-z              zero pad integers\\\\n\\\"\\n        edi = 0\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0 // FILE *stream\\n        rsi = rax     // const char *format\\n        eax = 0\\n        sym.imp.fprintf  ()\\n        // int fprintf(?, -1, ?)\\n        esi = str._t_Z______________do_not_zero_pad_integers_n // binary2ascii.c:120 // 0x402d90 // \\\"\\\\t-Z              do not zero pad integers\\\\n\\\"\\n        edi = 0\\n        edx = 5\\n        sym.imp.dcgettext  ()\\n        rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0\\n        rsi = rax\\n        rsp += 8      // binary2ascii.c:121\\n        eax = 0       // binary2ascii.c:120\\n        goto loc_0x400a80 // sym.imp.fprintf // sym.imp.fprintf\\n        // int fprintf(?, -1, ?)\\n         // (break)\\n}\\n\"}\n"