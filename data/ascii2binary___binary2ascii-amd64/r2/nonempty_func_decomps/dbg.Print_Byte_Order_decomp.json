"{\"annotations\":[{\"start\":63,\"end\":63,\"offset\":4202992,\"type\":\"offset\"},{\"start\":112,\"end\":112,\"offset\":4202992,\"type\":\"offset\"},{\"start\":183,\"end\":183,\"offset\":4202996,\"type\":\"offset\"},{\"start\":234,\"end\":234,\"offset\":4203001,\"type\":\"offset\"},{\"start\":281,\"end\":281,\"offset\":4203004,\"type\":\"offset\"},{\"start\":361,\"end\":361,\"offset\":4203004,\"type\":\"offset\"},{\"start\":387,\"end\":387,\"offset\":4203011,\"type\":\"offset\"},{\"start\":487,\"end\":487,\"offset\":4203200,\"type\":\"offset\"},{\"start\":548,\"end\":548,\"offset\":4203200,\"type\":\"offset\"},{\"start\":620,\"end\":620,\"offset\":4203205,\"type\":\"offset\"},{\"start\":657,\"end\":657,\"offset\":4203210,\"type\":\"offset\"},{\"start\":809,\"end\":809,\"offset\":4203215,\"type\":\"offset\"},{\"start\":836,\"end\":836,\"offset\":4203215,\"type\":\"offset\"},{\"start\":892,\"end\":892,\"offset\":4203220,\"type\":\"offset\"},{\"start\":972,\"end\":972,\"offset\":4203220,\"type\":\"offset\"},{\"start\":998,\"end\":998,\"offset\":4203227,\"type\":\"offset\"},{\"start\":1033,\"end\":1033,\"offset\":4203232,\"type\":\"offset\"},{\"start\":1049,\"end\":1049,\"offset\":4203237,\"type\":\"offset\"},{\"start\":1238,\"end\":1238,\"offset\":4203242,\"type\":\"offset\"},{\"start\":1280,\"end\":1280,\"offset\":4203246,\"type\":\"offset\"},{\"start\":1362,\"end\":1362,\"offset\":4203246,\"type\":\"offset\"},{\"start\":1457,\"end\":1457,\"offset\":4203017,\"type\":\"offset\"},{\"start\":1484,\"end\":1484,\"offset\":4203020,\"type\":\"offset\"},{\"start\":1581,\"end\":1581,\"offset\":4203022,\"type\":\"offset\"},{\"start\":1605,\"end\":1605,\"offset\":4203024,\"type\":\"offset\"},{\"start\":1683,\"end\":1683,\"offset\":4203056,\"type\":\"offset\"},{\"start\":1744,\"end\":1744,\"offset\":4203056,\"type\":\"offset\"},{\"start\":1816,\"end\":1816,\"offset\":4203061,\"type\":\"offset\"},{\"start\":1853,\"end\":1853,\"offset\":4203066,\"type\":\"offset\"},{\"start\":2011,\"end\":2011,\"offset\":4203071,\"type\":\"offset\"},{\"start\":2038,\"end\":2038,\"offset\":4203071,\"type\":\"offset\"},{\"start\":2094,\"end\":2094,\"offset\":4203076,\"type\":\"offset\"},{\"start\":2174,\"end\":2174,\"offset\":4203076,\"type\":\"offset\"},{\"start\":2200,\"end\":2200,\"offset\":4203083,\"type\":\"offset\"},{\"start\":2235,\"end\":2235,\"offset\":4203088,\"type\":\"offset\"},{\"start\":2251,\"end\":2251,\"offset\":4203093,\"type\":\"offset\"},{\"start\":2442,\"end\":2442,\"offset\":4203098,\"type\":\"offset\"},{\"start\":2484,\"end\":2484,\"offset\":4203102,\"type\":\"offset\"},{\"start\":2566,\"end\":2566,\"offset\":4203102,\"type\":\"offset\"},{\"start\":2661,\"end\":2661,\"offset\":4203026,\"type\":\"offset\"},{\"start\":2709,\"end\":2709,\"offset\":4203031,\"type\":\"offset\"},{\"start\":2725,\"end\":2725,\"offset\":4203036,\"type\":\"offset\"},{\"start\":2808,\"end\":2808,\"offset\":4203041,\"type\":\"offset\"},{\"start\":2850,\"end\":2850,\"offset\":4203045,\"type\":\"offset\"},{\"start\":2932,\"end\":2932,\"offset\":4203045,\"type\":\"offset\"},{\"start\":3018,\"end\":4800,\"offset\":4203045,\"type\":\"offset\"}],\"code\":\"int dbg.Print_Byte_Order (int esi, int edx) {\\n    loc_0x4021f0:\\n        // CALL XREF from dbg.main @ 0x400c9c(x)\\n        rsp -= 8      // MachineInfo.c:37 // void Print_Byte_Order()//\\n        dbg.Get_Endianness  () // MachineInfo.c:42\\n        var = eax - 1 // MachineInfo.c:43 // 1\\n        rcx = qword [obj.stderr] // MachineInfo.c:49 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0\\n        if  (!var) goto loc_0x4022c0 // MachineInfo.c:43 // unlikely\\n            \\n    loc_0x4022c0:\\n        // CODE XREF from dbg.Print_Byte_Order @ 0x402203(x)\\n        edx = 0x2f    // MachineInfo.c:49 // '/' // 47 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str.This_machine_is_big_endian.__4321_byte_order_._n // 0x403770 // \\\"This machine is big-endian. (4321 byte order).\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x63616d2073696854, -1, -1, ?)\\n        rcx = qword [obj.stderr] // MachineInfo.c:50 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0\\n        edx = 0x4b    // 'K' // 75\\n        esi = 1\\n        edi = str.That_is__the_most_significant_byte_is_stored_in_the_lowest_memory_address._n // 0x4037a0 // \\\"That is, the most significant byte is stored in the lowest memory address.\\\\n\\\"\\n        rsp += 8      // MachineInfo.c:60\\n        goto loc_0x400b00 // MachineInfo.c:50 // sym.imp.fwrite // sym.imp.fwrite\\n        // size_t fwrite(0x2c73692074616854, -1, -1, ?)\\n         // } else {\\n    loc_0x402209:\\n        var = eax - 2 // 2\\n        if  (!var) goto loc_0x402268 // unlikely\\n        }\\n        return eax;\\n    loc_0x40220e:\\n        var = eax & eax\\n        if  (!var) goto loc_0x402230 // likely\\n            \\n    loc_0x402230:\\n        // CODE XREF from dbg.Print_Byte_Order @ 0x402210(x)\\n        edx = 0x32    // MachineInfo.c:45 // '2' // 50 // size_t nitems\\n        esi = 1       // size_t size\\n        edi = str.This_machine_is_little_endian.__1234_byte_order_._n // 0x4036e8 // \\\"This machine is little-endian. (1234 byte order).\\\\n\\\" // const void *ptr\\n        sym.imp.fwrite  ()\\n        // size_t fwrite(0x63616d2073696854, -1, -1, ?)\\n        rcx = qword [obj.stderr] // MachineInfo.c:46 // obj.stderr__GLIBC_2.2.5\\n        // [0x6045e8:8]=0\\n        edx = 0x4c    // 'L' // 76\\n        esi = 1\\n        edi = str.That_is__the_most_significant_byte_is_stored_in_the_highest_memory_address._n // 0x403720 // \\\"That is, the most significant byte is stored in the highest memory address.\\\\n\\\"\\n        rsp += 8      // MachineInfo.c:60\\n        goto loc_0x400b00 // MachineInfo.c:46 // sym.imp.fwrite // sym.imp.fwrite\\n        // size_t fwrite(0x2c73692074616854, -1, -1, ?)\\n         // } else {\\n    loc_0x402212:\\n        edx = 0x16    // MachineInfo.c:58 // 22\\n        esi = 1\\n        edi = str.Unknown_byte_ordering_n // 0x403b2e // \\\"Unknown byte-ordering\\\\n\\\"\\n        rsp += 8      // MachineInfo.c:60\\n        goto loc_0x400b00 // MachineInfo.c:58 // sym.imp.fwrite // sym.imp.fwrite\\n        // size_t fwrite(0x206e776f6e6b6e55, -1, -1, ?)\\n        }\\n        return eax;             // CODE XREF from dbg.Print_Byte_Order @ 0x40220c(x)\\n             edx = 0x4b               // MachineInfo.c:53 // 'K' // 75 // size_t nitems\\n             esi = 1                  // size_t size\\n             edi = str.This_machine_is_PDP_endian_and_so_is_probably_a_PDP_11.__3412_byte_order_._n // 0x4037f0 // \\\"This machine is PDP-endian and so is probably a PDP-11. (3412 byte order).\\\\n\\\" // const void *ptr\\n             sym.imp.fwrite  ()\\n                                      // size_t fwrite(0x63616d2073696854, -1, -1, ?)\\n             rcx = qword [obj.stderr] // MachineInfo.c:54 // obj.stderr__GLIBC_2.2.5\\n                                      // [0x6045e8:8]=0 // FILE *stream\\n             edx = 0x52               // 'R' // 82 // size_t nitems\\n             esi = 1                  // size_t size\\n             edi = str.In_4_byte_integers__the_first_two_bytes_are_more_significant_than_the_second_two._n // 0x403840 // \\\"In 4-byte integers, the first two bytes are more significant than the second two.\\\\n\\\" // const void *ptr\\n             sym.imp.fwrite  ()\\n                                      // size_t fwrite(0x7479622d34206e49, -1, -1, ?)\\n             rcx = qword [obj.stderr] // MachineInfo.c:55 // obj.stderr__GLIBC_2.2.5\\n                                      // [0x6045e8:8]=0\\n             edx = 0x3f               // '?' // 63\\n             esi = 1\\n             edi = str.but_within_each_pair__the_second_byte_is_the_more_significant._n // 0x403898 // \\\"but within each pair, the second byte is the more significant.\\\\n\\\"\\n             rsp += 8                 // MachineInfo.c:60\\n             goto loc_0x400b00        // MachineInfo.c:55 // sym.imp.fwrite // sym.imp.fwrite\\n                                      // size_t fwrite(0x6874697720747562, -1, -1, ?)\\n\\n    loc_0x00402268: // orphan\\n             // CODE XREF from dbg.Print_Byte_Order @ 0x40220c(x)\\n             edx = 0x4b               // MachineInfo.c:53 // 'K' // 75 // size_t nitems\\n             esi = 1                  // size_t size\\n             edi = str.This_machine_is_PDP_endian_and_so_is_probably_a_PDP_11.__3412_byte_order_._n // 0x4037f0 // \\\"This machine is PDP-endian and so is probably a PDP-11. (3412 byte order).\\\\n\\\" // const void *ptr\\n             sym.imp.fwrite  ()\\n                                      // size_t fwrite(0x63616d2073696854, -1, -1, ?)\\n             rcx = qword [obj.stderr] // MachineInfo.c:54 // obj.stderr__GLIBC_2.2.5\\n                                      // [0x6045e8:8]=0 // FILE *stream\\n             edx = 0x52               // 'R' // 82 // size_t nitems\\n             esi = 1                  // size_t size\\n             edi = str.In_4_byte_integers__the_first_two_bytes_are_more_significant_than_the_second_two._n // 0x403840 // \\\"In 4-byte integers, the first two bytes are more significant than the second two.\\\\n\\\" // const void *ptr\\n             sym.imp.fwrite  ()\\n                                      // size_t fwrite(0x7479622d34206e49, -1, -1, ?)\\n             rcx = qword [obj.stderr] // MachineInfo.c:55 // obj.stderr__GLIBC_2.2.5\\n                                      // [0x6045e8:8]=0\\n             edx = 0x3f               // '?' // 63\\n             esi = 1\\n             edi = str.but_within_each_pair__the_second_byte_is_the_more_significant._n // 0x403898 // \\\"but within each pair, the second byte is the more significant.\\\\n\\\"\\n             rsp += 8                 // MachineInfo.c:60\\n             goto loc_0x400b00        // MachineInfo.c:55 // sym.imp.fwrite // sym.imp.fwrite\\n                                      // size_t fwrite(0x6874697720747562, -1, -1, ?)\\n\\n}\\n\"}\n"