"{\"annotations\":[{\"start\":64,\"end\":64,\"offset\":4294989316,\"type\":\"offset\"},{\"start\":126,\"end\":126,\"offset\":4294989316,\"type\":\"offset\"},{\"start\":188,\"end\":188,\"offset\":4294989316,\"type\":\"offset\"},{\"start\":250,\"end\":250,\"offset\":4294989316,\"type\":\"offset\"},{\"start\":270,\"end\":270,\"offset\":4294989317,\"type\":\"offset\"},{\"start\":288,\"end\":288,\"offset\":4294989320,\"type\":\"offset\"},{\"start\":308,\"end\":308,\"offset\":4294989322,\"type\":\"offset\"},{\"start\":328,\"end\":328,\"offset\":4294989324,\"type\":\"offset\"},{\"start\":348,\"end\":348,\"offset\":4294989326,\"type\":\"offset\"},{\"start\":368,\"end\":368,\"offset\":4294989328,\"type\":\"offset\"},{\"start\":388,\"end\":388,\"offset\":4294989329,\"type\":\"offset\"},{\"start\":408,\"end\":408,\"offset\":4294989330,\"type\":\"offset\"},{\"start\":437,\"end\":437,\"offset\":4294989333,\"type\":\"offset\"},{\"start\":466,\"end\":466,\"offset\":4294989336,\"type\":\"offset\"},{\"start\":507,\"end\":507,\"offset\":4294989340,\"type\":\"offset\"},{\"start\":549,\"end\":549,\"offset\":4294989347,\"type\":\"offset\"},{\"start\":579,\"end\":579,\"offset\":4294989350,\"type\":\"offset\"},{\"start\":665,\"end\":665,\"offset\":4294989376,\"type\":\"offset\"},{\"start\":727,\"end\":727,\"offset\":4294989376,\"type\":\"offset\"},{\"start\":782,\"end\":782,\"offset\":4294989379,\"type\":\"offset\"},{\"start\":844,\"end\":844,\"offset\":4294989379,\"type\":\"offset\"},{\"start\":886,\"end\":886,\"offset\":4294989386,\"type\":\"offset\"},{\"start\":916,\"end\":916,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":1048,\"end\":1585,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":2154,\"end\":2350,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":2578,\"end\":2764,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":2982,\"end\":3063,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":3176,\"end\":3473,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":3802,\"end\":3880,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":3990,\"end\":4101,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":4244,\"end\":4478,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":4744,\"end\":4876,\"offset\":4294989389,\"type\":\"offset\"},{\"start\":5040,\"end\":5290,\"offset\":4294989389,\"type\":\"offset\"}],\"code\":\"int sym.func.100005604 (int esi, int edx) {\\n    loc_0x100005604:\\n        // CALL XREF from sym.func.100005560 @ 0x1000055e5(x)\\n        // CALL XREF from sym.func.100006467 @ 0x1000064d6(x)\\n        // CALL XREF from sym.func.10000652f @ 0x100006724(x)\\n        push  (rbp)\\n        rbp = rsp\\n        push  (r15)\\n        push  (r14)\\n        push  (r13)\\n        push  (r12)\\n        push  (rbx)\\n        push  (rax)\\n        r15 = rdx    // arg3\\n        rbx = rdi    // arg1\\n        r12 = qword [rdi + 0x60] // arg1\\n        rax = rip + 0x2fa1 // 0x1000085c4\\n        var = dword [rax] - 0\\n        if  (!var) goto loc_0x100005640 // unlikely\\n            \\n    loc_0x100005640:\\n        // CODE XREF from sym.func.100005604 @ 0x100005626(x)\\n        r14d = 0\\n         // do {\\n    loc_0x100005643:\\n        // CODE XREF from sym.func.100005604 @ 0x10000563e(x)\\n        rax = rip + 0x2f8a // 0x1000085d4\\n        var = dword [rax] - 0\\n        if  (!var) goto loc_0x10000567f // unlikely\\n         // } while (?);\\n         // } while (?);\\n        }\\n        return eax;             rax = qword [r12 + 0x68]\\n             rcx = rip + 0x2fc5       // 0x100008620\\n             cq\\n             qword [rcx] /=\\n             var = rdx - 1            // arg3\\n             rax = rax - 0xffffffffffffffff\\n             rdi = rip + 0x25e6       // \\\"%*lld \\\"\\n                                      // 0x100007c55 // const char *format\\n             esi = r15d\\n             rdx = rax\\n             eax = 0\\n             sym.imp.printf  ()\\n                                      // int printf(\\\"%*lld \\\")\\n             r14d += eax\\n\\n    loc_0x10000564f: // orphan\\n             rax = qword [r12 + 0x68]\\n             rcx = rip + 0x2fc5       // 0x100008620\\n             cq\\n             qword [rcx] /=\\n             var = rdx - 1            // arg3\\n             rax = rax - 0xffffffffffffffff\\n             rdi = rip + 0x25e6       // \\\"%*lld \\\"\\n                                      // 0x100007c55 // const char *format\\n             esi = r15d\\n             rdx = rax\\n             eax = 0\\n             sym.imp.printf  ()\\n                                      // int printf(\\\"%*lld \\\")\\n             r14d += eax\\n         // CODE XREF from sym.func.100005604 @ 0x10000564d(x)\\n         r15 = rip + 0x2f8a       // 0x100008610\\n         var = dword [r15] - 0\\n         if  (!var) goto loc_0x10000569f // unlikely\\n\\n    loc_0x10000567f: // orphan\\n         // CODE XREF from sym.func.100005604 @ 0x10000564d(x)\\n         r15 = rip + 0x2f8a       // 0x100008610\\n         var = dword [r15] - 0\\n         if  (!var) goto loc_0x10000569f // unlikely\\n         edi = word [r12 + 4]     // uint32_t arg1\\n         sym.func.1000062c6  ()   // sym.func.1000062c6(0x0)\\n         var = eax & eax\\n         r13b = ne\\n         goto loc_0x1000056a2\\n\\n    loc_0x10000568c: // orphan\\n         edi = word [r12 + 4]     // uint32_t arg1\\n         sym.func.1000062c6  ()   // sym.func.1000062c6(0x0)\\n         var = eax & eax\\n         r13b = ne\\n         goto loc_0x1000056a2\\n         // CODE XREF from sym.func.100005604 @ 0x10000568a(x)\\n         r13d = 0\\n\\n    loc_0x10000569f: // orphan\\n         // CODE XREF from sym.func.100005604 @ 0x10000568a(x)\\n         r13d = 0\\n         // CODE XREF from sym.func.100005604 @ 0x10000569d(x)\\n         rbx += 0x68\\n         rdi = rbx                // int64_t arg1\\n         sym.func.1000056ef  ()   // sym.func.1000056ef(0x68)\\n         ebx = eax\\n         var = dword [r15] - 0\\n         if  (!var) goto loc_0x1000056c2 // likely\\n\\n    loc_0x1000056a2: // orphan\\n         // CODE XREF from sym.func.100005604 @ 0x10000569d(x)\\n         rbx += 0x68\\n         rdi = rbx                // int64_t arg1\\n         sym.func.1000056ef  ()   // sym.func.1000056ef(0x68)\\n         ebx = eax\\n         var = dword [r15] - 0\\n         if  (!var) goto loc_0x1000056c2 // likely\\n         var = r13b & r13b\\n         if  (!var) goto loc_0x1000056c2 // likely\\n\\n    loc_0x1000056b6: // orphan\\n         var = r13b & r13b\\n         if  (!var) goto loc_0x1000056c2 // likely\\n         edi = 0                  // int64_t arg1\\n         sym.func.100006388  ()   // sym.func.100006388(0x0)\\n\\n    loc_0x1000056bb: // orphan\\n         edi = 0                  // int64_t arg1\\n         sym.func.100006388  ()   // sym.func.100006388(0x0)\\n         // CODE XREFS from sym.func.100005604 @ 0x1000056b4(x), 0x1000056b9(x)\\n         ebx += r14d\\n         rax = rip + 0x2ee4       // 0x1000085b0\\n         var = dword [rax] - 0\\n         if  (!var) goto loc_0x1000056de // unlikely\\n\\n    loc_0x1000056c2: // orphan\\n         // CODE XREFS from sym.func.100005604 @ 0x1000056b4(x), 0x1000056b9(x)\\n         ebx += r14d\\n         rax = rip + 0x2ee4       // 0x1000085b0\\n         var = dword [rax] - 0\\n         if  (!var) goto loc_0x1000056de // unlikely\\n         edi = word [r12 + 4]     // uint32_t arg1\\n         sym.func.1000063f9  ()   // sym.func.1000063f9(0x0)\\n         ebx += eax\\n\\n    loc_0x1000056d1: // orphan\\n         edi = word [r12 + 4]     // uint32_t arg1\\n         sym.func.1000063f9  ()   // sym.func.1000063f9(0x0)\\n         ebx += eax\\n         // CODE XREF from sym.func.100005604 @ 0x1000056cf(x)\\n         eax = ebx\\n         rsp += 8\\n         rbx = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         r15 = pop  ()\\n         rbp = pop  ()\\n         re\\n\\n    loc_0x1000056de: // orphan\\n         // CODE XREF from sym.func.100005604 @ 0x1000056cf(x)\\n         eax = ebx\\n         rsp += 8\\n         rbx = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         r15 = pop  ()\\n         rbp = pop  ()\\n         re\\n\\n}\\n\"}\n"