"{\"annotations\":[{\"start\":64,\"end\":64,\"offset\":4294994692,\"type\":\"offset\"},{\"start\":126,\"end\":126,\"offset\":4294994692,\"type\":\"offset\"},{\"start\":146,\"end\":146,\"offset\":4294994693,\"type\":\"offset\"},{\"start\":164,\"end\":164,\"offset\":4294994696,\"type\":\"offset\"},{\"start\":184,\"end\":184,\"offset\":4294994698,\"type\":\"offset\"},{\"start\":204,\"end\":204,\"offset\":4294994700,\"type\":\"offset\"},{\"start\":224,\"end\":224,\"offset\":4294994702,\"type\":\"offset\"},{\"start\":244,\"end\":244,\"offset\":4294994704,\"type\":\"offset\"},{\"start\":264,\"end\":264,\"offset\":4294994705,\"type\":\"offset\"},{\"start\":284,\"end\":284,\"offset\":4294994712,\"type\":\"offset\"},{\"start\":313,\"end\":313,\"offset\":4294994715,\"type\":\"offset\"},{\"start\":380,\"end\":380,\"offset\":4294994722,\"type\":\"offset\"},{\"start\":406,\"end\":406,\"offset\":4294994725,\"type\":\"offset\"},{\"start\":436,\"end\":436,\"offset\":4294994729,\"type\":\"offset\"},{\"start\":457,\"end\":457,\"offset\":4294994732,\"type\":\"offset\"},{\"start\":479,\"end\":479,\"offset\":4294994739,\"type\":\"offset\"},{\"start\":508,\"end\":508,\"offset\":4294994743,\"type\":\"offset\"},{\"start\":544,\"end\":544,\"offset\":4294994748,\"type\":\"offset\"},{\"start\":580,\"end\":580,\"offset\":4294994753,\"type\":\"offset\"},{\"start\":616,\"end\":616,\"offset\":4294994758,\"type\":\"offset\"},{\"start\":652,\"end\":652,\"offset\":4294994763,\"type\":\"offset\"},{\"start\":688,\"end\":688,\"offset\":4294994768,\"type\":\"offset\"},{\"start\":724,\"end\":724,\"offset\":4294994773,\"type\":\"offset\"},{\"start\":760,\"end\":760,\"offset\":4294994778,\"type\":\"offset\"},{\"start\":814,\"end\":814,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":876,\"end\":876,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":961,\"end\":1471,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":2013,\"end\":2125,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":2269,\"end\":2345,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":2453,\"end\":2535,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":2649,\"end\":2688,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":2759,\"end\":3044,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":3361,\"end\":3542,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":3755,\"end\":3939,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":4155,\"end\":4354,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":4585,\"end\":4744,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":4935,\"end\":5103,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":5303,\"end\":5882,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":6493,\"end\":6868,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":7275,\"end\":7369,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":7495,\"end\":7740,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":8017,\"end\":8207,\"offset\":4294994780,\"type\":\"offset\"},{\"start\":8429,\"end\":8595,\"offset\":4294994780,\"type\":\"offset\"}],\"code\":\"int sym.func.100006b04 (int esi, int edx) {\\n    loc_0x100006b04:\\n        // CODE XREF from sym.func.1000056ef @ 0x100005720(x)\\n        push  (rbp)\\n        rbp = rsp\\n        push  (r15)\\n        push  (r14)\\n        push  (r13)\\n        push  (r12)\\n        push  (rbx)\\n        rsp -= 0x98\\n        rbx = rdi    // arg1\\n        rax = qword [reloc.__stack_chk_guard] // [0x100008010:8]=0\\n        rax = qword [rax]\\n        qword [var_30h] = rax\\n        xmm0 ^= xmm0\\n        r15 = var_b0h\\n        xmmword [r15] = xmm0\\n        xmmword [r15 + 0x10] = xmm0\\n        xmmword [r15 + 0x20] = xmm0\\n        xmmword [r15 + 0x30] = xmm0\\n        xmmword [r15 + 0x40] = xmm0\\n        xmmword [r15 + 0x50] = xmm0\\n        xmmword [r15 + 0x60] = xmm0\\n        xmmword [r15 + 0x70] = xmm0\\n        eax = 0\\n         // do {\\n    loc_0x100006b5c:\\n        // CODE XREF from sym.func.100006b04 @ 0x100006c48(x)\\n        qword [var_b8h] = rax\\n         // } while (?);\\n        }\\n        return eax;             // CODE XREFS from sym.func.100006b04 @ 0x100006be2(x), 0x100006c03(x)\\n             edx = 6                  // size_t n\\n             rdi = pwc                // wchar_t *pwc\\n             rsi = rbx                // const char *s\\n             rcx = r15                // mbstate_t *ps\\n             sym.imp.mbrtowc  ()\\n                                      // size_t mbrtowc(?, -1, 0x00010000, ?)\\n             var = rax - 0xfffffffffffffffe\\n             if  (!var) goto loc_0x100006c4d // unlikely\\n\\n    loc_0x100006b63: // orphan\\n             // CODE XREFS from sym.func.100006b04 @ 0x100006be2(x), 0x100006c03(x)\\n             edx = 6                  // size_t n\\n             rdi = pwc                // wchar_t *pwc\\n             rsi = rbx                // const char *s\\n             rcx = r15                // mbstate_t *ps\\n             sym.imp.mbrtowc  ()\\n                                      // size_t mbrtowc(?, -1, 0x00010000, ?)\\n             var = rax - 0xfffffffffffffffe\\n             if  (!var) goto loc_0x100006c4d // unlikely\\n         r13 = rax\\n         var = rax - 0xffffffffffffffff\\n         if  (!var) goto loc_0x100006c08 // unlikely\\n\\n    loc_0x100006b84: // orphan\\n         r13 = rax\\n         var = rax - 0xffffffffffffffff\\n         if  (!var) goto loc_0x100006c08 // unlikely\\n         var = r13 & r13\\n         if  (!var) goto loc_0x100006c69 // likely\\n\\n    loc_0x100006b8d: // orphan\\n         var = r13 & r13\\n         if  (!var) goto loc_0x100006c69 // likely\\n         var = r13d & r13d\\n         if  (var <= 0) goto loc_0x100006bb3 // likely\\n\\n    loc_0x100006b96: // orphan\\n         var = r13d & r13d\\n         if  (var <= 0) goto loc_0x100006bb3 // likely\\n         r14d = r13d\\n         r12d = 0\\n\\n    loc_0x100006b9b: // orphan\\n         r14d = r13d\\n         r12d = 0\\n         // CODE XREF from sym.func.100006b04 @ 0x100006bb1(x)\\n         edi = byte [rbx + r12]   // int c\\n         sym.imp.putchar  ()\\n                                  // int putchar(0x00000000)\\n         r12+\\n         var = r14 - r12\\n         if  (var) goto loc_0x100006ba1 // likely\\n\\n    loc_0x100006ba1: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006bb1(x)\\n         edi = byte [rbx + r12]   // int c\\n         sym.imp.putchar  ()\\n                                  // int putchar(0x00000000)\\n         r12+\\n         var = r14 - r12\\n         if  (var) goto loc_0x100006ba1 // likely\\n         // CODE XREF from sym.func.100006b04 @ 0x100006b99(x)\\n         edi = dword [pwc]\\n         var = rdi - 0x7f\\n         if  (((unsigned) var) > 0) goto 0x100006bd3 // unlikely\\n\\n    loc_0x100006bb3: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006b99(x)\\n         edi = dword [pwc]\\n         var = rdi - 0x7f\\n         if  (((unsigned) var) > 0) goto 0x100006bd3 // unlikely\\n         rax = qword [reloc._DefaultRuneLocale] // [0x100008008:8]=0\\n         eax = dword [rax + rdi*4 + 0x3c]\\n         ecx = 0x40000\\n         eax &= ecx\\n         goto loc_0x100006bdd\\n\\n    loc_0x100006bbf: // orphan\\n         rax = qword [reloc._DefaultRuneLocale] // [0x100008008:8]=0\\n         eax = dword [rax + rdi*4 + 0x3c]\\n         ecx = 0x40000\\n         eax &= ecx\\n         goto loc_0x100006bdd\\n         // CODE XREF from sym.func.100006b04 @ 0x100006bbd(x)\\n         esi = 0x40000            // long f\\n         sym.imp.__maskrune  ()\\n                                  // int __maskrune(-1, -1)\\n\\n    loc_0x100006bd3: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006bbd(x)\\n         esi = 0x40000            // long f\\n         sym.imp.__maskrune  ()\\n                                  // int __maskrune(-1, -1)\\n         // CODE XREF from sym.func.100006b04 @ 0x100006bd1(x)\\n         rbx += r13\\n         var = eax & eax\\n         if  (!var) goto loc_0x100006b63 // likely\\n\\n    loc_0x100006bdd: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006bd1(x)\\n         rbx += r13\\n         var = eax & eax\\n         if  (!var) goto loc_0x100006b63 // likely\\n         edi = dword [pwc]\\n         sym.imp.wcwidth  ()\\n         rcx = qword [var_b8h]\\n         ecx += eax\\n         qword [var_b8h] = rcx\\n         goto loc_0x100006b63\\n\\n    loc_0x100006be8: // orphan\\n         edi = dword [pwc]\\n         sym.imp.wcwidth  ()\\n         rcx = qword [var_b8h]\\n         ecx += eax\\n         qword [var_b8h] = rcx\\n         goto loc_0x100006b63\\n         // CODE XREF from sym.func.100006b04 @ 0x100006b8b(x)\\n         xmm0 ^= xmm0\\n         xmmword [var_40h] = xmm0\\n         xmmword [var_50h] = xmm0\\n         xmmword [var_60h] = xmm0\\n         xmmword [var_70h] = xmm0\\n         xmmword [var_80h] = xmm0\\n         xmmword [var_90h] = xmm0\\n         xmmword [var_a0h] = xmm0\\n         xmmword [var_b0h] = xmm0\\n         edi = byte [rbx]         // int c\\n         sym.imp.putchar  ()\\n                                  // int putchar(0x00000000)\\n         rbx+\\n         rax = qword [var_b8h]\\n         eax+\\n         goto loc_0x100006b5c\\n\\n    loc_0x100006c08: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006b8b(x)\\n         xmm0 ^= xmm0\\n         xmmword [var_40h] = xmm0\\n         xmmword [var_50h] = xmm0\\n         xmmword [var_60h] = xmm0\\n         xmmword [var_70h] = xmm0\\n         xmmword [var_80h] = xmm0\\n         xmmword [var_90h] = xmm0\\n         xmmword [var_a0h] = xmm0\\n         xmmword [var_b0h] = xmm0\\n         edi = byte [rbx]         // int c\\n         sym.imp.putchar  ()\\n                                  // int putchar(0x00000000)\\n         rbx+\\n         rax = qword [var_b8h]\\n         eax+\\n         goto loc_0x100006b5c\\n         // CODE XREF from sym.func.100006b04 @ 0x100006b7e(x)\\n         rdi = rip + 0x1270       // \\\"%s\\\"\\n                                  // 0x100007ec4 // const char *format\\n         rsi = rbx\\n         eax = 0\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"%s\\\")\\n         rcx = qword [var_b8h]\\n         ecx += eax\\n         goto loc_0x100006c70\\n\\n    loc_0x100006c4d: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006b7e(x)\\n         rdi = rip + 0x1270       // \\\"%s\\\"\\n                                  // 0x100007ec4 // const char *format\\n         rsi = rbx\\n         eax = 0\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"%s\\\")\\n         rcx = qword [var_b8h]\\n         ecx += eax\\n         goto loc_0x100006c70\\n         // CODE XREF from sym.func.100006b04 @ 0x100006b90(x)\\n         rcx = qword [var_b8h]\\n\\n    loc_0x100006c69: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006b90(x)\\n         rcx = qword [var_b8h]\\n         // CODE XREF from sym.func.100006b04 @ 0x100006c67(x)\\n         rax = qword [reloc.__stack_chk_guard] // [0x100008010:8]=0\\n         rax = qword [rax]\\n         var = rax - qword [var_30h]\\n         if  (var) goto loc_0x100006c94 // likely\\n\\n    loc_0x100006c70: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006c67(x)\\n         rax = qword [reloc.__stack_chk_guard] // [0x100008010:8]=0\\n         rax = qword [rax]\\n         var = rax - qword [var_30h]\\n         if  (var) goto loc_0x100006c94 // likely\\n         eax = ecx\\n         rsp += 0x98\\n         rbx = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         r15 = pop  ()\\n         rbp = pop  ()\\n         re\\n\\n    loc_0x100006c80: // orphan\\n         eax = ecx\\n         rsp += 0x98\\n         rbx = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         r15 = pop  ()\\n         rbp = pop  ()\\n         re\\n         // CODE XREF from sym.func.100006b04 @ 0x100006c7e(x)\\n         sym.imp.__stack_chk_fail  ()\\n                                  // void __stack_chk_fail(void)\\n\\n    loc_0x100006c94: // orphan\\n         // CODE XREF from sym.func.100006b04 @ 0x100006c7e(x)\\n         sym.imp.__stack_chk_fail  ()\\n                                  // void __stack_chk_fail(void)\\n\\n}\\n\"}\n"