"{\"annotations\":[{\"start\":64,\"end\":64,\"offset\":4294991737,\"type\":\"offset\"},{\"start\":126,\"end\":126,\"offset\":4294991737,\"type\":\"offset\"},{\"start\":146,\"end\":146,\"offset\":4294991738,\"type\":\"offset\"},{\"start\":164,\"end\":164,\"offset\":4294991741,\"type\":\"offset\"},{\"start\":184,\"end\":184,\"offset\":4294991743,\"type\":\"offset\"},{\"start\":204,\"end\":204,\"offset\":4294991745,\"type\":\"offset\"},{\"start\":224,\"end\":224,\"offset\":4294991747,\"type\":\"offset\"},{\"start\":244,\"end\":244,\"offset\":4294991749,\"type\":\"offset\"},{\"start\":264,\"end\":264,\"offset\":4294991750,\"type\":\"offset\"},{\"start\":285,\"end\":285,\"offset\":4294991757,\"type\":\"offset\"},{\"start\":314,\"end\":314,\"offset\":4294991760,\"type\":\"offset\"},{\"start\":381,\"end\":381,\"offset\":4294991767,\"type\":\"offset\"},{\"start\":407,\"end\":407,\"offset\":4294991770,\"type\":\"offset\"},{\"start\":437,\"end\":437,\"offset\":4294991774,\"type\":\"offset\"},{\"start\":473,\"end\":473,\"offset\":4294991781,\"type\":\"offset\"},{\"start\":533,\"end\":533,\"offset\":4294991788,\"type\":\"offset\"},{\"start\":603,\"end\":603,\"offset\":4294991814,\"type\":\"offset\"},{\"start\":665,\"end\":665,\"offset\":4294991814,\"type\":\"offset\"},{\"start\":720,\"end\":720,\"offset\":4294991821,\"type\":\"offset\"},{\"start\":744,\"end\":744,\"offset\":4294991824,\"type\":\"offset\"},{\"start\":829,\"end\":829,\"offset\":4294991840,\"type\":\"offset\"},{\"start\":891,\"end\":891,\"offset\":4294991840,\"type\":\"offset\"},{\"start\":933,\"end\":933,\"offset\":4294991847,\"type\":\"offset\"},{\"start\":959,\"end\":959,\"offset\":4294991850,\"type\":\"offset\"},{\"start\":983,\"end\":983,\"offset\":4294991853,\"type\":\"offset\"},{\"start\":1066,\"end\":1066,\"offset\":4294991979,\"type\":\"offset\"},{\"start\":1128,\"end\":1128,\"offset\":4294991979,\"type\":\"offset\"},{\"start\":1172,\"end\":1172,\"offset\":4294991986,\"type\":\"offset\"},{\"start\":1202,\"end\":1202,\"offset\":4294991986,\"type\":\"offset\"},{\"start\":1229,\"end\":1229,\"offset\":4294991991,\"type\":\"offset\"},{\"start\":1247,\"end\":1247,\"offset\":4294991994,\"type\":\"offset\"},{\"start\":1282,\"end\":1282,\"offset\":4294991994,\"type\":\"offset\"},{\"start\":1323,\"end\":1323,\"offset\":4294992001,\"type\":\"offset\"},{\"start\":1362,\"end\":1362,\"offset\":4294992004,\"type\":\"offset\"},{\"start\":1389,\"end\":1389,\"offset\":4294992004,\"type\":\"offset\"},{\"start\":1423,\"end\":1423,\"offset\":4294992009,\"type\":\"offset\"},{\"start\":1447,\"end\":1447,\"offset\":4294992012,\"type\":\"offset\"},{\"start\":1531,\"end\":1531,\"offset\":4294992486,\"type\":\"offset\"},{\"start\":1610,\"end\":1610,\"offset\":4294992486,\"type\":\"offset\"},{\"start\":1628,\"end\":1628,\"offset\":4294992493,\"type\":\"offset\"},{\"start\":1674,\"end\":1674,\"offset\":4294992498,\"type\":\"offset\"},{\"start\":1706,\"end\":1706,\"offset\":4294992501,\"type\":\"offset\"},{\"start\":1749,\"end\":1749,\"offset\":4294992504,\"type\":\"offset\"},{\"start\":1791,\"end\":1791,\"offset\":4294992507,\"type\":\"offset\"},{\"start\":1820,\"end\":1820,\"offset\":4294992507,\"type\":\"offset\"},{\"start\":1870,\"end\":1870,\"offset\":4294992512,\"type\":\"offset\"},{\"start\":1929,\"end\":1929,\"offset\":4294992519,\"type\":\"offset\"},{\"start\":1971,\"end\":1971,\"offset\":4294992522,\"type\":\"offset\"},{\"start\":2009,\"end\":2009,\"offset\":4294992525,\"type\":\"offset\"},{\"start\":2035,\"end\":2035,\"offset\":4294992525,\"type\":\"offset\"},{\"start\":2063,\"end\":2063,\"offset\":4294992530,\"type\":\"offset\"},{\"start\":2105,\"end\":2105,\"offset\":4294992533,\"type\":\"offset\"},{\"start\":2135,\"end\":2135,\"offset\":4294992538,\"type\":\"offset\"},{\"start\":2161,\"end\":2161,\"offset\":4294992538,\"type\":\"offset\"},{\"start\":2197,\"end\":2197,\"offset\":4294992543,\"type\":\"offset\"},{\"start\":2264,\"end\":2264,\"offset\":4294992550,\"type\":\"offset\"},{\"start\":2290,\"end\":2290,\"offset\":4294992553,\"type\":\"offset\"},{\"start\":2326,\"end\":2326,\"offset\":4294992557,\"type\":\"offset\"},{\"start\":2411,\"end\":2411,\"offset\":4294992577,\"type\":\"offset\"},{\"start\":2473,\"end\":2473,\"offset\":4294992577,\"type\":\"offset\"},{\"start\":2510,\"end\":2510,\"offset\":4294992577,\"type\":\"offset\"},{\"start\":2591,\"end\":2591,\"offset\":4294992559,\"type\":\"offset\"},{\"start\":2612,\"end\":2612,\"offset\":4294992566,\"type\":\"offset\"},{\"start\":2634,\"end\":2634,\"offset\":4294992567,\"type\":\"offset\"},{\"start\":2656,\"end\":2656,\"offset\":4294992569,\"type\":\"offset\"},{\"start\":2678,\"end\":2678,\"offset\":4294992571,\"type\":\"offset\"},{\"start\":2700,\"end\":2700,\"offset\":4294992573,\"type\":\"offset\"},{\"start\":2722,\"end\":2722,\"offset\":4294992575,\"type\":\"offset\"},{\"start\":2744,\"end\":2744,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":2869,\"end\":3221,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":3605,\"end\":3780,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":3987,\"end\":4225,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":4495,\"end\":4811,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":5159,\"end\":5529,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":5931,\"end\":6041,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":6183,\"end\":6315,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":6479,\"end\":7069,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":7691,\"end\":7809,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":7959,\"end\":8127,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":8327,\"end\":8468,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":8641,\"end\":9091,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":9573,\"end\":9666,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":9791,\"end\":10056,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":10353,\"end\":10439,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":10557,\"end\":10744,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":10963,\"end\":11151,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":11371,\"end\":11543,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":11747,\"end\":12011,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":12307,\"end\":12384,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":12493,\"end\":12523,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":12585,\"end\":12816,\"offset\":4294992576,\"type\":\"offset\"},{\"start\":13079,\"end\":14127,\"offset\":4294992576,\"type\":\"offset\"}],\"code\":\"int sym.func.100005f79 (int esi, int edx) {\\n    loc_0x100005f79:\\n        // CALL XREF from sym.func.100005725 @ 0x100005991(x)\\n        push  (rbp)\\n        rbp = rsp\\n        push  (r15)\\n        push  (r14)\\n        push  (r13)\\n        push  (r12)\\n        push  (rbx)\\n        rsp -= 0x488\\n        r14 = rdi    // arg1\\n        rax = qword [reloc.__stack_chk_guard] // [0x100008010:8]=0\\n        rax = qword [rax]\\n        qword [var_30h] = rax\\n        qword [timer] = rdi // arg1\\n        var = dword [0x100008574] - 0 // [0x100008574:4]=-1\\n        jns 0x100005fc6 // unlikely\\n            \\n    loc_0x100005fc6:\\n        // CODE XREF from sym.func.100005f79 @ 0x100005fac(x)\\n        rax = qword [0x100008718] // [0x100008718:8]=0\\n        var = rax & rax\\n        if  (var) goto loc_0x100005fe0 // unlikely\\n            \\n    loc_0x100005fe0:\\n        // CODE XREF from sym.func.100005f79 @ 0x100005fd0(x)\\n        rcx = rip + 0x25c1 // 0x1000085a8\\n        r15 = qword [rcx]\\n        var = r15 & r15\\n        if  (var) goto loc_0x10000606b // likely\\n            \\n    loc_0x10000606b:\\n        // CODE XREF from sym.func.100005f79 @ 0x100005fed(x)\\n        rdi = timer  // const time_t *timer\\n        sym.imp.localtime  ()\\n        // tm*localtime(?)\\n        r12 = rax\\n        rsi = rip + 0x1e0c // \\\"%b\\\"\\n        // 0x100007e8d // const char *s2\\n        rdi = r15    // const char *s1\\n        sym.imp.strstr  ()\\n        // char *strstr(-1, \\\"%b\\\")\\n        var = rax & rax\\n        if  (!var) goto loc_0x100006266 // likely\\n            \\n    loc_0x100006266:\\n        // CODE XREFS from sym.func.100005f79 @ 0x10000608c(x), 0x1000061ea(x)\\n        r14 = pwc\\n        esi = 0x50   // 'P' // size_t maxsize\\n        rdi = r14    // char *s\\n        rdx = r15    // const char *format\\n        rcx = r12    // const tm *timeptr\\n        sym.imp.strftime  ()\\n        // size_t strftime(\\\"\\\", 0x00000000, -1, ?)\\n        rbx = qword [reloc.__stdoutp] // [0x100008020:8]=0\\n        rsi = qword [rbx] // FILE *stream\\n        rdi = r14    // const char *s\\n        sym.imp.fputs  ()\\n        // int fputs(\\\"\\\", ?)\\n        rsi = qword [rbx] // FILE *stream\\n        edi = 0x20   // int c\\n        sym.imp.fputc  ()\\n        // int fputc(0x00000000, ?)\\n        rax = qword [reloc.__stack_chk_guard] // [0x100008010:8]=0\\n        rax = qword [rax]\\n        var = rax - qword [var_30h]\\n        if  (var) goto loc_0x1000062c1 // unlikely\\n            \\n    loc_0x1000062c1:\\n        // CODE XREF from sym.func.100005f79 @ 0x1000062ad(x)\\n        sym.imp.__stack_chk_fail  ()\\n        // void __stack_chk_fail(void)\\n         // } else {\\n    loc_0x1000062af:\\n        rsp += 0x488\\n        rbx = pop  ()\\n        r12 = pop  ()\\n        r13 = pop  ()\\n        r14 = pop  ()\\n        r15 = pop  ()\\n        rbp = pop  ()\\n        re\\n         // } else {\\n         // } else {\\n         // } else {\\n         // } else {\\n        }\\n        return eax;             var = dword [0x100008574] - 0 // [0x100008574:4]=0\\n             rax = rip + 0x1e52       // str._b__e__T__Y\\n                                      // 0x100007e5b // \\\"%b %e %T %Y\\\"\\n             r15 = rip + 0x1e3f       // str._e__b__T__Y\\n                                      // 0x100007e4f // \\\"%e %b %T %Y\\\"\\n             goto loc_0x100006067\\n\\n    loc_0x100005ffb: // orphan\\n             var = dword [0x100008574] - 0 // [0x100008574:4]=0\\n             rax = rip + 0x1e52       // str._b__e__T__Y\\n                                      // 0x100007e5b // \\\"%b %e %T %Y\\\"\\n             r15 = rip + 0x1e3f       // str._e__b__T__Y\\n                                      // 0x100007e4f // \\\"%e %b %T %Y\\\"\\n             goto loc_0x100006067\\n         // CODE XREF from sym.func.100005f79 @ 0x100005ff9(x)\\n         rcx = r14 + 0xeff100\\n         var = rcx - rax\\n         if  (var <= 0) goto loc_0x100006052 // unlikely\\n\\n    loc_0x100006012: // orphan\\n         // CODE XREF from sym.func.100005f79 @ 0x100005ff9(x)\\n         rcx = r14 + 0xeff100\\n         var = rcx - rax\\n         if  (var <= 0) goto loc_0x100006052 // unlikely\\n         rcx = rip + 0x2557       // 0x10000857c\\n         rdx = rax + 1\\n         rax += 0xeff100\\n         var = byte [rcx] - 0\\n         if  (!zf) rax = rdx\\n         var = rax - r14\\n         if  (var <= 0) goto loc_0x100006052 // unlikely\\n\\n    loc_0x10000601e: // orphan\\n         rcx = rip + 0x2557       // 0x10000857c\\n         rdx = rax + 1\\n         rax += 0xeff100\\n         var = byte [rcx] - 0\\n         if  (!zf) rax = rdx\\n         var = rax - r14\\n         if  (var <= 0) goto loc_0x100006052 // unlikely\\n         var = dword [0x100008574] - 0 // [0x100008574:4]=0\\n         rax = rip + 0x1e27       // str._b__e__R\\n                                  // 0x100007e70 // \\\"%b %e %R\\\"\\n         r15 = rip + 0x1e17       // str._e__b__R\\n                                  // 0x100007e67 // \\\"%e %b %R\\\"\\n         goto loc_0x100006067\\n\\n    loc_0x10000603b: // orphan\\n         var = dword [0x100008574] - 0 // [0x100008574:4]=0\\n         rax = rip + 0x1e27       // str._b__e__R\\n                                  // 0x100007e70 // \\\"%b %e %R\\\"\\n         r15 = rip + 0x1e17       // str._e__b__R\\n                                  // 0x100007e67 // \\\"%e %b %R\\\"\\n         goto loc_0x100006067\\n         // CODE XREFS from sym.func.100005f79 @ 0x10000601c(x), 0x100006039(x)\\n         var = dword [0x100008574] - 0 // [0x100008574:4]=0\\n         rax = rip + 0x1e23       // str._b__e___Y\\n                                  // 0x100007e83 // \\\"%b %e  %Y\\\"\\n         r15 = rip + 0x1e12       // str._e__b___Y\\n                                  // 0x100007e79 // \\\"%e %b  %Y\\\"\\n\\n    loc_0x100006052: // orphan\\n         // CODE XREFS from sym.func.100005f79 @ 0x10000601c(x), 0x100006039(x)\\n         var = dword [0x100008574] - 0 // [0x100008574:4]=0\\n         rax = rip + 0x1e23       // str._b__e___Y\\n                                  // 0x100007e83 // \\\"%b %e  %Y\\\"\\n         r15 = rip + 0x1e12       // str._e__b___Y\\n                                  // 0x100007e79 // \\\"%e %b  %Y\\\"\\n         // CODE XREFS from sym.func.100005f79 @ 0x100006010(x), 0x100006050(x)\\n         if  (!var) r15 = rax\\n\\n    loc_0x100006067: // orphan\\n         // CODE XREFS from sym.func.100005f79 @ 0x100006010(x), 0x100006050(x)\\n         if  (!var) r15 = rax\\n         eax = 0\\n         rbx = pwc\\n         qword [var_490h] = r12\\n         qword [var_488h] = r13\\n         qword [var_498h] = r15\\n\\n    loc_0x1000060a3: // orphan\\n         eax = 0\\n         rbx = pwc\\n         qword [var_490h] = r12\\n         qword [var_488h] = r13\\n         qword [var_498h] = r15\\n         // CODE XREF from sym.func.100005f79 @ 0x1000061a9(x)\\n         r15 = rax\\n         edi = r15d               // uint32_t arg1\\n         sym.func.10000699c  ()   // sym.func.10000699c(0x0)\\n         r14 = rax\\n         edx = 6                  // size_t n\\n         rdi = rbx                // wchar_t *pwc\\n         rsi = rax                // const char *s\\n         ecx = 0                  // mbstate_t *ps\\n         sym.imp.mbrtowc  ()\\n                                  // size_t mbrtowc(?, -1, 0x00360000, ?)\\n         var = rax & rax\\n         if  (!var) goto loc_0x10000617e // likely\\n\\n    loc_0x1000060c1: // orphan\\n         // CODE XREF from sym.func.100005f79 @ 0x1000061a9(x)\\n         r15 = rax\\n         edi = r15d               // uint32_t arg1\\n         sym.func.10000699c  ()   // sym.func.10000699c(0x0)\\n         r14 = rax\\n         edx = 6                  // size_t n\\n         rdi = rbx                // wchar_t *pwc\\n         rsi = rax                // const char *s\\n         ecx = 0                  // mbstate_t *ps\\n         sym.imp.mbrtowc  ()\\n                                  // size_t mbrtowc(?, -1, 0x00360000, ?)\\n         var = rax & rax\\n         if  (!var) goto loc_0x10000617e // likely\\n         r13 = rax\\n         qword [var_4a0h] = r15\\n         ebx = 0\\n         r12d = 0\\n         r15 = qword [var_498h]\\n\\n    loc_0x1000060ea: // orphan\\n         r13 = rax\\n         qword [var_4a0h] = r15\\n         ebx = 0\\n         r12d = 0\\n         r15 = qword [var_498h]\\n         // CODE XREF from sym.func.100005f79 @ 0x100006143(x)\\n         var = r13 - 0xfffffffffffffffd\\n         if  (((unsigned) var) > 0) goto 0x1000061ec // unlikely\\n\\n    loc_0x100006100: // orphan\\n         // CODE XREF from sym.func.100005f79 @ 0x100006143(x)\\n         var = r13 - 0xfffffffffffffffd\\n         if  (((unsigned) var) > 0) goto 0x1000061ec // unlikely\\n         edi = dword [pwc]\\n         sym.imp.wcwidth  ()\\n         var = eax - 0xffffffff\\n         if  (!var) goto loc_0x1000061ec // unlikely\\n\\n    loc_0x10000610a: // orphan\\n         edi = dword [pwc]\\n         sym.imp.wcwidth  ()\\n         var = eax - 0xffffffff\\n         if  (!var) goto loc_0x1000061ec // unlikely\\n         cdq\\n         rbx += rax\\n         r12 += r13\\n         rsi = r14 + r12          // const char *s\\n         edx = 6                  // size_t n\\n         rdi = pwc                // wchar_t *pwc\\n         ecx = 0                  // mbstate_t *ps\\n         sym.imp.mbrtowc  ()\\n                                  // size_t mbrtowc(?, -1, 0x00360000, ?)\\n         r13 = rax\\n         var = rax & rax\\n         if  (var) goto loc_0x100006100 // unlikely\\n\\n    loc_0x10000611e: // orphan\\n         cdq\\n         rbx += rax\\n         r12 += r13\\n         rsi = r14 + r12          // const char *s\\n         edx = 6                  // size_t n\\n         rdi = pwc                // wchar_t *pwc\\n         ecx = 0                  // mbstate_t *ps\\n         sym.imp.mbrtowc  ()\\n                                  // size_t mbrtowc(?, -1, 0x00360000, ?)\\n         r13 = rax\\n         var = rax & rax\\n         if  (var) goto loc_0x100006100 // unlikely\\n         var = rbx - 0xffffffffffffffff\\n         if  (!var) goto loc_0x1000061ec // unlikely\\n\\n    loc_0x100006145: // orphan\\n         var = rbx - 0xffffffffffffffff\\n         if  (!var) goto loc_0x1000061ec // unlikely\\n         rax = qword [var_4a0h]\\n         qword [rbp + rax*8 - 0x430] = rbx\\n         var = rbx - qword [0x100008720] // [0x100008720:8]=0\\n         r12 = qword [var_490h]\\n         r13 = qword [var_488h]\\n         if  (((unsigned) var) <= 0) goto 0x10000619b // likely\\n\\n    loc_0x10000614f: // orphan\\n         rax = qword [var_4a0h]\\n         qword [rbp + rax*8 - 0x430] = rbx\\n         var = rbx - qword [0x100008720] // [0x100008720:8]=0\\n         r12 = qword [var_490h]\\n         r13 = qword [var_488h]\\n         if  (((unsigned) var) <= 0) goto 0x10000619b // likely\\n         qword [0x100008720] = rbx // [0x100008720:8]=0\\n         goto loc_0x10000619b\\n\\n    loc_0x100006175: // orphan\\n         qword [0x100008720] = rbx // [0x100008720:8]=0\\n         goto loc_0x10000619b\\n         // CODE XREF from sym.func.100005f79 @ 0x1000060e4(x)\\n         qword [rbp + r15*8 - 0x430] = 0\\n         r13 = qword [var_488h]\\n         rax = r15\\n         r15 = qword [var_498h]\\n\\n    loc_0x10000617e: // orphan\\n         // CODE XREF from sym.func.100005f79 @ 0x1000060e4(x)\\n         qword [rbp + r15*8 - 0x430] = 0\\n         r13 = qword [var_488h]\\n         rax = r15\\n         r15 = qword [var_498h]\\n         // CODE XREFS from sym.func.100005f79 @ 0x100006173(x), 0x10000617c(x)\\n         rax+\\n         var = rax - 0xc\\n         rbx = pwc\\n         if  (var) goto loc_0x1000060c1 // likely\\n\\n    loc_0x10000619b: // orphan\\n         // CODE XREFS from sym.func.100005f79 @ 0x100006173(x), 0x10000617c(x)\\n         rax+\\n         var = rax - 0xc\\n         rbx = pwc\\n         if  (var) goto loc_0x1000060c1 // likely\\n         rax = qword [0x100008720] // [0x100008720:8]=0\\n         xmm0 = rax\\n         pshufd xmm0,mm0,0x44\\n         ecx = 0\\n         rdx = rip + 0x2567       // 0x100008730\\n\\n    loc_0x1000061af: // orphan\\n         rax = qword [0x100008720] // [0x100008720:8]=0\\n         xmm0 = rax\\n         pshufd xmm0,mm0,0x44\\n         ecx = 0\\n         rdx = rip + 0x2567       // 0x100008730\\n         // CODE XREF from sym.func.100005f79 @ 0x1000061e3(x)\\n         xmm1 = xmm0\\n         psubq xmm1,mmword [rbp + rcx - 0x430]\\n         xmmword [rcx + rdx] = xmm1\\n         rcx += 0x10\\n         var = rcx - 0x60\\n         if  (var) goto loc_0x1000061c9 // likely\\n\\n    loc_0x1000061c9: // orphan\\n         // CODE XREF from sym.func.100005f79 @ 0x1000061e3(x)\\n         xmm1 = xmm0\\n         psubq xmm1,mmword [rbp + rcx - 0x430]\\n         xmmword [rcx + rdx] = xmm1\\n         rcx += 0x10\\n         var = rcx - 0x60\\n         if  (var) goto loc_0x1000061c9 // likely\\n         var = rax & rax\\n         if  (var) goto loc_0x100006205 // unlikely\\n\\n    loc_0x1000061e5: // orphan\\n         var = rax & rax\\n         if  (var) goto loc_0x100006205 // unlikely\\n         goto loc_0x100006266\\n\\n    loc_0x1000061ea: // orphan\\n         goto loc_0x100006266\\n         // CODE XREFS from sym.func.100005f79 @ 0x100006104(x), 0x100006118(x), 0x100006149(x)\\n         qword [0x100008720] = 0xffffffffffffffff // [0x100008720:8]=0\\n         r12 = qword [var_490h]\\n         r13 = qword [var_488h]\\n\\n    loc_0x1000061ec: // orphan\\n         // CODE XREFS from sym.func.100005f79 @ 0x100006104(x), 0x100006118(x), 0x100006149(x)\\n         qword [0x100008720] = 0xffffffffffffffff // [0x100008720:8]=0\\n         r12 = qword [var_490h]\\n         r13 = qword [var_488h]\\n         // CODE XREFS from sym.func.100005f79 @ 0x10000609d(x), 0x1000061e8(x)\\n         r14 = var_430h\\n         ebx = r13d\\n         ebx -= r15d\\n         edi = dword [r12 + 0x10] // uint32_t arg1\\n         sym.func.10000699c  ()   // sym.func.10000699c(0x37)\\n         rcx = dword [r12 + 0x10]\\n         rdx = rip + 0x2508       // 0x100008730\\n         r10d = dword [rdx + rcx*8]\\n         r13 += 2\\n         rsp -= 8\\n         r11 = rip + 0x1818       // section.4.__TEXT.__cstring\\n                                  // 0x100007a53\\n         rdx = rip + 0x1c4e       // str._.s_s_s_s\\n                                  // 0x100007e90 // \\\"%.*s%s%*s%s\\\" // const char *format\\n         esi = 0x400              // size_t size\\n         rdi = r14                // char *s\\n         ecx = ebx\\n         r8 = r15\\n         r9 = rax\\n         eax = 0\\n         push  (r13)\\n         push  (r11)\\n         push  (r10)\\n         sym.imp.snprintf  ()\\n                                  // int snprintf(\\\"\\\", 0x00000000, \\\"%.*s%s%*s%s\\\", ?)\\n         rsp += 0x20\\n         r15 = r14\\n\\n    loc_0x100006205: // orphan\\n         // CODE XREFS from sym.func.100005f79 @ 0x10000609d(x), 0x1000061e8(x)\\n         r14 = var_430h\\n         ebx = r13d\\n         ebx -= r15d\\n         edi = dword [r12 + 0x10] // uint32_t arg1\\n         sym.func.10000699c  ()   // sym.func.10000699c(0x37)\\n         rcx = dword [r12 + 0x10]\\n         rdx = rip + 0x2508       // 0x100008730\\n         r10d = dword [rdx + rcx*8]\\n         r13 += 2\\n         rsp -= 8\\n         r11 = rip + 0x1818       // section.4.__TEXT.__cstring\\n                                  // 0x100007a53\\n         rdx = rip + 0x1c4e       // str._.s_s_s_s\\n                                  // 0x100007e90 // \\\"%.*s%s%*s%s\\\" // const char *format\\n         esi = 0x400              // size_t size\\n         rdi = r14                // char *s\\n         ecx = ebx\\n         r8 = r15\\n         r9 = rax\\n         eax = 0\\n         push  (r13)\\n         push  (r11)\\n         push  (r10)\\n         sym.imp.snprintf  ()\\n                                  // int snprintf(\\\"\\\", 0x00000000, \\\"%.*s%s%*s%s\\\", ?)\\n         rsp += 0x20\\n         r15 = r14\\n\\n}\\n\"}\n"