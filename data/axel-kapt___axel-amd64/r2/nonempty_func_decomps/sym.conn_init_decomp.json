"{\"annotations\":[{\"start\":56,\"end\":56,\"offset\":4211143,\"type\":\"offset\"},{\"start\":109,\"end\":109,\"offset\":4211143,\"type\":\"offset\"},{\"start\":164,\"end\":164,\"offset\":4211143,\"type\":\"offset\"},{\"start\":225,\"end\":225,\"offset\":4211143,\"type\":\"offset\"},{\"start\":285,\"end\":285,\"offset\":4211143,\"type\":\"offset\"},{\"start\":305,\"end\":305,\"offset\":4211145,\"type\":\"offset\"},{\"start\":325,\"end\":325,\"offset\":4211147,\"type\":\"offset\"},{\"start\":345,\"end\":345,\"offset\":4211149,\"type\":\"offset\"},{\"start\":365,\"end\":365,\"offset\":4211150,\"type\":\"offset\"},{\"start\":382,\"end\":382,\"offset\":4211153,\"type\":\"offset\"},{\"start\":402,\"end\":402,\"offset\":4211154,\"type\":\"offset\"},{\"start\":432,\"end\":432,\"offset\":4211157,\"type\":\"offset\"},{\"start\":452,\"end\":452,\"offset\":4211161,\"type\":\"offset\"},{\"start\":486,\"end\":486,\"offset\":4211164,\"type\":\"offset\"},{\"start\":520,\"end\":520,\"offset\":4211171,\"type\":\"offset\"},{\"start\":600,\"end\":600,\"offset\":4211245,\"type\":\"offset\"},{\"start\":681,\"end\":681,\"offset\":4211245,\"type\":\"offset\"},{\"start\":711,\"end\":711,\"offset\":4211248,\"type\":\"offset\"},{\"start\":735,\"end\":735,\"offset\":4211251,\"type\":\"offset\"},{\"start\":770,\"end\":770,\"offset\":4211258,\"type\":\"offset\"},{\"start\":786,\"end\":786,\"offset\":4211261,\"type\":\"offset\"},{\"start\":812,\"end\":812,\"offset\":4211268,\"type\":\"offset\"},{\"start\":837,\"end\":837,\"offset\":4211275,\"type\":\"offset\"},{\"start\":854,\"end\":854,\"offset\":4211278,\"type\":\"offset\"},{\"start\":876,\"end\":876,\"offset\":4211281,\"type\":\"offset\"},{\"start\":909,\"end\":909,\"offset\":4211284,\"type\":\"offset\"},{\"start\":924,\"end\":924,\"offset\":4211287,\"type\":\"offset\"},{\"start\":946,\"end\":946,\"offset\":4211289,\"type\":\"offset\"},{\"start\":971,\"end\":971,\"offset\":4211293,\"type\":\"offset\"},{\"start\":1003,\"end\":1003,\"offset\":4211296,\"type\":\"offset\"},{\"start\":1066,\"end\":1066,\"offset\":4211379,\"type\":\"offset\"},{\"start\":1120,\"end\":1120,\"offset\":4211379,\"type\":\"offset\"},{\"start\":1150,\"end\":1150,\"offset\":4211380,\"type\":\"offset\"},{\"start\":1193,\"end\":1193,\"offset\":4211387,\"type\":\"offset\"},{\"start\":1212,\"end\":1212,\"offset\":4211389,\"type\":\"offset\"},{\"start\":1247,\"end\":1247,\"offset\":4211396,\"type\":\"offset\"},{\"start\":1265,\"end\":1265,\"offset\":4211399,\"type\":\"offset\"},{\"start\":1283,\"end\":1283,\"offset\":4211402,\"type\":\"offset\"},{\"start\":1321,\"end\":1321,\"offset\":4211405,\"type\":\"offset\"},{\"start\":1421,\"end\":1421,\"offset\":4211410,\"type\":\"offset\"},{\"start\":1445,\"end\":1445,\"offset\":4211412,\"type\":\"offset\"},{\"start\":1472,\"end\":1472,\"offset\":4211419,\"type\":\"offset\"},{\"start\":1493,\"end\":1493,\"offset\":4211421,\"type\":\"offset\"},{\"start\":1514,\"end\":1514,\"offset\":4211423,\"type\":\"offset\"},{\"start\":1593,\"end\":1593,\"offset\":4211450,\"type\":\"offset\"},{\"start\":1647,\"end\":1647,\"offset\":4211450,\"type\":\"offset\"},{\"start\":1682,\"end\":1682,\"offset\":4211456,\"type\":\"offset\"},{\"start\":1717,\"end\":1717,\"offset\":4211463,\"type\":\"offset\"},{\"start\":1787,\"end\":1787,\"offset\":4211469,\"type\":\"offset\"},{\"start\":1841,\"end\":1841,\"offset\":4211469,\"type\":\"offset\"},{\"start\":2031,\"end\":2031,\"offset\":4211189,\"type\":\"offset\"},{\"start\":2064,\"end\":2064,\"offset\":4211193,\"type\":\"offset\"},{\"start\":2087,\"end\":2087,\"offset\":4211200,\"type\":\"offset\"},{\"start\":2104,\"end\":2104,\"offset\":4211203,\"type\":\"offset\"},{\"start\":2169,\"end\":2169,\"offset\":4211210,\"type\":\"offset\"},{\"start\":2223,\"end\":2223,\"offset\":4211210,\"type\":\"offset\"},{\"start\":2255,\"end\":2255,\"offset\":4211214,\"type\":\"offset\"},{\"start\":2376,\"end\":2376,\"offset\":4211216,\"type\":\"offset\"},{\"start\":2416,\"end\":2416,\"offset\":4211219,\"type\":\"offset\"},{\"start\":2443,\"end\":2443,\"offset\":4211219,\"type\":\"offset\"},{\"start\":2475,\"end\":2475,\"offset\":4211224,\"type\":\"offset\"},{\"start\":2499,\"end\":2499,\"offset\":4211227,\"type\":\"offset\"},{\"start\":2527,\"end\":2527,\"offset\":4211231,\"type\":\"offset\"},{\"start\":2556,\"end\":2556,\"offset\":4211235,\"type\":\"offset\"},{\"start\":2621,\"end\":2621,\"offset\":4211237,\"type\":\"offset\"},{\"start\":2685,\"end\":2685,\"offset\":4211240,\"type\":\"offset\"},{\"start\":2739,\"end\":2739,\"offset\":4211240,\"type\":\"offset\"},{\"start\":2752,\"end\":2752,\"offset\":4211243,\"type\":\"offset\"},{\"start\":2833,\"end\":3140,\"offset\":4211243,\"type\":\"offset\"},{\"start\":3478,\"end\":3535,\"offset\":4211243,\"type\":\"offset\"},{\"start\":3623,\"end\":3847,\"offset\":4211243,\"type\":\"offset\"},{\"start\":4102,\"end\":4305,\"offset\":4211243,\"type\":\"offset\"}],\"code\":\"int sym.conn_init (int esi, int edx) {\\n    loc_0x4041c7:\\n        // CALL XREF from sym.axel_new @ 0x402952(x)\\n        // CALL XREF from sym.conn_setup @ 0x40434d(x)\\n        // CALL XREF from sym.search_speedtest @ 0x405843(x)\\n        // CALL XREF from sym.search_makelist @ 0x405903(x)\\n        push  (r14)\\n        push  (r13)\\n        push  (r12)\\n        push  (rbp)\\n        r12d = 0\\n        push  (rbx)\\n        rbx = rdi     // arg1\\n        rsp -= 0x10\\n        rbp = qword [rdi] // arg1\\n        var = byte [arg_400h] - 0\\n        if  (!var) goto loc_0x40422d // unlikely\\n            \\n    loc_0x40422d:\\n        // CODE XREFS from sym.conn_init @ 0x4041e3(x), 0x4041f3(x), 0x404223(x)\\n        esi = dword [rbx + 8]\\n        var = r12 & r12\\n        rcx = qword [rbx + 0x3090]\\n        al = ne\\n        r8 = rbx + 0x1014\\n        r9 = rbx + 0xc14\\n        edx = al\\n        var = esi - 1\\n        dword [rbx + 0x10] = edx\\n        dl = e\\n        var = al - dl\\n        rax = rbx + 0x14\\n        edx = dword [rbx + 0xc]\\n        jae 0x4042b3  // likely\\n            \\n    loc_0x4042b3:\\n        // CODE XREF from sym.conn_init @ 0x404260(x)\\n        push  (rdi)   // arg1\\n        rdi = rbx + 0x1838 // int64_t arg1\\n        push  (r8)\\n        qword [rbx + 0x3058] = rcx\\n        r8d = edx\\n        rcx = rax\\n        rdx = r12     // int64_t arg3\\n        sym.http_connect  () // sym.http_connect(0x1838, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, -1, -1)\\n        var = eax & eax\\n        rdx = rbx + 0x2838\\n        r8 = pop  ()\\n        r9 = pop  ()\\n        if  (var) goto loc_0x4042fa // unlikely\\n            \\n    loc_0x4042fa:\\n        // CODE XREF from sym.conn_init @ 0x4042df(x)\\n        eax = dword [rbx + 0x3054]\\n        qword [rbx + 0x3088] = rdx\\n        dword [rbx + 0x3078] = eax\\n         // do {\\n    loc_0x40430d:\\n        // CODE XREF from sym.conn_init @ 0x4042ab(x)\\n        eax = 1\\n         // } while (?);\\n         // } while (?);\\n         // } while (?);\\n         // } while (?);\\n        }\\n        return eax;\\n        goto loc_0x4041e5\\n    loc_0x4041f5:\\n        r13 = rdi + 0x14 // arg1\\n        rsi = arg_800h\\n        r14d = 0\\n        rbp += 0x801  // 2049\\n         // do {\\n    loc_0x40420a:\\n        // CODE XREF from sym.conn_init @ 0x40422b(x)\\n        var = byte [var_1h] - 0\\n        if  (var) goto loc_0x404228 // unlikely\\n         // } while (?);\\n        }\\n        return eax;\\n    loc_0x404210:\\n        rdi = r13     // const char *s1\\n        sym.imp.strstr  ()\\n        // char *strstr(-1, -1)\\n        var = rax & rax\\n        if  (!zf) r12 = r14\\n        var = byte [rbp] - 0\\n        if  (!var) goto loc_0x40422d // likely\\n    loc_0x404225:\\n        rsi = rbp     // rsp\\n         // do {\\n    loc_0x404228:\\n        // CODE XREF from sym.conn_init @ 0x40420e(x)\\n        rbp+\\n        goto loc_0x40420a\\n         // } while (?);\\n        }\\n        return eax;             rsi = rbx + 0x414        // int64_t arg2\\n             qword [rbx + 0x3088] = rdx\\n             rdi = rbp                // int64_t arg1 // rsp\\n             sym.ftp_cwd  ()          // sym.ftp_cwd(0x178000, 0x414)\\n             var = eax & eax\\n             if  (var) goto loc_0x40430d // unlikely\\n\\n    loc_0x00404293: // orphan\\n             rsi = rbx + 0x414        // int64_t arg2\\n             qword [rbx + 0x3088] = rdx\\n             rdi = rbp                // int64_t arg1 // rsp\\n             sym.ftp_cwd  ()          // sym.ftp_cwd(0x178000, 0x414)\\n             var = eax & eax\\n             if  (var) goto loc_0x40430d // unlikely\\n         dword [var_ch] = eax\\n         goto loc_0x4042ec\\n\\n    loc_0x004042ad: // orphan\\n         dword [var_ch] = eax\\n         goto loc_0x4042ec\\n         // CODE XREF from sym.conn_init @ 0x4042b1(x)\\n         rdi = rbx                // int64_t arg1\\n         sym.conn_disconnect  ()  // sym.conn_disconnect(0x0)\\n         eax = dword [var_ch]\\n         goto loc_0x404312\\n\\n    loc_0x004042ec: // orphan\\n         // CODE XREF from sym.conn_init @ 0x4042b1(x)\\n         rdi = rbx                // int64_t arg1\\n         sym.conn_disconnect  ()  // sym.conn_disconnect(0x0)\\n         eax = dword [var_ch]\\n         goto loc_0x404312\\n         // CODE XREF from sym.conn_init @ 0x4042f8(x)\\n         rsp += 0x10\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         re\\n\\n    loc_0x00404312: // orphan\\n         // CODE XREF from sym.conn_init @ 0x4042f8(x)\\n         rsp += 0x10\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         re\\n\\n}\\n\"}\n"