"{\"annotations\":[{\"start\":55,\"end\":55,\"offset\":4204270,\"type\":\"offset\"},{\"start\":114,\"end\":114,\"offset\":4204270,\"type\":\"offset\"},{\"start\":134,\"end\":134,\"offset\":4204272,\"type\":\"offset\"},{\"start\":154,\"end\":154,\"offset\":4204274,\"type\":\"offset\"},{\"start\":174,\"end\":174,\"offset\":4204276,\"type\":\"offset\"},{\"start\":194,\"end\":194,\"offset\":4204278,\"type\":\"offset\"},{\"start\":224,\"end\":224,\"offset\":4204281,\"type\":\"offset\"},{\"start\":244,\"end\":244,\"offset\":4204282,\"type\":\"offset\"},{\"start\":264,\"end\":264,\"offset\":4204283,\"type\":\"offset\"},{\"start\":301,\"end\":301,\"offset\":4204288,\"type\":\"offset\"},{\"start\":331,\"end\":331,\"offset\":4204291,\"type\":\"offset\"},{\"start\":361,\"end\":361,\"offset\":4204294,\"type\":\"offset\"},{\"start\":381,\"end\":381,\"offset\":4204298,\"type\":\"offset\"},{\"start\":408,\"end\":408,\"offset\":4204298,\"type\":\"offset\"},{\"start\":437,\"end\":437,\"offset\":4204303,\"type\":\"offset\"},{\"start\":455,\"end\":455,\"offset\":4204306,\"type\":\"offset\"},{\"start\":496,\"end\":496,\"offset\":4204311,\"type\":\"offset\"},{\"start\":512,\"end\":512,\"offset\":4204313,\"type\":\"offset\"},{\"start\":530,\"end\":530,\"offset\":4204316,\"type\":\"offset\"},{\"start\":548,\"end\":548,\"offset\":4204319,\"type\":\"offset\"},{\"start\":593,\"end\":593,\"offset\":4204321,\"type\":\"offset\"},{\"start\":615,\"end\":615,\"offset\":4204325,\"type\":\"offset\"},{\"start\":659,\"end\":659,\"offset\":4204329,\"type\":\"offset\"},{\"start\":728,\"end\":728,\"offset\":4204331,\"type\":\"offset\"},{\"start\":762,\"end\":762,\"offset\":4204338,\"type\":\"offset\"},{\"start\":789,\"end\":789,\"offset\":4204345,\"type\":\"offset\"},{\"start\":826,\"end\":826,\"offset\":4204348,\"type\":\"offset\"},{\"start\":853,\"end\":853,\"offset\":4204348,\"type\":\"offset\"},{\"start\":890,\"end\":890,\"offset\":4204353,\"type\":\"offset\"},{\"start\":908,\"end\":908,\"offset\":4204356,\"type\":\"offset\"},{\"start\":926,\"end\":926,\"offset\":4204359,\"type\":\"offset\"},{\"start\":952,\"end\":952,\"offset\":4204362,\"type\":\"offset\"},{\"start\":970,\"end\":970,\"offset\":4204365,\"type\":\"offset\"},{\"start\":986,\"end\":986,\"offset\":4204367,\"type\":\"offset\"},{\"start\":1008,\"end\":1008,\"offset\":4204371,\"type\":\"offset\"},{\"start\":1051,\"end\":1051,\"offset\":4204373,\"type\":\"offset\"},{\"start\":1085,\"end\":1085,\"offset\":4204379,\"type\":\"offset\"},{\"start\":1109,\"end\":1109,\"offset\":4204381,\"type\":\"offset\"},{\"start\":1191,\"end\":1191,\"offset\":4204521,\"type\":\"offset\"},{\"start\":1244,\"end\":1244,\"offset\":4204521,\"type\":\"offset\"},{\"start\":1299,\"end\":1299,\"offset\":4204529,\"type\":\"offset\"},{\"start\":1378,\"end\":1378,\"offset\":4204568,\"type\":\"offset\"},{\"start\":1431,\"end\":1431,\"offset\":4204568,\"type\":\"offset\"},{\"start\":1457,\"end\":1457,\"offset\":4204571,\"type\":\"offset\"},{\"start\":1487,\"end\":1487,\"offset\":4204576,\"type\":\"offset\"},{\"start\":1566,\"end\":1566,\"offset\":4204612,\"type\":\"offset\"},{\"start\":1619,\"end\":1619,\"offset\":4204612,\"type\":\"offset\"},{\"start\":1646,\"end\":1646,\"offset\":4204612,\"type\":\"offset\"},{\"start\":1675,\"end\":1675,\"offset\":4204617,\"type\":\"offset\"},{\"start\":1693,\"end\":1693,\"offset\":4204620,\"type\":\"offset\"},{\"start\":1728,\"end\":1728,\"offset\":4204627,\"type\":\"offset\"},{\"start\":1750,\"end\":1750,\"offset\":4204631,\"type\":\"offset\"},{\"start\":1767,\"end\":1767,\"offset\":4204634,\"type\":\"offset\"},{\"start\":1831,\"end\":1831,\"offset\":4204638,\"type\":\"offset\"},{\"start\":1884,\"end\":1884,\"offset\":4204638,\"type\":\"offset\"},{\"start\":1910,\"end\":1910,\"offset\":4204641,\"type\":\"offset\"},{\"start\":2135,\"end\":2135,\"offset\":4204416,\"type\":\"offset\"},{\"start\":2173,\"end\":2173,\"offset\":4204423,\"type\":\"offset\"},{\"start\":2255,\"end\":2255,\"offset\":4204455,\"type\":\"offset\"},{\"start\":2308,\"end\":2308,\"offset\":4204455,\"type\":\"offset\"},{\"start\":2342,\"end\":2342,\"offset\":4204461,\"type\":\"offset\"},{\"start\":2411,\"end\":2411,\"offset\":4204467,\"type\":\"offset\"},{\"start\":2464,\"end\":2464,\"offset\":4204467,\"type\":\"offset\"},{\"start\":2528,\"end\":2528,\"offset\":4204475,\"type\":\"offset\"},{\"start\":2569,\"end\":2569,\"offset\":4204483,\"type\":\"offset\"},{\"start\":2592,\"end\":2592,\"offset\":4204487,\"type\":\"offset\"},{\"start\":2633,\"end\":2633,\"offset\":4204495,\"type\":\"offset\"},{\"start\":2660,\"end\":2660,\"offset\":4204499,\"type\":\"offset\"},{\"start\":2701,\"end\":2701,\"offset\":4204507,\"type\":\"offset\"},{\"start\":2728,\"end\":2728,\"offset\":4204511,\"type\":\"offset\"},{\"start\":2754,\"end\":2754,\"offset\":4204515,\"type\":\"offset\"},{\"start\":2869,\"end\":3249,\"offset\":4204515,\"type\":\"offset\"},{\"start\":3660,\"end\":3873,\"offset\":4204515,\"type\":\"offset\"},{\"start\":4117,\"end\":4234,\"offset\":4204515,\"type\":\"offset\"},{\"start\":4382,\"end\":4520,\"offset\":4204515,\"type\":\"offset\"},{\"start\":4689,\"end\":5050,\"offset\":4204515,\"type\":\"offset\"},{\"start\":5442,\"end\":5635,\"offset\":4204515,\"type\":\"offset\"},{\"start\":5859,\"end\":6585,\"offset\":4204515,\"type\":\"offset\"},{\"start\":7342,\"end\":7605,\"offset\":4204515,\"type\":\"offset\"},{\"start\":7899,\"end\":8228,\"offset\":4204515,\"type\":\"offset\"},{\"start\":8588,\"end\":8677,\"offset\":4204515,\"type\":\"offset\"},{\"start\":8797,\"end\":8821,\"offset\":4204515,\"type\":\"offset\"},{\"start\":8876,\"end\":9134,\"offset\":4204515,\"type\":\"offset\"},{\"start\":9423,\"end\":9540,\"offset\":4204515,\"type\":\"offset\"},{\"start\":9688,\"end\":10018,\"offset\":4204515,\"type\":\"offset\"},{\"start\":10379,\"end\":10613,\"offset\":4204515,\"type\":\"offset\"},{\"start\":10878,\"end\":11461,\"offset\":4204515,\"type\":\"offset\"},{\"start\":12075,\"end\":12166,\"offset\":4204515,\"type\":\"offset\"},{\"start\":12288,\"end\":12712,\"offset\":4204515,\"type\":\"offset\"},{\"start\":13167,\"end\":13511,\"offset\":4204515,\"type\":\"offset\"},{\"start\":13886,\"end\":14161,\"offset\":4204515,\"type\":\"offset\"},{\"start\":14467,\"end\":14811,\"offset\":4204515,\"type\":\"offset\"},{\"start\":15186,\"end\":15444,\"offset\":4204515,\"type\":\"offset\"}],\"code\":\"int sym.axel_new (int esi, int edx) {\\n    loc_0x4026ee:\\n        // CALL XREFS from main @ 0x401c8a(x), 0x401d22(x)\\n        push  (r15)\\n        push  (r14)\\n        push  (r13)\\n        push  (r12)\\n        r12 = rdi     // arg1\\n        push  (rbp)\\n        push  (rbx)\\n        edi = 0x3c98  // size_t size\\n        rbp = rdx     // arg3\\n        r13d = esi    // arg2\\n        rsp -= 0x18\\n        sym.imp.malloc  ()\\n        //  void *malloc(-1)\\n        rbx = rax\\n        ecx = 0xf26   // '&\\\\x0f' // 3878\\n        eax = 0\\n        rdi = rbx\\n        rsi = r12\\n        rep stosd dword [rdi],ax // elf_phdr\\n        rdi = rbx + 8\\n        cx = 0xe12    // '\\\\x12\\\\x0e' // 3602\\n        rep movsd dword [rdi],word ptr [rsi] // elf_phdr // elf_phdr\\n        r12 = dword [rbx + 0xc18]\\n        r12 = r12 * 0x30a8\\n        rdi = r12     // size_t size\\n        sym.imp.malloc  ()\\n        //  void *malloc(0x00000000)\\n        rdx = rax\\n        rcx = r12\\n        qword [rbx] = rax\\n        rdi = rdx\\n        eax = 0\\n        r12 = rbx + 8\\n        rep stosb byte [rdi],l // elf_phdr\\n        eax = dword [rbx + 0xc20]\\n        var = eax & eax\\n        if  (var <= 0) goto loc_0x4027e9 // likely\\n            \\n    loc_0x4027e9:\\n        // CODE XREF from sym.axel_new @ 0x40275d(x)\\n        var = qword [obj.buffer] - 0 // [0x608670:8]=0\\n        if  (var) goto loc_0x402818 // unlikely\\n            \\n    loc_0x402818:\\n        // CODE XREF from sym.axel_new @ 0x4027f1(x)\\n        var = r13d & r13d\\n        edi = 0x408   // 1032\\n        if  (var) goto loc_0x402844 // unlikely\\n            \\n    loc_0x402844:\\n        // CODE XREF from sym.axel_new @ 0x402820(x)\\n        sym.imp.malloc  ()\\n        //  void *malloc(-1)\\n        r15 = rax\\n        qword [rbx + 0x3c90] = rax\\n        eax = r13 - 1\\n        r14d = 0\\n        dword [var_ch] = eax\\n         // do {\\n    loc_0x40285e:\\n        // CODE XREF from sym.axel_new @ 0x4028a1(x)\\n        var = r14d - r13d\\n        if  (var >= 0) goto loc_0x4028a3 // likely\\n         // } while (?);\\n         // } while (?);\\n         // } while (?);\\n         // } while (?);\\n        }\\n        return eax;\\n        goto loc_0x402763\\n    loc_0x402780:\\n        var = dword [rbx + 0xc24] - 1\\n        if  (var <= 0) goto loc_0x4027a7 // likely\\n            \\n    loc_0x4027a7:\\n        // CODE XREF from sym.axel_new @ 0x402787(x)\\n        eax = dword [rbx + 0xc20]\\n        dword [rbx + 0xc1c] = eax\\n         // do {\\n    loc_0x4027b3:\\n        // CODE XREF from sym.axel_new @ 0x40277e(x)\\n        movss xmm0,word [0x0040646c] // [0x40646c:4]=0x49742400\\n        cvtsi2ss xmm1,word [rbx + 0xc20]\\n        divss xmm0,mm1\\n        cvtsi2ss xmm1,word [rbx + 0xc1c]\\n        xmm0 = xmm0 * xmm1\\n        cvtsi2ss xmm1,word [rbx + 0xc18]\\n        xmm0 = xmm0 * xmm1\\n        cvttss2si eax,mm0\\n        dword [rbx + 0x3c7c] = eax\\n         // } while (?);\\n         // } while (?);\\n        }\\n        return eax;             rdi = r15 + 8            // char *dest\\n             edx = 0x400              // 1024 // size_t  n\\n             rsi = rbp                // const char *src // rsp\\n             sym.imp.strncpy  ()\\n                                      // char *strncpy(\\\"\\\", \\\"\\\", 0x00000000)\\n             var = r14d - dword [var_ch]\\n             if  (var >= 0) goto loc_0x40288d // likely\\n\\n    loc_0x00402863: // orphan\\n             rdi = r15 + 8            // char *dest\\n             edx = 0x400              // 1024 // size_t  n\\n             rsi = rbp                // const char *src // rsp\\n             sym.imp.strncpy  ()\\n                                      // char *strncpy(\\\"\\\", \\\"\\\", 0x00000000)\\n             var = r14d - dword [var_ch]\\n             if  (var >= 0) goto loc_0x40288d // likely\\n         edi = 0x408              // 1032 // size_t size\\n         sym.imp.malloc  ()\\n                                  //  void *malloc(-1)\\n         qword [r15] = rax\\n         r15 = rax\\n         goto loc_0x402897\\n\\n    loc_0x0040287b: // orphan\\n         edi = 0x408              // 1032 // size_t size\\n         sym.imp.malloc  ()\\n                                  //  void *malloc(-1)\\n         qword [r15] = rax\\n         r15 = rax\\n         goto loc_0x402897\\n         // CODE XREF from sym.axel_new @ 0x402879(x)\\n         rax = qword [rbx + 0x3c90]\\n         qword [r15] = rax\\n\\n    loc_0x0040288d: // orphan\\n         // CODE XREF from sym.axel_new @ 0x402879(x)\\n         rax = qword [rbx + 0x3c90]\\n         qword [r15] = rax\\n         // CODE XREF from sym.axel_new @ 0x40288b(x)\\n         r14d+\\n         rbp += 0x420             // 1056\\n         goto loc_0x40285e\\n\\n    loc_0x00402897: // orphan\\n         // CODE XREF from sym.axel_new @ 0x40288b(x)\\n         r14d+\\n         rbp += 0x420             // 1056\\n         goto loc_0x40285e\\n         // CODE XREFS from sym.axel_new @ 0x402842(x), 0x402861(x)\\n         rax = qword [rbx + 0x3c90]\\n         rdi = qword [rbx]        // int64_t arg1\\n         rsi = rax + 8            // char *s1\\n         qword [rdi] = r12\\n         sym.conn_set  ()         // sym.conn_set(0x0, 0x8)\\n         var = eax & eax\\n         if  (var) goto loc_0x4028d6 // unlikely\\n\\n    loc_0x004028a3: // orphan\\n         // CODE XREFS from sym.axel_new @ 0x402842(x), 0x402861(x)\\n         rax = qword [rbx + 0x3c90]\\n         rdi = qword [rbx]        // int64_t arg1\\n         rsi = rax + 8            // char *s1\\n         qword [rdi] = r12\\n         sym.conn_set  ()         // sym.conn_set(0x0, 0x8)\\n         var = eax & eax\\n         if  (var) goto loc_0x4028d6 // unlikely\\n         esi = str.Could_not_parse_URL._n // 0x406289 // \\\"Could not parse URL.\\\\n\\\"\\n         edx = 5\\n         edi = 0\\n         sym.imp.dcgettext  ()\\n         rsi = rax\\n         goto loc_0x402965\\n\\n    loc_0x004028bd: // orphan\\n         esi = str.Could_not_parse_URL._n // 0x406289 // \\\"Could not parse URL.\\\\n\\\"\\n         edx = 5\\n         edi = 0\\n         sym.imp.dcgettext  ()\\n         rsi = rax\\n         goto loc_0x402965\\n         // CODE XREF from sym.axel_new @ 0x4028bb(x)\\n         rax = qword [rbx + 0xc30]\\n         rsi = qword [rbx]\\n         rbp = rbx + 0x3850\\n         rdi = rbp                // char *dest\\n         rdx = rax + 8\\n         rax = qword [rax]\\n         rsi += 0x814             // 2068 // const char *src\\n         qword [rsi + 0x287c] = rdx\\n         edx = 0x400              // 1024 // size_t  n\\n         qword [rbx + 0xc30] = rax\\n         sym.imp.strncpy  ()\\n                                  // char *strncpy(\\\"\\\", \\\"\\\", 0x00000000)\\n         rdi = rbp                // int64_t arg1\\n         sym.http_decode  ()      // sym.http_decode(0x3850)\\n         var = byte [rbx + 0x3850] - 0\\n         if  (var) goto loc_0x402931 // likely\\n\\n    loc_0x004028d6: // orphan\\n         // CODE XREF from sym.axel_new @ 0x4028bb(x)\\n         rax = qword [rbx + 0xc30]\\n         rsi = qword [rbx]\\n         rbp = rbx + 0x3850\\n         rdi = rbp                // char *dest\\n         rdx = rax + 8\\n         rax = qword [rax]\\n         rsi += 0x814             // 2068 // const char *src\\n         qword [rsi + 0x287c] = rdx\\n         edx = 0x400              // 1024 // size_t  n\\n         qword [rbx + 0xc30] = rax\\n         sym.imp.strncpy  ()\\n                                  // char *strncpy(\\\"\\\", \\\"\\\", 0x00000000)\\n         rdi = rbp                // int64_t arg1\\n         sym.http_decode  ()      // sym.http_decode(0x3850)\\n         var = byte [rbx + 0x3850] - 0\\n         if  (var) goto loc_0x402931 // likely\\n         edx = 0x400              // 1024 // size_t  n\\n         rsi = r12                // const char *src\\n         rdi = rbp                // char *dest // rsp\\n         sym.imp.strncpy  ()\\n                                  // char *strncpy(\\\"\\\", -1, 0x00000000)\\n\\n    loc_0x00402921: // orphan\\n         edx = 0x400              // 1024 // size_t  n\\n         rsi = r12                // const char *src\\n         rdi = rbp                // char *dest // rsp\\n         sym.imp.strncpy  ()\\n                                  // char *strncpy(\\\"\\\", -1, 0x00000000)\\n         // CODE XREF from sym.axel_new @ 0x40291f(x)\\n         esi = 0x3f               // '?' // int c\\n         rdi = rbp                // const char *s // rsp\\n         sym.imp.strchr  ()\\n                                  // char *strchr(\\\"\\\", 0x00000000)\\n         var = rax & rax\\n         if  (!var) goto loc_0x40294f // likely\\n\\n    loc_0x00402931: // orphan\\n         // CODE XREF from sym.axel_new @ 0x40291f(x)\\n         esi = 0x3f               // '?' // int c\\n         rdi = rbp                // const char *s // rsp\\n         sym.imp.strchr  ()\\n                                  // char *strchr(\\\"\\\", 0x00000000)\\n         var = rax & rax\\n         if  (!var) goto loc_0x40294f // likely\\n         var = dword [rbx + 0xc08] - 0\\n         if  (!var) goto loc_0x40294f // unlikely\\n\\n    loc_0x00402943: // orphan\\n         var = dword [rbx + 0xc08] - 0\\n         if  (!var) goto loc_0x40294f // unlikely\\n         byte [rax] = 0\\n\\n    loc_0x0040294c: // orphan\\n         byte [rax] = 0\\n         // CODE XREFS from sym.axel_new @ 0x402941(x), 0x40294a(x)\\n         rdi = qword [rbx]        // int64_t arg1\\n         sym.conn_init  ()        // sym.conn_init(0x0, 0x0, 0x0)\\n         var = eax & eax\\n         if  (var) goto loc_0x40297e // unlikely\\n\\n    loc_0x0040294f: // orphan\\n         // CODE XREFS from sym.axel_new @ 0x402941(x), 0x40294a(x)\\n         rdi = qword [rbx]        // int64_t arg1\\n         sym.conn_init  ()        // sym.conn_init(0x0, 0x0, 0x0)\\n         var = eax & eax\\n         if  (var) goto loc_0x40297e // unlikely\\n         // CODE XREF from sym.axel_new @ 0x402988(x)\\n         rax = qword [rbx]\\n         rsi = qword [rax + 0x3088]\\n\\n    loc_0x0040295b: // orphan\\n         // CODE XREF from sym.axel_new @ 0x402988(x)\\n         rax = qword [rbx]\\n         rsi = qword [rax + 0x3088]\\n         // CODE XREF from sym.axel_new @ 0x4028d1(x)\\n         rdi = rbx                // int64_t arg1\\n         eax = 0\\n         sym.axel_message  ()     // sym.axel_message(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, -1, -1, 0x0, 0x0)\\n         dword [rbx + 0x3c84] = 0xffffffff // [0xffffffff:4]=-1 // -1\\n         goto loc_0x402a29\\n\\n    loc_0x00402965: // orphan\\n         // CODE XREF from sym.axel_new @ 0x4028d1(x)\\n         rdi = rbx                // int64_t arg1\\n         eax = 0\\n         sym.axel_message  ()     // sym.axel_message(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, -1, -1, 0x0, 0x0)\\n         dword [rbx + 0x3c84] = 0xffffffff // [0xffffffff:4]=-1 // -1\\n         goto loc_0x402a29\\n         // CODE XREF from sym.axel_new @ 0x402959(x)\\n         rdi = qword [rbx]        // uint32_t arg1\\n         sym.conn_info  ()        // sym.conn_info(0x0)\\n         var = eax & eax\\n         if  (!var) goto loc_0x40295b // likely\\n\\n    loc_0x0040297e: // orphan\\n         // CODE XREF from sym.axel_new @ 0x402959(x)\\n         rdi = qword [rbx]        // uint32_t arg1\\n         sym.conn_info  ()        // sym.conn_info(0x0)\\n         var = eax & eax\\n         if  (!var) goto loc_0x40295b // likely\\n         rdi = qword [rbx]        // int64_t arg1\\n         sym.conn_url  ()         // sym.conn_url(0x0, 0x0)\\n         rcx = qword [rbx + 0x3c90]\\n         edx = 0x400              // 1024 // size_t  n\\n         rsi = rax                // const char *src\\n         rdi = rcx + 8            // char *dest\\n         sym.imp.strncpy  ()\\n                                  // char *strncpy(\\\"\\\", -1, 0x00000000)\\n         rax = qword [rbx]\\n         r12 = qword [rax + 0x3060]\\n         var = r12 - 0x7fffffff\\n         qword [rbx + 0x3c70] = r12\\n         if  (!var) goto loc_0x4029ee // unlikely\\n\\n    loc_0x0040298a: // orphan\\n         rdi = qword [rbx]        // int64_t arg1\\n         sym.conn_url  ()         // sym.conn_url(0x0, 0x0)\\n         rcx = qword [rbx + 0x3c90]\\n         edx = 0x400              // 1024 // size_t  n\\n         rsi = rax                // const char *src\\n         rdi = rcx + 8            // char *dest\\n         sym.imp.strncpy  ()\\n                                  // char *strncpy(\\\"\\\", -1, 0x00000000)\\n         rax = qword [rbx]\\n         r12 = qword [rax + 0x3060]\\n         var = r12 - 0x7fffffff\\n         qword [rbx + 0x3c70] = r12\\n         if  (!var) goto loc_0x4029ee // unlikely\\n         var = dword [rbx + 0xc24] - 0\\n         if  (var <= 0) goto loc_0x4029ee // likely\\n\\n    loc_0x004029c4: // orphan\\n         var = dword [rbx + 0xc24] - 0\\n         if  (var <= 0) goto loc_0x4029ee // likely\\n         edx = 5\\n         esi = str.File_size:__lld_bytes // 0x40629f // \\\"File size: %lld bytes\\\"\\n         edi = 0\\n         sym.imp.dcgettext  ()\\n         rdx = r12                // int64_t arg3\\n         rsi = rax                // int64_t arg2\\n         rdi = rbx                // int64_t arg1\\n         eax = 0\\n         sym.axel_message  ()     // sym.axel_message(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, -1, -1, 0x0, 0x0)\\n\\n    loc_0x004029cd: // orphan\\n         edx = 5\\n         esi = str.File_size:__lld_bytes // 0x40629f // \\\"File size: %lld bytes\\\"\\n         edi = 0\\n         sym.imp.dcgettext  ()\\n         rdx = r12                // int64_t arg3\\n         rsi = rax                // int64_t arg2\\n         rdi = rbx                // int64_t arg1\\n         eax = 0\\n         sym.axel_message  ()     // sym.axel_message(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, -1, -1, 0x0, 0x0)\\n         // CODE XREFS from sym.axel_new @ 0x4029c2(x), 0x4029cb(x)\\n         esi = 0x2a               // '*' // int c\\n         rdi = rbp                // const char *s // rsp\\n         sym.imp.strchr  ()\\n                                  // char *strchr(\\\"\\\", 0x00000000)\\n         var = rax & rax\\n         if  (var) goto loc_0x402a12 // unlikely\\n\\n    loc_0x004029ee: // orphan\\n         // CODE XREFS from sym.axel_new @ 0x4029c2(x), 0x4029cb(x)\\n         esi = 0x2a               // '*' // int c\\n         rdi = rbp                // const char *s // rsp\\n         sym.imp.strchr  ()\\n                                  // char *strchr(\\\"\\\", 0x00000000)\\n         var = rax & rax\\n         if  (var) goto loc_0x402a12 // unlikely\\n         esi = 0x3f               // '?' // int c\\n         rdi = rbp                // const char *s // rsp\\n         sym.imp.strchr  ()\\n                                  // char *strchr(\\\"\\\", 0x00000000)\\n         var = rax & rax\\n         if  (!var) goto loc_0x402a29 // likely\\n\\n    loc_0x00402a00: // orphan\\n         esi = 0x3f               // '?' // int c\\n         rdi = rbp                // const char *s // rsp\\n         sym.imp.strchr  ()\\n                                  // char *strchr(\\\"\\\", 0x00000000)\\n         var = rax & rax\\n         if  (!var) goto loc_0x402a29 // likely\\n         // CODE XREF from sym.axel_new @ 0x4029fe(x)\\n         rax = qword [rbx]\\n         edx = 0x400              // 1024 // size_t  n\\n         rdi = rbp                // char *dest // rsp\\n         rsi = rax + 0x814        // const char *src\\n         sym.imp.strncpy  ()\\n                                  // char *strncpy(\\\"\\\", \\\"\\\", 0x00000000)\\n\\n    loc_0x00402a12: // orphan\\n         // CODE XREF from sym.axel_new @ 0x4029fe(x)\\n         rax = qword [rbx]\\n         edx = 0x400              // 1024 // size_t  n\\n         rdi = rbp                // char *dest // rsp\\n         rsi = rax + 0x814        // const char *src\\n         sym.imp.strncpy  ()\\n                                  // char *strncpy(\\\"\\\", \\\"\\\", 0x00000000)\\n         // CODE XREFS from sym.axel_new @ 0x402979(x), 0x402a10(x)\\n         rsp += 0x18\\n         rax = rbx\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         r15 = pop  ()\\n         re\\n\\n    loc_0x00402a29: // orphan\\n         // CODE XREFS from sym.axel_new @ 0x402979(x), 0x402a10(x)\\n         rsp += 0x18\\n         rax = rbx\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         r15 = pop  ()\\n         re\\n\\n}\\n\"}\n"