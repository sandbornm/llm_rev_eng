"{\"annotations\":[{\"start\":56,\"end\":56,\"offset\":4209876,\"type\":\"offset\"},{\"start\":101,\"end\":101,\"offset\":4209876,\"type\":\"offset\"},{\"start\":121,\"end\":121,\"offset\":4209877,\"type\":\"offset\"},{\"start\":137,\"end\":137,\"offset\":4209879,\"type\":\"offset\"},{\"start\":157,\"end\":157,\"offset\":4209880,\"type\":\"offset\"},{\"start\":175,\"end\":175,\"offset\":4209882,\"type\":\"offset\"},{\"start\":219,\"end\":219,\"offset\":4209887,\"type\":\"offset\"},{\"start\":249,\"end\":249,\"offset\":4209890,\"type\":\"offset\"},{\"start\":270,\"end\":270,\"offset\":4209897,\"type\":\"offset\"},{\"start\":340,\"end\":340,\"offset\":4209902,\"type\":\"offset\"},{\"start\":385,\"end\":385,\"offset\":4209904,\"type\":\"offset\"},{\"start\":421,\"end\":421,\"offset\":4209907,\"type\":\"offset\"},{\"start\":448,\"end\":448,\"offset\":4209907,\"type\":\"offset\"},{\"start\":487,\"end\":487,\"offset\":4209912,\"type\":\"offset\"},{\"start\":528,\"end\":528,\"offset\":4209919,\"type\":\"offset\"},{\"start\":571,\"end\":571,\"offset\":4209924,\"type\":\"offset\"},{\"start\":659,\"end\":659,\"offset\":4209929,\"type\":\"offset\"},{\"start\":690,\"end\":690,\"offset\":4209936,\"type\":\"offset\"},{\"start\":721,\"end\":721,\"offset\":4209943,\"type\":\"offset\"},{\"start\":753,\"end\":753,\"offset\":4209953,\"type\":\"offset\"},{\"start\":787,\"end\":787,\"offset\":4209963,\"type\":\"offset\"},{\"start\":829,\"end\":829,\"offset\":4209963,\"type\":\"offset\"},{\"start\":851,\"end\":851,\"offset\":4209973,\"type\":\"offset\"},{\"start\":900,\"end\":900,\"offset\":4209983,\"type\":\"offset\"},{\"start\":932,\"end\":932,\"offset\":4209993,\"type\":\"offset\"},{\"start\":986,\"end\":986,\"offset\":4210003,\"type\":\"offset\"},{\"start\":1018,\"end\":1018,\"offset\":4210013,\"type\":\"offset\"},{\"start\":1050,\"end\":1050,\"offset\":4210023,\"type\":\"offset\"},{\"start\":1082,\"end\":1082,\"offset\":4210033,\"type\":\"offset\"},{\"start\":1116,\"end\":1116,\"offset\":4210043,\"type\":\"offset\"},{\"start\":1148,\"end\":1148,\"offset\":4210053,\"type\":\"offset\"},{\"start\":1195,\"end\":1195,\"offset\":4210063,\"type\":\"offset\"},{\"start\":1227,\"end\":1227,\"offset\":4210073,\"type\":\"offset\"},{\"start\":1259,\"end\":1259,\"offset\":4210083,\"type\":\"offset\"},{\"start\":1287,\"end\":1287,\"offset\":4210083,\"type\":\"offset\"},{\"start\":1348,\"end\":1348,\"offset\":4210088,\"type\":\"offset\"},{\"start\":1393,\"end\":1393,\"offset\":4210093,\"type\":\"offset\"},{\"start\":1420,\"end\":1420,\"offset\":4210093,\"type\":\"offset\"},{\"start\":1449,\"end\":1449,\"offset\":4210098,\"type\":\"offset\"},{\"start\":1469,\"end\":1469,\"offset\":4210103,\"type\":\"offset\"},{\"start\":1487,\"end\":1487,\"offset\":4210106,\"type\":\"offset\"},{\"start\":1521,\"end\":1521,\"offset\":4210113,\"type\":\"offset\"},{\"start\":1539,\"end\":1539,\"offset\":4210116,\"type\":\"offset\"},{\"start\":1557,\"end\":1557,\"offset\":4210118,\"type\":\"offset\"},{\"start\":1602,\"end\":1602,\"offset\":4210120,\"type\":\"offset\"},{\"start\":1628,\"end\":1628,\"offset\":4210123,\"type\":\"offset\"},{\"start\":1705,\"end\":1705,\"offset\":4210128,\"type\":\"offset\"},{\"start\":1732,\"end\":1732,\"offset\":4210128,\"type\":\"offset\"},{\"start\":1770,\"end\":1770,\"offset\":4210133,\"type\":\"offset\"},{\"start\":1794,\"end\":1794,\"offset\":4210136,\"type\":\"offset\"},{\"start\":1873,\"end\":1873,\"offset\":4210153,\"type\":\"offset\"},{\"start\":1927,\"end\":1927,\"offset\":4210153,\"type\":\"offset\"},{\"start\":1967,\"end\":1967,\"offset\":4210160,\"type\":\"offset\"},{\"start\":2010,\"end\":2010,\"offset\":4210165,\"type\":\"offset\"},{\"start\":2051,\"end\":2051,\"offset\":4210168,\"type\":\"offset\"},{\"start\":2079,\"end\":2079,\"offset\":4210168,\"type\":\"offset\"},{\"start\":2159,\"end\":2159,\"offset\":4210173,\"type\":\"offset\"},{\"start\":2213,\"end\":2213,\"offset\":4210173,\"type\":\"offset\"},{\"start\":2288,\"end\":2288,\"offset\":4210178,\"type\":\"offset\"},{\"start\":2326,\"end\":2326,\"offset\":4210181,\"type\":\"offset\"},{\"start\":2475,\"end\":2475,\"offset\":4210186,\"type\":\"offset\"},{\"start\":2499,\"end\":2499,\"offset\":4210188,\"type\":\"offset\"},{\"start\":2627,\"end\":2738,\"offset\":4210188,\"type\":\"offset\"},{\"start\":2880,\"end\":3171,\"offset\":4210188,\"type\":\"offset\"},{\"start\":3493,\"end\":3592,\"offset\":4210188,\"type\":\"offset\"},{\"start\":3722,\"end\":4426,\"offset\":4210188,\"type\":\"offset\"},{\"start\":5161,\"end\":5188,\"offset\":4210188,\"type\":\"offset\"},{\"start\":5246,\"end\":5373,\"offset\":4210188,\"type\":\"offset\"},{\"start\":5531,\"end\":5569,\"offset\":4210188,\"type\":\"offset\"},{\"start\":5638,\"end\":5707,\"offset\":4210188,\"type\":\"offset\"},{\"start\":5807,\"end\":5992,\"offset\":4210188,\"type\":\"offset\"},{\"start\":6208,\"end\":6290,\"offset\":4210188,\"type\":\"offset\"},{\"start\":6403,\"end\":6538,\"offset\":4210188,\"type\":\"offset\"}],\"code\":\"int sym.conf_init (int esi, int edx) {\\n    loc_0x403cd4:\\n        // CALL XREF from main @ 0x40182c(x)\\n        push  (rbp)\\n        ebp = 0\\n        push  (rbx)\\n        eax = ebp\\n        ecx = 0xe12   // '\\\\x12\\\\x0e' // 3602\\n        rbx = rdi     // arg1\\n        rsp -= 0x408\\n        esi = str.default // 0x4065e1 // \\\"default\\\" // const char *src\\n        rep stosd dword [rdi],ax // elf_phdr\\n        rdi = rbx     // char *dest\\n        sym.imp.strcpy  ()\\n        // char *strcpy(-1, \\\"default\\\")\\n        rdi = rbx + 0x3444 // char *dest\\n        edx = 0x400   // 1024 // size_t  n\\n        esi = str.Axel_2.4__Linux_ // 0x4065e9 // \\\"Axel 2.4 (Linux)\\\" // const char *src\\n        byte [rbx + 0x400] = 0\\n        byte [rbx + 0x800] = 0\\n        dword [rbx + 0xc00] = 1\\n        dword [rbx + 0xc04] = 0xa\\n        dword [rbx + 0xc08] = 0x2d // '-'\\n        // [0x2d:4]=0\\n        dword [rbx + 0xc0c] = 0x14 // [0x14:4]=0\\n        dword [rbx + 0xc10] = 4\\n        dword [rbx + 0xc14] = 0x1400 // [0x1400:4]=-1\\n        dword [rbx + 0xc18] = 0\\n        dword [rbx + 0xc1c] = 1\\n        dword [rbx + 0xc20] = 0\\n        dword [rbx + 0xc30] = 0xa\\n        dword [rbx + 0xc34] = 3\\n        dword [rbx + 0xc38] = 0xf // [0xf:4]=0\\n        dword [rbx + 0xc3c] = 3\\n        dword [rbx + 0xc40] = 0\\n        sym.imp.strncpy  ()\\n        // char *strncpy(\\\"\\\", \\\"Axel 2.4 (Linux)\\\", 0x00000000)\\n        edi = 0x408   // 1032 // size_t size\\n        sym.imp.malloc  ()\\n        //  void *malloc(-1)\\n        ecx = 0x102\\n        rdx = rax\\n        qword [rbx + 0xc28] = rax\\n        rdi = rax\\n        eax = ebp\\n        rep stosd dword [rdi],ax // elf_phdr\\n        qword [rdx] = rdx\\n        edi = str.http_proxy // 0x4064b5 // \\\"http_proxy\\\" // const char *name\\n        sym.imp.getenv  ()\\n        // char *getenv(\\\"http_proxy\\\")\\n        var = rax & rax\\n        if  (var) goto loc_0x403de9 // unlikely\\n            \\n    loc_0x403de9:\\n        // CODE XREF from sym.conf_init @ 0x403dd8(x)\\n        rdi = rbx + 0x400 // char *dest\\n        edx = 0x400   // 1024 // size_t  n\\n        rsi = rax     // const char *src\\n        sym.imp.strncpy  ()\\n        // char *strncpy(\\\"\\\", -1, 0x00000000)\\n         // do {\\n    loc_0x403dfd:\\n        // CODE XREF from sym.conf_init @ 0x403de7(x)\\n        esi = str._etc_axelrc // 0x406605 // \\\"/etc/axelrc\\\" // int64_t arg2\\n        rdi = rbx     // int64_t arg1\\n        sym.conf_loadfile  () // sym.conf_loadfile(0x0, 0x406605, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, -1, -1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\\n        var = eax & eax\\n        if  (var) goto loc_0x403e12 // unlikely\\n         // } while (?);\\n         // } while (?);\\n        }\\n        return eax;             // CODE XREF from sym.conf_init @ 0x403e4b(x)\\n             eax = 0\\n             goto loc_0x403e7b\\n\\n    loc_0x00403e0e: // orphan\\n             // CODE XREF from sym.conf_init @ 0x403e4b(x)\\n             eax = 0\\n             goto loc_0x403e7b\\n         // CODE XREF from sym.conf_init @ 0x403e0c(x)\\n         edi = str.HOME           // 0x406611 // \\\"HOME\\\" // const char *name\\n         sym.imp.getenv  ()\\n                                  // char *getenv(\\\"HOME\\\")\\n         var = rax & rax\\n         if  (var) goto loc_0x403e25 // unlikely\\n\\n    loc_0x00403e12: // orphan\\n         // CODE XREF from sym.conf_init @ 0x403e0c(x)\\n         edi = str.HOME           // 0x406611 // \\\"HOME\\\" // const char *name\\n         sym.imp.getenv  ()\\n                                  // char *getenv(\\\"HOME\\\")\\n         var = rax & rax\\n         if  (var) goto loc_0x403e25 // unlikely\\n         // CODE XREF from sym.conf_init @ 0x403e49(x)\\n         edx = 0\\n         goto loc_0x403e5d\\n\\n    loc_0x00403e21: // orphan\\n         // CODE XREF from sym.conf_init @ 0x403e49(x)\\n         edx = 0\\n         goto loc_0x403e5d\\n         // CODE XREF from sym.conf_init @ 0x403e1f(x)\\n         rdx = rax\\n         ecx = str..axelrc        // 0x406616 // \\\".axelrc\\\"\\n         esi = str._s__s          // 0x40661e // \\\"%s/%s\\\" // const char *format\\n         rdi = rsp                // char *s\\n         eax = 0\\n         sym.imp.sprintf  ()\\n                                  // int sprintf(\\\"\\\\xff\\\", \\\"%s/%s\\\", ?)\\n         rsi = rsp                // int64_t arg2\\n         rdi = rbx                // int64_t arg1\\n         sym.conf_loadfile  ()    // sym.conf_loadfile(0x0, 0x178000, 0x0, 0x406616, 0x0, 0x0, 0x0, 0x0, -1, -1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\\n         var = eax & eax\\n         if  (var) goto loc_0x403e21 // unlikely\\n\\n    loc_0x00403e25: // orphan\\n         // CODE XREF from sym.conf_init @ 0x403e1f(x)\\n         rdx = rax\\n         ecx = str..axelrc        // 0x406616 // \\\".axelrc\\\"\\n         esi = str._s__s          // 0x40661e // \\\"%s/%s\\\" // const char *format\\n         rdi = rsp                // char *s\\n         eax = 0\\n         sym.imp.sprintf  ()\\n                                  // int sprintf(\\\"\\\\xff\\\", \\\"%s/%s\\\", ?)\\n         rsi = rsp                // int64_t arg2\\n         rdi = rbx                // int64_t arg1\\n         sym.conf_loadfile  ()    // sym.conf_loadfile(0x0, 0x178000, 0x0, 0x406616, 0x0, 0x0, 0x0, 0x0, -1, -1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\\n         var = eax & eax\\n         if  (var) goto loc_0x403e21 // unlikely\\n         goto loc_0x403e0e\\n\\n    loc_0x00403e4b: // orphan\\n         goto loc_0x403e0e\\n         // CODE XREF from sym.conf_init @ 0x403e68(x)\\n         var = cl - 0x2c\\n         if  (var) goto loc_0x403e5a // likely\\n\\n    loc_0x00403e4d: // orphan\\n         // CODE XREF from sym.conf_init @ 0x403e68(x)\\n         var = cl - 0x2c\\n         if  (var) goto loc_0x403e5a // likely\\n         byte [rbx + rdx + 0x800] = 0\\n\\n    loc_0x00403e52: // orphan\\n         byte [rbx + rdx + 0x800] = 0\\n         // CODE XREF from sym.conf_init @ 0x403e50(x)\\n         rdx+\\n\\n    loc_0x00403e5a: // orphan\\n         // CODE XREF from sym.conf_init @ 0x403e50(x)\\n         rdx+\\n         // CODE XREF from sym.conf_init @ 0x403e23(x)\\n         cl = byte [rbx + rdx + 0x800]\\n         eax = edx\\n         var = cl & cl\\n         if  (var) goto loc_0x403e4d // unlikely\\n\\n    loc_0x00403e5d: // orphan\\n         // CODE XREF from sym.conf_init @ 0x403e23(x)\\n         cl = byte [rbx + rdx + 0x800]\\n         eax = edx\\n         var = cl & cl\\n         if  (var) goto loc_0x403e4d // unlikely\\n         eax+\\n         cdq\\n         byte [rbx + rax + 0x800] = 0\\n         eax = 1\\n\\n    loc_0x00403e6a: // orphan\\n         eax+\\n         cdq\\n         byte [rbx + rax + 0x800] = 0\\n         eax = 1\\n         // CODE XREF from sym.conf_init @ 0x403e10(x)\\n         rsp += 0x408\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         re\\n\\n    loc_0x00403e7b: // orphan\\n         // CODE XREF from sym.conf_init @ 0x403e10(x)\\n         rsp += 0x408\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         re\\n\\n}\\n\"}\n"