"{\"annotations\":[{\"start\":63,\"end\":63,\"offset\":4208209,\"type\":\"offset\"},{\"start\":121,\"end\":121,\"offset\":4208209,\"type\":\"offset\"},{\"start\":141,\"end\":141,\"offset\":4208211,\"type\":\"offset\"},{\"start\":161,\"end\":161,\"offset\":4208213,\"type\":\"offset\"},{\"start\":181,\"end\":181,\"offset\":4208215,\"type\":\"offset\"},{\"start\":201,\"end\":201,\"offset\":4208216,\"type\":\"offset\"},{\"start\":231,\"end\":231,\"offset\":4208219,\"type\":\"offset\"},{\"start\":251,\"end\":251,\"offset\":4208220,\"type\":\"offset\"},{\"start\":293,\"end\":293,\"offset\":4208227,\"type\":\"offset\"},{\"start\":323,\"end\":323,\"offset\":4208230,\"type\":\"offset\"},{\"start\":384,\"end\":384,\"offset\":4208233,\"type\":\"offset\"},{\"start\":445,\"end\":445,\"offset\":4208233,\"type\":\"offset\"},{\"start\":485,\"end\":485,\"offset\":4208241,\"type\":\"offset\"},{\"start\":605,\"end\":605,\"offset\":4208243,\"type\":\"offset\"},{\"start\":631,\"end\":631,\"offset\":4208246,\"type\":\"offset\"},{\"start\":656,\"end\":656,\"offset\":4208246,\"type\":\"offset\"},{\"start\":681,\"end\":681,\"offset\":4208251,\"type\":\"offset\"},{\"start\":699,\"end\":699,\"offset\":4208254,\"type\":\"offset\"},{\"start\":725,\"end\":961,\"offset\":4208254,\"type\":\"offset\"},{\"start\":1228,\"end\":1587,\"offset\":4208254,\"type\":\"offset\"},{\"start\":1977,\"end\":2415,\"offset\":4208254,\"type\":\"offset\"},{\"start\":2884,\"end\":3130,\"offset\":4208254,\"type\":\"offset\"},{\"start\":3407,\"end\":3478,\"offset\":4208254,\"type\":\"offset\"},{\"start\":3580,\"end\":3621,\"offset\":4208254,\"type\":\"offset\"},{\"start\":3693,\"end\":3788,\"offset\":4208254,\"type\":\"offset\"},{\"start\":3914,\"end\":4097,\"offset\":4208254,\"type\":\"offset\"},{\"start\":4311,\"end\":4383,\"offset\":4208254,\"type\":\"offset\"},{\"start\":4486,\"end\":4532,\"offset\":4208254,\"type\":\"offset\"},{\"start\":4609,\"end\":4862,\"offset\":4208254,\"type\":\"offset\"},{\"start\":5146,\"end\":5334,\"offset\":4208254,\"type\":\"offset\"},{\"start\":5553,\"end\":5754,\"offset\":4208254,\"type\":\"offset\"},{\"start\":5986,\"end\":6149,\"offset\":4208254,\"type\":\"offset\"},{\"start\":6343,\"end\":6564,\"offset\":4208254,\"type\":\"offset\"},{\"start\":6816,\"end\":6940,\"offset\":4208254,\"type\":\"offset\"},{\"start\":7095,\"end\":7301,\"offset\":4208254,\"type\":\"offset\"}],\"code\":\"int sym.parse_interfaces (int esi, int edx) {\\n    loc_0x403651:\\n        // CALL XREF from sym.conf_loadfile @ 0x403bde(x)\\n        push  (r14)\\n        push  (r13)\\n        push  (r12)\\n        push  (rbp)\\n        r12 = rdi     // arg1\\n        push  (rbx)\\n        rax = qword [rdi + 0xc28] // arg1\\n        rbx = rsi     // arg2\\n        rdi = qword [rax]\\n         // do {\\n    loc_0x403669:\\n        // CODE XREF from sym.parse_interfaces @ 0x40367e(x)\\n        var = rdi - qword [r12 + 0xc28]\\n        if  (!var) goto loc_0x403680 // likely\\n         // } while (?);\\n        }\\n        return eax;\\n    loc_0x403673:\\n        rbp = qword [rdi]\\n        sym.imp.free  ()\\n        // void free(-1)\\n        rdi = rbp\\n        goto loc_0x403669             // CODE XREF from sym.parse_interfaces @ 0x403671(x)\\n             sym.imp.free  ()\\n                                      // void free(-1)\\n             var = byte [rbx] - 0\\n             if  (var) goto loc_0x4036b3 // likely\\n\\n    loc_0x00403680: // orphan\\n             // CODE XREF from sym.parse_interfaces @ 0x403671(x)\\n             sym.imp.free  ()\\n                                      // void free(-1)\\n             var = byte [rbx] - 0\\n             if  (var) goto loc_0x4036b3 // likely\\n         edi = 0x408              // 1032 // size_t size\\n         sym.imp.malloc  ()\\n                                  //  void *malloc(0xfffffffd)\\n         rdx = rax\\n         qword [r12 + 0xc28] = rax\\n         ecx = 0x102\\n         eax = 0\\n         rdi = rdx\\n         rep stosd dword [rdi],ax // elf_phdr\\n         qword [rdx] = rdx\\n         goto loc_0x40375e\\n\\n    loc_0x0040368a: // orphan\\n         edi = 0x408              // 1032 // size_t size\\n         sym.imp.malloc  ()\\n                                  //  void *malloc(0xfffffffd)\\n         rdx = rax\\n         qword [r12 + 0xc28] = rax\\n         ecx = 0x102\\n         eax = 0\\n         rdi = rdx\\n         rep stosd dword [rdi],ax // elf_phdr\\n         qword [rdx] = rdx\\n         goto loc_0x40375e\\n         // CODE XREF from sym.parse_interfaces @ 0x403688(x)\\n         eax = 0\\n         rdi = rbx\\n         rcx |= 0xffffffffffffffff\\n         repne scasb al,yte [rdi]\\n         edi = 0x408              // 1032 // size_t size\\n         rsi = rcx\\n         rsi = !rsi\\n         byte [rbx + rsi] = 0\\n         sym.imp.malloc  ()\\n                                  //  void *malloc(0xfffffffd)\\n         rbp = rax\\n         qword [r12 + 0xc28] = rax\\n\\n    loc_0x004036b3: // orphan\\n         // CODE XREF from sym.parse_interfaces @ 0x403688(x)\\n         eax = 0\\n         rdi = rbx\\n         rcx |= 0xffffffffffffffff\\n         repne scasb al,yte [rdi]\\n         edi = 0x408              // 1032 // size_t size\\n         rsi = rcx\\n         rsi = !rsi\\n         byte [rbx + rsi] = 0\\n         sym.imp.malloc  ()\\n                                  //  void *malloc(0xfffffffd)\\n         rbp = rax\\n         qword [r12 + 0xc28] = rax\\n         // CODE XREFS from sym.parse_interfaces @ 0x4036f4(x), 0x403750(x)\\n         al = byte [rbx]\\n         var = al - 9\\n         cl = e\\n         var = al - 0x20\\n         dl = e\\n         cl |= dl\\n         if  (!var) goto loc_0x4036f6 // likely\\n\\n    loc_0x004036dd: // orphan\\n         // CODE XREFS from sym.parse_interfaces @ 0x4036f4(x), 0x403750(x)\\n         al = byte [rbx]\\n         var = al - 9\\n         cl = e\\n         var = al - 0x20\\n         dl = e\\n         cl |= dl\\n         if  (!var) goto loc_0x4036f6 // likely\\n         var = al & al\\n         if  (!var) goto loc_0x4036f6 // likely\\n\\n    loc_0x004036ed: // orphan\\n         var = al & al\\n         if  (!var) goto loc_0x4036f6 // likely\\n         rbx+\\n         goto loc_0x4036dd\\n\\n    loc_0x004036f1: // orphan\\n         rbx+\\n         goto loc_0x4036dd\\n         // CODE XREFS from sym.parse_interfaces @ 0x4036eb(x), 0x4036ef(x)\\n         r13 = rbx\\n\\n    loc_0x004036f6: // orphan\\n         // CODE XREFS from sym.parse_interfaces @ 0x4036eb(x), 0x4036ef(x)\\n         r13 = rbx\\n         // CODE XREF from sym.parse_interfaces @ 0x40370c(x)\\n         al = byte [r13]\\n         r14 = r13 + 1\\n         var = al & 0xdf\\n         if  (!var) goto loc_0x40370e // likely\\n\\n    loc_0x004036f9: // orphan\\n         // CODE XREF from sym.parse_interfaces @ 0x40370c(x)\\n         al = byte [r13]\\n         r14 = r13 + 1\\n         var = al & 0xdf\\n         if  (!var) goto loc_0x40370e // likely\\n         var = al - 9\\n         if  (!var) goto loc_0x40370e // unlikely\\n\\n    loc_0x00403705: // orphan\\n         var = al - 9\\n         if  (!var) goto loc_0x40370e // unlikely\\n         r13 = r14\\n         goto loc_0x4036f9\\n\\n    loc_0x00403709: // orphan\\n         r13 = r14\\n         goto loc_0x4036f9\\n         // CODE XREFS from sym.parse_interfaces @ 0x403703(x), 0x403707(x)\\n         byte [r13] = 0\\n         al = byte [rbx]\\n         rdi = arg_8h\\n         eax -= 0x30\\n         var = al - 9\\n         if  (((unsigned) var) <= 0) goto 0x40372d // unlikely\\n\\n    loc_0x0040370e: // orphan\\n         // CODE XREFS from sym.parse_interfaces @ 0x403703(x), 0x403707(x)\\n         byte [r13] = 0\\n         al = byte [rbx]\\n         rdi = arg_8h\\n         eax -= 0x30\\n         var = al - 9\\n         if  (((unsigned) var) <= 0) goto 0x40372d // unlikely\\n         rsi = rdi                // int64_t arg2\\n         rdi = rbx                // int64_t arg1\\n         sym.get_if_ip  ()        // sym.get_if_ip(0x0, 0x0)\\n         goto loc_0x403735\\n\\n    loc_0x00403720: // orphan\\n         rsi = rdi                // int64_t arg2\\n         rdi = rbx                // int64_t arg1\\n         sym.get_if_ip  ()        // sym.get_if_ip(0x0, 0x0)\\n         goto loc_0x403735\\n         // CODE XREF from sym.parse_interfaces @ 0x40371e(x)\\n         rsi = rbx                // const char *src\\n         sym.imp.strcpy  ()\\n                                  // char *strcpy(-1, -1)\\n\\n    loc_0x0040372d: // orphan\\n         // CODE XREF from sym.parse_interfaces @ 0x40371e(x)\\n         rsi = rbx                // const char *src\\n         sym.imp.strcpy  ()\\n                                  // char *strcpy(-1, -1)\\n         // CODE XREF from sym.parse_interfaces @ 0x40372b(x)\\n         var = byte [r13 + 1] - 0\\n         rbx = r14\\n         if  (!var) goto loc_0x403752 // likely\\n\\n    loc_0x00403735: // orphan\\n         // CODE XREF from sym.parse_interfaces @ 0x40372b(x)\\n         var = byte [r13 + 1] - 0\\n         rbx = r14\\n         if  (!var) goto loc_0x403752 // likely\\n         edi = 0x408              // 1032 // size_t size\\n         sym.imp.malloc  ()\\n                                  //  void *malloc(0xfffffffd)\\n         qword [rbp] = rax\\n         rbp = rax\\n         goto loc_0x4036dd\\n\\n    loc_0x0040373f: // orphan\\n         edi = 0x408              // 1032 // size_t size\\n         sym.imp.malloc  ()\\n                                  //  void *malloc(0xfffffffd)\\n         qword [rbp] = rax\\n         rbp = rax\\n         goto loc_0x4036dd\\n         // CODE XREF from sym.parse_interfaces @ 0x40373d(x)\\n         rax = qword [r12 + 0xc28]\\n         qword [rbp] = rax\\n\\n    loc_0x00403752: // orphan\\n         // CODE XREF from sym.parse_interfaces @ 0x40373d(x)\\n         rax = qword [r12 + 0xc28]\\n         qword [rbp] = rax\\n         // CODE XREF from sym.parse_interfaces @ 0x4036ae(x)\\n         rbx = pop  ()\\n         eax = 1\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         re\\n\\n    loc_0x0040375e: // orphan\\n         // CODE XREF from sym.parse_interfaces @ 0x4036ae(x)\\n         rbx = pop  ()\\n         eax = 1\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         re\\n\\n}\\n\"}\n"