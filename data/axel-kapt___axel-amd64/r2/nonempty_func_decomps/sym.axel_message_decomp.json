"{\"annotations\":[{\"start\":59,\"end\":59,\"offset\":4203834,\"type\":\"offset\"},{\"start\":127,\"end\":127,\"offset\":4203834,\"type\":\"offset\"},{\"start\":195,\"end\":195,\"offset\":4203834,\"type\":\"offset\"},{\"start\":263,\"end\":263,\"offset\":4203834,\"type\":\"offset\"},{\"start\":331,\"end\":331,\"offset\":4203834,\"type\":\"offset\"},{\"start\":399,\"end\":399,\"offset\":4203834,\"type\":\"offset\"},{\"start\":467,\"end\":467,\"offset\":4203834,\"type\":\"offset\"},{\"start\":487,\"end\":487,\"offset\":4203836,\"type\":\"offset\"},{\"start\":507,\"end\":507,\"offset\":4203838,\"type\":\"offset\"},{\"start\":537,\"end\":537,\"offset\":4203841,\"type\":\"offset\"},{\"start\":557,\"end\":557,\"offset\":4203842,\"type\":\"offset\"},{\"start\":577,\"end\":577,\"offset\":4203843,\"type\":\"offset\"},{\"start\":597,\"end\":597,\"offset\":4203850,\"type\":\"offset\"},{\"start\":619,\"end\":619,\"offset\":4203852,\"type\":\"offset\"},{\"start\":657,\"end\":657,\"offset\":4203857,\"type\":\"offset\"},{\"start\":695,\"end\":695,\"offset\":4203862,\"type\":\"offset\"},{\"start\":732,\"end\":732,\"offset\":4203867,\"type\":\"offset\"},{\"start\":769,\"end\":769,\"offset\":4203872,\"type\":\"offset\"},{\"start\":847,\"end\":847,\"offset\":4203929,\"type\":\"offset\"},{\"start\":904,\"end\":904,\"offset\":4203929,\"type\":\"offset\"},{\"start\":949,\"end\":949,\"offset\":4203934,\"type\":\"offset\"},{\"start\":979,\"end\":979,\"offset\":4203937,\"type\":\"offset\"},{\"start\":1006,\"end\":1006,\"offset\":4203937,\"type\":\"offset\"},{\"start\":1035,\"end\":1035,\"offset\":4203942,\"type\":\"offset\"},{\"start\":1053,\"end\":1053,\"offset\":4203945,\"type\":\"offset\"},{\"start\":1082,\"end\":1082,\"offset\":4203950,\"type\":\"offset\"},{\"start\":1098,\"end\":1098,\"offset\":4203952,\"type\":\"offset\"},{\"start\":1116,\"end\":1116,\"offset\":4203955,\"type\":\"offset\"},{\"start\":1160,\"end\":1160,\"offset\":4203958,\"type\":\"offset\"},{\"start\":1205,\"end\":1205,\"offset\":4203963,\"type\":\"offset\"},{\"start\":1250,\"end\":1250,\"offset\":4203965,\"type\":\"offset\"},{\"start\":1273,\"end\":1273,\"offset\":4203973,\"type\":\"offset\"},{\"start\":1306,\"end\":1306,\"offset\":4203977,\"type\":\"offset\"},{\"start\":1343,\"end\":1343,\"offset\":4203982,\"type\":\"offset\"},{\"start\":1378,\"end\":1378,\"offset\":4203990,\"type\":\"offset\"},{\"start\":1419,\"end\":1419,\"offset\":4203998,\"type\":\"offset\"},{\"start\":1449,\"end\":1449,\"offset\":4204003,\"type\":\"offset\"},{\"start\":1471,\"end\":1471,\"offset\":4204008,\"type\":\"offset\"},{\"start\":1508,\"end\":1508,\"offset\":4204008,\"type\":\"offset\"},{\"start\":1530,\"end\":1530,\"offset\":4204016,\"type\":\"offset\"},{\"start\":1560,\"end\":1560,\"offset\":4204021,\"type\":\"offset\"},{\"start\":1590,\"end\":1590,\"offset\":4204021,\"type\":\"offset\"},{\"start\":1630,\"end\":1630,\"offset\":4204026,\"type\":\"offset\"},{\"start\":1669,\"end\":1669,\"offset\":4204035,\"type\":\"offset\"},{\"start\":1746,\"end\":1746,\"offset\":4204047,\"type\":\"offset\"},{\"start\":1817,\"end\":1817,\"offset\":4204047,\"type\":\"offset\"},{\"start\":1843,\"end\":1843,\"offset\":4204051,\"type\":\"offset\"},{\"start\":1867,\"end\":1867,\"offset\":4204054,\"type\":\"offset\"},{\"start\":1945,\"end\":1945,\"offset\":4204061,\"type\":\"offset\"},{\"start\":2002,\"end\":2002,\"offset\":4204061,\"type\":\"offset\"},{\"start\":2063,\"end\":2063,\"offset\":4204065,\"type\":\"offset\"},{\"start\":2120,\"end\":2120,\"offset\":4204065,\"type\":\"offset\"},{\"start\":2140,\"end\":2140,\"offset\":4204072,\"type\":\"offset\"},{\"start\":2162,\"end\":2162,\"offset\":4204073,\"type\":\"offset\"},{\"start\":2184,\"end\":2184,\"offset\":4204074,\"type\":\"offset\"},{\"start\":2206,\"end\":2206,\"offset\":4204076,\"type\":\"offset\"},{\"start\":2228,\"end\":2228,\"offset\":4204078,\"type\":\"offset\"}],\"code\":\"int sym.axel_message (int esi, int edx) {\\n    loc_0x40253a:\\n        // XREFS: CALL 0x004027a2  CALL 0x0040296a  CALL 0x004029e9\\n        // XREFS: CALL 0x00402a72  CALL 0x00402ac1  CALL 0x00402bce\\n        // XREFS: CALL 0x00402c4b  CALL 0x00402c8e  CALL 0x00402e9c\\n        // XREFS: CALL 0x00402f1a  CALL 0x00402f5f  CALL 0x004031e4\\n        // XREFS: CALL 0x00403252  CALL 0x004032c1  CALL 0x00403329\\n        // XREFS: CALL 0x0040339b  CALL 0x00403495  CALL 0x004034f1\\n        push  (r13)\\n        push  (r12)\\n        r12 = rdi     // arg1\\n        push  (rbp)\\n        push  (rbx)\\n        rsp -= 0xd8\\n        var = al & al\\n        qword [var_30h] = rdx // arg3\\n        qword [var_38h] = rcx // arg4\\n        qword [var_40h] = r8 // arg5\\n        qword [var_48h] = r9 // arg6\\n        if  (!var) goto loc_0x402599 // likely\\n            \\n    loc_0x402599:\\n        // CODE XREF from sym.axel_message @ 0x402560(x)\\n        edi = 0x408   // 1032 // size_t size\\n        r13 = rsi     // arg2\\n        sym.imp.malloc  ()\\n        //  void *malloc(-1)\\n        rbx = rax\\n        ecx = 0x102   // 258\\n        eax = 0\\n        rdi = rbx\\n        rdx = r13     // const char *format\\n        esi = 0x400   // 1024 // size_t size\\n        rep stosd dword [rdi],ax // elf_phdr\\n        rax = arg_100h\\n        rdi = rbx + 8 // char *s\\n        rcx = arg     // va_list arg\\n        rbp = qword [r12 + 0x3c88]\\n        dword [arg] = 0x10 // [0x10:4]=0\\n        qword [var_10h] = rax\\n        rax = var_20h\\n        dword [var_ch] = 0x30 // '0'\\n        // [0x30:4]=0\\n        qword [var_18h] = rax\\n        sym.imp.vsnprintf  ()\\n        // int vsnprintf(\\\"\\\", -1, -1, ?)\\n        var = qword [r12 + 0x3c88] - 0\\n        if  (var) goto loc_0x40260f // likely\\n            \\n    loc_0x40260f:\\n        // CODE XREFS from sym.axel_message @ 0x402603(x), 0x40261b(x)\\n        rax = qword [rbp]\\n        var = rax & rax\\n        if  (!var) goto loc_0x40261d // likely\\n            \\n    loc_0x40261d:\\n        // CODE XREF from sym.axel_message @ 0x402616(x)\\n        qword [rbp] = rbx\\n         // do {\\n    loc_0x402621:\\n        // CODE XREF from sym.axel_message @ 0x40260d(x)\\n        rsp += 0xd8\\n        rbx = pop  ()\\n        rbp = pop  ()\\n        r12 = pop  ()\\n        r13 = pop  ()\\n        re\\n         // } while (?);\\n         // } while (?);\\n         // } while (?);\\n         // } while (?);\\n        }\\n        return eax;\\n}\\n\"}\n"