"{\"annotations\":[{\"start\":71,\"end\":71,\"offset\":4204880,\"type\":\"offset\"},{\"start\":134,\"end\":134,\"offset\":4204880,\"type\":\"offset\"},{\"start\":303,\"end\":303,\"offset\":4204882,\"type\":\"offset\"},{\"start\":323,\"end\":323,\"offset\":4204883,\"type\":\"offset\"},{\"start\":353,\"end\":353,\"offset\":4204886,\"type\":\"offset\"},{\"start\":373,\"end\":373,\"offset\":4204887,\"type\":\"offset\"},{\"start\":403,\"end\":403,\"offset\":4204890,\"type\":\"offset\"},{\"start\":433,\"end\":433,\"offset\":4204893,\"type\":\"offset\"},{\"start\":453,\"end\":453,\"offset\":4204897,\"type\":\"offset\"},{\"start\":492,\"end\":492,\"offset\":4204903,\"type\":\"offset\"},{\"start\":557,\"end\":557,\"offset\":4204907,\"type\":\"offset\"},{\"start\":596,\"end\":596,\"offset\":4204913,\"type\":\"offset\"},{\"start\":619,\"end\":619,\"offset\":4204917,\"type\":\"offset\"},{\"start\":691,\"end\":691,\"offset\":4204923,\"type\":\"offset\"},{\"start\":763,\"end\":763,\"offset\":4204929,\"type\":\"offset\"},{\"start\":832,\"end\":832,\"offset\":4204937,\"type\":\"offset\"},{\"start\":856,\"end\":856,\"offset\":4204941,\"type\":\"offset\"},{\"start\":881,\"end\":881,\"offset\":4204941,\"type\":\"offset\"},{\"start\":915,\"end\":915,\"offset\":4204946,\"type\":\"offset\"},{\"start\":946,\"end\":946,\"offset\":4204952,\"type\":\"offset\"},{\"start\":977,\"end\":977,\"offset\":4204958,\"type\":\"offset\"},{\"start\":1004,\"end\":1004,\"offset\":4204963,\"type\":\"offset\"},{\"start\":1027,\"end\":1027,\"offset\":4204967,\"type\":\"offset\"},{\"start\":1096,\"end\":1096,\"offset\":4204975,\"type\":\"offset\"},{\"start\":1127,\"end\":1127,\"offset\":4204981,\"type\":\"offset\"},{\"start\":1151,\"end\":1151,\"offset\":4204985,\"type\":\"offset\"},{\"start\":1174,\"end\":1174,\"offset\":4204989,\"type\":\"offset\"},{\"start\":1199,\"end\":1199,\"offset\":4204989,\"type\":\"offset\"},{\"start\":1233,\"end\":1233,\"offset\":4204994,\"type\":\"offset\"},{\"start\":1260,\"end\":1260,\"offset\":4204999,\"type\":\"offset\"},{\"start\":1362,\"end\":1362,\"offset\":4205007,\"type\":\"offset\"},{\"start\":1419,\"end\":1419,\"offset\":4205011,\"type\":\"offset\"},{\"start\":1475,\"end\":1475,\"offset\":4205015,\"type\":\"offset\"},{\"start\":1532,\"end\":1532,\"offset\":4205019,\"type\":\"offset\"},{\"start\":1589,\"end\":1589,\"offset\":4205023,\"type\":\"offset\"},{\"start\":1649,\"end\":1649,\"offset\":4205028,\"type\":\"offset\"},{\"start\":1706,\"end\":1706,\"offset\":4205032,\"type\":\"offset\"},{\"start\":1730,\"end\":1730,\"offset\":4205036,\"type\":\"offset\"},{\"start\":1753,\"end\":1753,\"offset\":4205040,\"type\":\"offset\"},{\"start\":1777,\"end\":1777,\"offset\":4205044,\"type\":\"offset\"},{\"start\":1802,\"end\":1802,\"offset\":4205048,\"type\":\"offset\"},{\"start\":1826,\"end\":1826,\"offset\":4205052,\"type\":\"offset\"},{\"start\":1889,\"end\":1889,\"offset\":4205310,\"type\":\"offset\"},{\"start\":1958,\"end\":1958,\"offset\":4205310,\"type\":\"offset\"},{\"start\":1989,\"end\":1989,\"offset\":4205316,\"type\":\"offset\"},{\"start\":2020,\"end\":2020,\"offset\":4205322,\"type\":\"offset\"},{\"start\":2078,\"end\":2078,\"offset\":4205322,\"type\":\"offset\"},{\"start\":2112,\"end\":2112,\"offset\":4205327,\"type\":\"offset\"},{\"start\":2143,\"end\":2143,\"offset\":4205333,\"type\":\"offset\"},{\"start\":2167,\"end\":2167,\"offset\":4205337,\"type\":\"offset\"},{\"start\":2198,\"end\":2198,\"offset\":4205343,\"type\":\"offset\"},{\"start\":2224,\"end\":2593,\"offset\":4205343,\"type\":\"offset\"},{\"start\":2993,\"end\":3728,\"offset\":4205343,\"type\":\"offset\"},{\"start\":4494,\"end\":5455,\"offset\":4205343,\"type\":\"offset\"},{\"start\":6447,\"end\":6878,\"offset\":4205343,\"type\":\"offset\"},{\"start\":7340,\"end\":7586,\"offset\":4205343,\"type\":\"offset\"},{\"start\":7863,\"end\":8112,\"offset\":4205343,\"type\":\"offset\"},{\"start\":8392,\"end\":8698,\"offset\":4205343,\"type\":\"offset\"},{\"start\":9035,\"end\":9445,\"offset\":4205343,\"type\":\"offset\"},{\"start\":9886,\"end\":10263,\"offset\":4205343,\"type\":\"offset\"}],\"code\":\"int dbg.calculate_Zodd_and_Zeven (int esi, int edx) {\\n    loc_0x402950:\\n        // CALL XREFS from dbg.main @ 0x400f4b(x), 0x4016aa(x)\\n        push  (r12)   // calculate_Zodd_and_Zeven.c:49 // void calculate_Zodd_and_Zeven(double * Zodd,double * Zeven,double * Zo,double w,double H,double s,double er)//\\n        push  (rbp)\\n        r12 = rdi     // arg1\\n        push  (rbx)\\n        rbp = rdx     // arg3\\n        rbx = rsi     // arg2\\n        rsp -= 0x30\\n        qword [var_8h] = xmm3 // arg10\\n        movapd xmm3,mm0 // calculate_Zodd_and_Zeven.c:51 // arg7\\n        qword [var_18h] = xmm0 // arg7\\n        divsd xmm3,mm1\\n        qword [var_20h] = xmm2 // calculate_Zodd_and_Zeven.c:49 // arg9\\n        qword [var_10h] = xmm1 // calculate_Zodd_and_Zeven.c:51 // arg8\\n        xmm0 = qword [0x00404728] // [0x404728:8]=0x3ff921fb54442d18\\n        mulsd xmm0,xmm0\\n        sym.imp.tanh  ()\\n        // floating_point tanh(?)\\n        xmm2 = qword [var_20h]\\n        xmm4 = qword [var_18h]\\n        qword [rsp] = xmm0\\n        addsd xmm4,mm2\\n        xmm0 = qword [0x00404728] // [0x404728:8]=0x3ff921fb54442d18\\n        xmm1 = qword [var_10h]\\n        mulsd xmm0,xmm0\\n        divsd xmm0,mm1\\n        sym.imp.tanh  ()\\n        // floating_point tanh(?)\\n        xmm3 = qword [rsp]\\n        xmm1 = qword [0x004046d8] // calculate_Zodd_and_Zeven.c:54 // [0x4046d8:8]=0x3ff0000000000000\\n        movapd xmm4,mm3 // calculate_Zodd_and_Zeven.c:51\\n        divsd xmm3,mm0 // calculate_Zodd_and_Zeven.c:52\\n        movapd xmm7,mm1 // calculate_Zodd_and_Zeven.c:54\\n        mulsd xmm4,xmm4 // calculate_Zodd_and_Zeven.c:51\\n        qword [rsp] = xmm3 // calculate_Zodd_and_Zeven.c:52\\n        movapd xmm0,mm4 // calculate_Zodd_and_Zeven.c:54\\n        mulsd xmm0,xmm0\\n        subsd xmm7,mm0\\n        sqrtsd xmm2,mm7\\n        ucomisd xmm2,mm2\\n        movapd xmm0,mm7\\n        jp 0x402afe   // likely\\n            \\n    loc_0x402afe:\\n        // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x4029fc(x)\\n        qword [var_18h] = xmm1\\n        qword [var_10h] = xmm4\\n        sym.imp.sqrt  () // calculate_Zodd_and_Zeven.c:54\\n        // floating_point sqrt(?)\\n        xmm1 = qword [var_18h]\\n        movapd xmm2,mm0\\n        xmm4 = qword [var_10h]\\n        goto loc_0x402a02             // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b1f(x)\\n             xmm6 = qword [rsp]       // calculate_Zodd_and_Zeven.c:55\\n             movapd xmm0,mm6\\n             mulsd xmm0,xmm0\\n             subsd xmm1,mm0\\n             sqrtsd xmm3,mm1\\n             ucomisd xmm3,mm3\\n             movapd xmm0,mm1\\n             jp 0x402b77              // unlikely\\n\\n    loc_0x00402a02: // orphan\\n             // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b1f(x)\\n             xmm6 = qword [rsp]       // calculate_Zodd_and_Zeven.c:55\\n             movapd xmm0,mm6\\n             mulsd xmm0,xmm0\\n             subsd xmm1,mm0\\n             sqrtsd xmm3,mm1\\n             ucomisd xmm3,mm3\\n             movapd xmm0,mm1\\n             jp 0x402b77              // unlikely\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b98(x)\\n         movapd xmm0,mm2          // calculate_Zodd_and_Zeven.c:57\\n         edi = 0                  // int64_t arg1\\n         qword [var_20h] = xmm3\\n         qword [var_18h] = xmm4\\n         dbg.gsl_sf_ellint_Kcomp  () // dbg.gsl_sf_ellint_Kcomp(0x0, 0x0, 0x0)\\n         xmm4 = qword [var_18h]\\n         edi = 0                  // int64_t arg1\\n         qword [var_10h] = xmm0\\n         movapd xmm0,mm4\\n         dbg.gsl_sf_ellint_Kcomp  () // dbg.gsl_sf_ellint_Kcomp(0x0, 0x0, 0x0)\\n         sqrtsd xmm1,word [var_8h]\\n         ucomisd xmm1,mm1\\n         movapd xmm5,mm0\\n         xmm3 = qword [var_20h]\\n         movapd xmm0,mm1\\n         jp 0x402b49              // likely\\n\\n    loc_0x00402a25: // orphan\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b98(x)\\n         movapd xmm0,mm2          // calculate_Zodd_and_Zeven.c:57\\n         edi = 0                  // int64_t arg1\\n         qword [var_20h] = xmm3\\n         qword [var_18h] = xmm4\\n         dbg.gsl_sf_ellint_Kcomp  () // dbg.gsl_sf_ellint_Kcomp(0x0, 0x0, 0x0)\\n         xmm4 = qword [var_18h]\\n         edi = 0                  // int64_t arg1\\n         qword [var_10h] = xmm0\\n         movapd xmm0,mm4\\n         dbg.gsl_sf_ellint_Kcomp  () // dbg.gsl_sf_ellint_Kcomp(0x0, 0x0, 0x0)\\n         sqrtsd xmm1,word [var_8h]\\n         ucomisd xmm1,mm1\\n         movapd xmm5,mm0\\n         xmm3 = qword [var_20h]\\n         movapd xmm0,mm1\\n         jp 0x402b49              // likely\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b72(x)\\n         xmm2 = qword [0x00408ee0] // [0x408ee0:8]=0x40578baf5d2ead1d\\n         edi = 0                  // calculate_Zodd_and_Zeven.c:58 // int64_t arg1\\n         mulsd xmm5,xmm5          // calculate_Zodd_and_Zeven.c:57\\n         movapd xmm0,mm3          // calculate_Zodd_and_Zeven.c:58\\n         mulsd xmm2,xmm2          // calculate_Zodd_and_Zeven.c:57\\n         qword [var_18h] = xmm1\\n         divsd xmm2,mm5\\n         qword [rbx] = xmm2\\n         dbg.gsl_sf_ellint_Kcomp  () // calculate_Zodd_and_Zeven.c:58 // dbg.gsl_sf_ellint_Kcomp(0x0, 0x0, 0x0)\\n         qword [var_10h] = xmm0\\n         edi = 0                  // int64_t arg1\\n         xmm0 = qword [rsp]\\n         dbg.gsl_sf_ellint_Kcomp  () // dbg.gsl_sf_ellint_Kcomp(0x0, 0x0, 0x0)\\n         xmm1 = qword [var_18h]\\n         movapd xmm3,mm0\\n         ucomisd xmm1,mm1\\n         movapd xmm0,mm1\\n         jp 0x402b2f              // likely\\n\\n    loc_0x00402a71: // orphan\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b72(x)\\n         xmm2 = qword [0x00408ee0] // [0x408ee0:8]=0x40578baf5d2ead1d\\n         edi = 0                  // calculate_Zodd_and_Zeven.c:58 // int64_t arg1\\n         mulsd xmm5,xmm5          // calculate_Zodd_and_Zeven.c:57\\n         movapd xmm0,mm3          // calculate_Zodd_and_Zeven.c:58\\n         mulsd xmm2,xmm2          // calculate_Zodd_and_Zeven.c:57\\n         qword [var_18h] = xmm1\\n         divsd xmm2,mm5\\n         qword [rbx] = xmm2\\n         dbg.gsl_sf_ellint_Kcomp  () // calculate_Zodd_and_Zeven.c:58 // dbg.gsl_sf_ellint_Kcomp(0x0, 0x0, 0x0)\\n         qword [var_10h] = xmm0\\n         edi = 0                  // int64_t arg1\\n         xmm0 = qword [rsp]\\n         dbg.gsl_sf_ellint_Kcomp  () // dbg.gsl_sf_ellint_Kcomp(0x0, 0x0, 0x0)\\n         xmm1 = qword [var_18h]\\n         movapd xmm3,mm0\\n         ucomisd xmm1,mm1\\n         movapd xmm0,mm1\\n         jp 0x402b2f              // likely\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b44(x)\\n         xmm2 = qword [0x00408ee0] // [0x408ee0:8]=0x40578baf5d2ead1d\\n         mulsd xmm3,xmm3\\n         mulsd xmm2,xmm2\\n         divsd xmm2,mm3\\n         movapd xmm0,mm2\\n         qword [r12] = xmm2\\n         mulsd xmm0,xmm0          // calculate_Zodd_and_Zeven.c:59\\n         sqrtsd xmm1,mm0\\n         ucomisd xmm1,mm1\\n         jp 0x402b24              // unlikely\\n\\n    loc_0x00402ac2: // orphan\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b44(x)\\n         xmm2 = qword [0x00408ee0] // [0x408ee0:8]=0x40578baf5d2ead1d\\n         mulsd xmm3,xmm3\\n         mulsd xmm2,xmm2\\n         divsd xmm2,mm3\\n         movapd xmm0,mm2\\n         qword [r12] = xmm2\\n         mulsd xmm0,xmm0          // calculate_Zodd_and_Zeven.c:59\\n         sqrtsd xmm1,mm0\\n         ucomisd xmm1,mm1\\n         jp 0x402b24              // unlikely\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b2d(x)\\n         qword [rbp] = xmm1\\n         rsp += 0x30              // calculate_Zodd_and_Zeven.c:60\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         re\\n\\n    loc_0x00402af0: // orphan\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402b2d(x)\\n         qword [rbp] = xmm1\\n         rsp += 0x30              // calculate_Zodd_and_Zeven.c:60\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         re\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402aee(x)\\n         sym.imp.sqrt  ()         // calculate_Zodd_and_Zeven.c:59\\n                                  // floating_point sqrt(?)\\n         movapd xmm1,mm0\\n         goto loc_0x402af0\\n\\n    loc_0x00402b24: // orphan\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402aee(x)\\n         sym.imp.sqrt  ()         // calculate_Zodd_and_Zeven.c:59\\n                                  // floating_point sqrt(?)\\n         movapd xmm1,mm0\\n         goto loc_0x402af0\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402ac0(x)\\n         xmm0 = qword [var_8h]    // calculate_Zodd_and_Zeven.c:58\\n         qword [rsp] = xmm3\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         xmm3 = qword [rsp]\\n         goto loc_0x402ac2\\n\\n    loc_0x00402b2f: // orphan\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402ac0(x)\\n         xmm0 = qword [var_8h]    // calculate_Zodd_and_Zeven.c:58\\n         qword [rsp] = xmm3\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         xmm3 = qword [rsp]\\n         goto loc_0x402ac2\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402a6b(x)\\n         xmm0 = qword [var_8h]    // calculate_Zodd_and_Zeven.c:57\\n         qword [var_28h] = xmm1\\n         qword [var_18h] = xmm5\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         xmm1 = qword [var_28h]\\n         xmm3 = qword [var_20h]\\n         xmm5 = qword [var_18h]\\n         goto loc_0x402a71\\n\\n    loc_0x00402b49: // orphan\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402a6b(x)\\n         xmm0 = qword [var_8h]    // calculate_Zodd_and_Zeven.c:57\\n         qword [var_28h] = xmm1\\n         qword [var_18h] = xmm5\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         xmm1 = qword [var_28h]\\n         xmm3 = qword [var_20h]\\n         xmm5 = qword [var_18h]\\n         goto loc_0x402a71\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402a1f(x)\\n         qword [var_18h] = xmm2\\n         qword [var_10h] = xmm4\\n         sym.imp.sqrt  ()         // calculate_Zodd_and_Zeven.c:55\\n                                  // floating_point sqrt(?)\\n         xmm2 = qword [var_18h]\\n         movapd xmm3,mm0\\n         xmm4 = qword [var_10h]\\n         goto loc_0x402a25\\n\\n    loc_0x00402b77: // orphan\\n         // CODE XREF from dbg.calculate_Zodd_and_Zeven @ 0x402a1f(x)\\n         qword [var_18h] = xmm2\\n         qword [var_10h] = xmm4\\n         sym.imp.sqrt  ()         // calculate_Zodd_and_Zeven.c:55\\n                                  // floating_point sqrt(?)\\n         xmm2 = qword [var_18h]\\n         movapd xmm3,mm0\\n         xmm4 = qword [var_10h]\\n         goto loc_0x402a25\\n\\n}\\n\"}\n"