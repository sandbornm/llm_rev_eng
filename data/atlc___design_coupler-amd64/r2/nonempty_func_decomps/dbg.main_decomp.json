"{\"annotations\":[{\"start\":51,\"end\":51,\"offset\":4196608,\"type\":\"offset\"},{\"start\":98,\"end\":98,\"offset\":4196608,\"type\":\"offset\"},{\"start\":180,\"end\":180,\"offset\":4196610,\"type\":\"offset\"},{\"start\":200,\"end\":200,\"offset\":4196612,\"type\":\"offset\"},{\"start\":245,\"end\":245,\"offset\":4196615,\"type\":\"offset\"},{\"start\":290,\"end\":290,\"offset\":4196617,\"type\":\"offset\"},{\"start\":310,\"end\":310,\"offset\":4196618,\"type\":\"offset\"},{\"start\":355,\"end\":355,\"offset\":4196621,\"type\":\"offset\"},{\"start\":400,\"end\":400,\"offset\":4196622,\"type\":\"offset\"},{\"start\":430,\"end\":430,\"offset\":4196624,\"type\":\"offset\"},{\"start\":460,\"end\":460,\"offset\":4196627,\"type\":\"offset\"},{\"start\":505,\"end\":505,\"offset\":4196630,\"type\":\"offset\"},{\"start\":562,\"end\":562,\"offset\":4196634,\"type\":\"offset\"},{\"start\":654,\"end\":654,\"offset\":4196642,\"type\":\"offset\"},{\"start\":746,\"end\":746,\"offset\":4196650,\"type\":\"offset\"},{\"start\":793,\"end\":793,\"offset\":4196654,\"type\":\"offset\"},{\"start\":824,\"end\":824,\"offset\":4196660,\"type\":\"offset\"},{\"start\":855,\"end\":855,\"offset\":4196666,\"type\":\"offset\"},{\"start\":909,\"end\":909,\"offset\":4196672,\"type\":\"offset\"},{\"start\":963,\"end\":963,\"offset\":4196678,\"type\":\"offset\"},{\"start\":1017,\"end\":1017,\"offset\":4196684,\"type\":\"offset\"},{\"start\":1047,\"end\":1047,\"offset\":4196690,\"type\":\"offset\"},{\"start\":1078,\"end\":1078,\"offset\":4196696,\"type\":\"offset\"},{\"start\":1132,\"end\":1132,\"offset\":4196704,\"type\":\"offset\"},{\"start\":1200,\"end\":1200,\"offset\":4196704,\"type\":\"offset\"},{\"start\":1268,\"end\":1268,\"offset\":4196704,\"type\":\"offset\"},{\"start\":1336,\"end\":1336,\"offset\":4196704,\"type\":\"offset\"},{\"start\":1387,\"end\":1387,\"offset\":4196704,\"type\":\"offset\"},{\"start\":1491,\"end\":1491,\"offset\":4196709,\"type\":\"offset\"},{\"start\":1529,\"end\":1529,\"offset\":4196712,\"type\":\"offset\"},{\"start\":1581,\"end\":1581,\"offset\":4196714,\"type\":\"offset\"},{\"start\":1643,\"end\":1643,\"offset\":4196719,\"type\":\"offset\"},{\"start\":1674,\"end\":1674,\"offset\":4196722,\"type\":\"offset\"},{\"start\":1796,\"end\":1796,\"offset\":4196728,\"type\":\"offset\"},{\"start\":1847,\"end\":1847,\"offset\":4196731,\"type\":\"offset\"},{\"start\":1878,\"end\":1878,\"offset\":4196734,\"type\":\"offset\"},{\"start\":1988,\"end\":1988,\"offset\":4196736,\"type\":\"offset\"},{\"start\":2119,\"end\":2235,\"offset\":4196736,\"type\":\"offset\"},{\"start\":2382,\"end\":2618,\"offset\":4196736,\"type\":\"offset\"},{\"start\":2885,\"end\":3328,\"offset\":4196736,\"type\":\"offset\"},{\"start\":3802,\"end\":4244,\"offset\":4196736,\"type\":\"offset\"},{\"start\":4717,\"end\":5245,\"offset\":4196736,\"type\":\"offset\"},{\"start\":5804,\"end\":6425,\"offset\":4196736,\"type\":\"offset\"},{\"start\":7077,\"end\":7317,\"offset\":4196736,\"type\":\"offset\"},{\"start\":7588,\"end\":8031,\"offset\":4196736,\"type\":\"offset\"},{\"start\":8505,\"end\":8759,\"offset\":4196736,\"type\":\"offset\"},{\"start\":9044,\"end\":9301,\"offset\":4196736,\"type\":\"offset\"},{\"start\":9589,\"end\":9935,\"offset\":4196736,\"type\":\"offset\"},{\"start\":10312,\"end\":10600,\"offset\":4196736,\"type\":\"offset\"},{\"start\":10919,\"end\":12530,\"offset\":4196736,\"type\":\"offset\"},{\"start\":14172,\"end\":14324,\"offset\":4196736,\"type\":\"offset\"},{\"start\":14507,\"end\":14665,\"offset\":4196736,\"type\":\"offset\"},{\"start\":14854,\"end\":15366,\"offset\":4196736,\"type\":\"offset\"},{\"start\":15909,\"end\":16010,\"offset\":4196736,\"type\":\"offset\"},{\"start\":16142,\"end\":17635,\"offset\":4196736,\"type\":\"offset\"},{\"start\":19159,\"end\":22591,\"offset\":4196736,\"type\":\"offset\"},{\"start\":26054,\"end\":26330,\"offset\":4196736,\"type\":\"offset\"},{\"start\":26637,\"end\":26889,\"offset\":4196736,\"type\":\"offset\"},{\"start\":27172,\"end\":29158,\"offset\":4196736,\"type\":\"offset\"},{\"start\":31175,\"end\":33107,\"offset\":4196736,\"type\":\"offset\"},{\"start\":35070,\"end\":35248,\"offset\":4196736,\"type\":\"offset\"},{\"start\":35457,\"end\":35484,\"offset\":4196736,\"type\":\"offset\"},{\"start\":35542,\"end\":35785,\"offset\":4196736,\"type\":\"offset\"},{\"start\":36059,\"end\":36644,\"offset\":4196736,\"type\":\"offset\"},{\"start\":37260,\"end\":37789,\"offset\":4196736,\"type\":\"offset\"},{\"start\":38349,\"end\":39082,\"offset\":4196736,\"type\":\"offset\"},{\"start\":39846,\"end\":40778,\"offset\":4196736,\"type\":\"offset\"},{\"start\":41741,\"end\":41953,\"offset\":4196736,\"type\":\"offset\"},{\"start\":42196,\"end\":42392,\"offset\":4196736,\"type\":\"offset\"},{\"start\":42619,\"end\":43684,\"offset\":4196736,\"type\":\"offset\"},{\"start\":44780,\"end\":44960,\"offset\":4196736,\"type\":\"offset\"},{\"start\":45171,\"end\":45908,\"offset\":4196736,\"type\":\"offset\"},{\"start\":46676,\"end\":47027,\"offset\":4196736,\"type\":\"offset\"},{\"start\":47409,\"end\":48076,\"offset\":4196736,\"type\":\"offset\"},{\"start\":48774,\"end\":49210,\"offset\":4196736,\"type\":\"offset\"},{\"start\":49677,\"end\":51443,\"offset\":4196736,\"type\":\"offset\"},{\"start\":53240,\"end\":55044,\"offset\":4196736,\"type\":\"offset\"},{\"start\":56879,\"end\":57991,\"offset\":4196736,\"type\":\"offset\"},{\"start\":59134,\"end\":59387,\"offset\":4196736,\"type\":\"offset\"},{\"start\":59671,\"end\":69581,\"offset\":4196736,\"type\":\"offset\"},{\"start\":79522,\"end\":79791,\"offset\":4196736,\"type\":\"offset\"},{\"start\":80091,\"end\":80307,\"offset\":4196736,\"type\":\"offset\"},{\"start\":80554,\"end\":89527,\"offset\":4196736,\"type\":\"offset\"},{\"start\":98531,\"end\":98871,\"offset\":4196736,\"type\":\"offset\"},{\"start\":99242,\"end\":101270,\"offset\":4196736,\"type\":\"offset\"},{\"start\":103329,\"end\":103507,\"offset\":4196736,\"type\":\"offset\"},{\"start\":103716,\"end\":103997,\"offset\":4196736,\"type\":\"offset\"},{\"start\":104309,\"end\":104714,\"offset\":4196736,\"type\":\"offset\"},{\"start\":105150,\"end\":105160,\"offset\":4196736,\"type\":\"offset\"},{\"start\":105201,\"end\":106321,\"offset\":4196736,\"type\":\"offset\"},{\"start\":107472,\"end\":107936,\"offset\":4196736,\"type\":\"offset\"},{\"start\":108431,\"end\":108718,\"offset\":4196736,\"type\":\"offset\"},{\"start\":109036,\"end\":109238,\"offset\":4196736,\"type\":\"offset\"},{\"start\":109471,\"end\":112618,\"offset\":4196736,\"type\":\"offset\"},{\"start\":115796,\"end\":116143,\"offset\":4196736,\"type\":\"offset\"},{\"start\":116521,\"end\":116771,\"offset\":4196736,\"type\":\"offset\"}],\"code\":\"int dbg.main (int esi, int edx) {\\n    loc_0x400900:\\n        // DATA XREF from entry0 @ 0x40180d(r)\\n        push  (r14)   // design_coupler.c:78 // int main(int argc,char ** argv)//\\n        push  (r13)\\n        r14d = 0      // design_coupler.c:81\\n        push  (r12)   // design_coupler.c:78\\n        push  (rbp)\\n        r12d = 0      // design_coupler.c:80\\n        push  (rbx)   // design_coupler.c:78\\n        ebp = edi     // argc\\n        rbx = rsi     // argv\\n        r13d = 0      // design_coupler.c:79\\n        rsp += 0xffffffffffffff80 // design_coupler.c:78\\n        xmm7 = qword [0x004046e0] // design_coupler.c:86 // [0x4046e0:8]=0xbff0000000000000\\n        xmm6 = qword [0x004046d8] // design_coupler.c:94 // [0x4046d8:8]=0x3ff0000000000000\\n        movapd xmm3,mm7 // design_coupler.c:86\\n        qword [var_68h] = xmm7\\n        qword [var_70h] = xmm7\\n        qword [var_78h] = xmm6 // design_coupler.c:94\\n        qword [var_58h] = xmm6 // design_coupler.c:87\\n        qword [var_10h] = xmm3 // design_coupler.c:83\\n        qword [var_8h] = xmm3\\n        qword [var_20h] = xmm3\\n        0x00400958\\n         // do {\\n    loc_0x400960:\\n        // XREFS: CODE 0x0040097e  CODE 0x00400980  CODE 0x0040099c\\n        // XREFS: CODE 0x004009b4  CODE 0x004009d4  CODE 0x004009fa\\n        // XREFS: CODE 0x00400a1c  CODE 0x00400a2d  CODE 0x00400a4c\\n        // XREFS: CODE 0x00400a5f  CODE 0x00400a6d\\n        edx = str.DeQqdCL:s:Z:H: // design_coupler.c:95 // 0x4034e9 // \\\"DeQqdCL:s:Z:H:\\\" // int64_t arg3\\n        rsi = rbx     // int64_t arg2\\n        edi = ebp     // signed int64_t arg1 // rsp\\n        dbg.get_options  () // dbg.get_options(0x178000, 0x0)\\n        var = eax - 0xffffffff\\n        if  (!var) goto loc_0x400a78 // unlikely\\n         // } while (?);\\n        }\\n        return eax;\\n    loc_0x400978:\\n        eax -= 0x3f   // design_coupler.c:96 // 63\\n        var = eax - 0x34 // 52\\n        if  (((unsigned) var) > 0) goto case.0x400980.64 // case.default.0x400980 // likely\\n    loc_0x400980:\\n        goto loc_qword [rax*8 + 0x404530] // \\\"(\\\\n@\\\" // switch table (53 cases) at 0x404530 // case.0x400980.63\\n         // (break)             // CODE XREF from dbg.main @ 0x400980(x)\\n             r14d = 1                 // design_coupler.c:103\\n\\n    loc_0x00400990: // orphan\\n             // CODE XREF from dbg.main @ 0x400980(x)\\n             r14d = 1                 // design_coupler.c:103\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         r12d = 1                 // design_coupler.c:102\\n         goto loc_0x400960        // design_coupler.c:104 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n\\n    loc_0x00400996: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         r12d = 1                 // design_coupler.c:102\\n         goto loc_0x400960        // design_coupler.c:104 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         rdi = qword [obj.my_optarg] // stdlib-float.h:28 // [0x60a558:8]=0 // const char *str\\n         esi = 0                  // char * *endptr\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         qword [var_20h] = xmm0\\n         goto loc_0x400960        // design_coupler.c:125 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n\\n    loc_0x004009a0: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         rdi = qword [obj.my_optarg] // stdlib-float.h:28 // [0x60a558:8]=0 // const char *str\\n         esi = 0                  // char * *endptr\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         qword [var_20h] = xmm0\\n         goto loc_0x400960        // design_coupler.c:125 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         rdi = qword [obj.my_optarg] // stdlib-float.h:28 // [0x60a558:8]=0 // const char *str\\n         esi = 0                  // char * *endptr\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         qword [var_8h] = xmm0\\n         goto loc_0x400960        // design_coupler.c:115 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n\\n    loc_0x004009c0: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         rdi = qword [obj.my_optarg] // stdlib-float.h:28 // [0x60a558:8]=0 // const char *str\\n         esi = 0                  // char * *endptr\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         qword [var_8h] = xmm0\\n         goto loc_0x400960        // design_coupler.c:115 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         rdi = qword [obj.my_optarg] // stdlib-float.h:28 // [0x60a558:8]=0 // const char *str\\n         esi = 0                  // char * *endptr\\n         r13d = 1                 // design_coupler.c:118\\n         sym.imp.strtod  ()       // stdlib-float.h:28\\n                                  // double strtod(-1, ?)\\n         qword [var_58h] = xmm0\\n         goto loc_0x400960        // design_coupler.c:119 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n\\n    loc_0x004009e0: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         rdi = qword [obj.my_optarg] // stdlib-float.h:28 // [0x60a558:8]=0 // const char *str\\n         esi = 0                  // char * *endptr\\n         r13d = 1                 // design_coupler.c:118\\n         sym.imp.strtod  ()       // stdlib-float.h:28\\n                                  // double strtod(-1, ?)\\n         qword [var_58h] = xmm0\\n         goto loc_0x400960        // design_coupler.c:119 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         edi = str.2002           // design_coupler.c:109 // 0x4034e4 // \\\"2002\\\" // int64_t arg1\\n         r13d = 1                 // design_coupler.c:110\\n         dbg.print_copyright  ()  // design_coupler.c:109\\n         esi = 0                  // design_coupler.c:111 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         goto loc_0x400960        // design_coupler.c:112 // case.default.0x400980 // case.default.0x400980(0x403513, 0x0, 0x0, 0x0)\\n\\n    loc_0x00400a00: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         edi = str.2002           // design_coupler.c:109 // 0x4034e4 // \\\"2002\\\" // int64_t arg1\\n         r13d = 1                 // design_coupler.c:110\\n         dbg.print_copyright  ()  // design_coupler.c:109\\n         esi = 0                  // design_coupler.c:111 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         goto loc_0x400960        // design_coupler.c:112 // case.default.0x400980 // case.default.0x400980(0x403513, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         dbg.usage_design_coupler  () // design_coupler.c:130\\n         goto loc_0x400960        // design_coupler.c:131 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n\\n    loc_0x00400a28: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         dbg.usage_design_coupler  () // design_coupler.c:130\\n         goto loc_0x400960        // design_coupler.c:131 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         rdi = qword [obj.my_optarg] // stdlib-float.h:28 // [0x60a558:8]=0 // const char *str\\n         esi = 0                  // char * *endptr\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         qword [var_10h] = xmm0\\n         goto loc_0x400960        // design_coupler.c:122 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n\\n    loc_0x00400a38: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         rdi = qword [obj.my_optarg] // stdlib-float.h:28 // [0x60a558:8]=0 // const char *str\\n         esi = 0                  // char * *endptr\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         qword [var_10h] = xmm0\\n         goto loc_0x400960        // design_coupler.c:122 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         dword [obj.verbose] -= 1 // design_coupler.c:127 // [0x60a528:4]=2\\n         goto loc_0x400960        // design_coupler.c:128 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n\\n    loc_0x00400a58: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         dword [obj.verbose] -= 1 // design_coupler.c:127 // [0x60a528:4]=2\\n         goto loc_0x400960        // design_coupler.c:128 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         dbg.give_examples_of_using_design_coupler  () // design_coupler.c:106\\n         goto loc_0x400960        // design_coupler.c:107 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n\\n    loc_0x00400a68: // orphan\\n         // CODE XREF from dbg.main @ 0x400980(x)\\n         dbg.give_examples_of_using_design_coupler  () // design_coupler.c:106\\n         goto loc_0x400960        // design_coupler.c:107 // case.default.0x400980 // case.default.0x400980(0x0, 0x0, 0x0, 0x0)\\n         // CODE XREF from dbg.main @ 0x400972(x)\\n         ebp -= dword [obj.my_optind] // design_coupler.c:134 // [0x60a530:4]=1\\n         xmm7 = qword [var_10h]\\n         xmm3 = qword [var_8h]\\n         qword [var_28h] = xmm7\\n         qword [var_50h] = xmm3\\n         var = ebp - 3            // 3\\n         if  (!var) goto loc_0x400aaf // unlikely\\n\\n    loc_0x00400a78: // orphan\\n         // CODE XREF from dbg.main @ 0x400972(x)\\n         ebp -= dword [obj.my_optind] // design_coupler.c:134 // [0x60a530:4]=1\\n         xmm7 = qword [var_10h]\\n         xmm3 = qword [var_8h]\\n         qword [var_28h] = xmm7\\n         qword [var_50h] = xmm3\\n         var = ebp - 3            // 3\\n         if  (!var) goto loc_0x400aaf // unlikely\\n         dbg.usage_design_coupler  () // design_coupler.c:136\\n         esi = 8                  // design_coupler.c:137 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n\\n    loc_0x00400a9b: // orphan\\n         dbg.usage_design_coupler  () // design_coupler.c:136\\n         esi = 8                  // design_coupler.c:137 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         // CODE XREF from dbg.main @ 0x400a99(x)\\n         rax = dword [obj.my_optind] // design_coupler.c:139 // [0x60a530:4]=1\\n         esi = 0                  // stdlib-float.h:28 // char * *endptr\\n         rdi = qword [rbx + rax*8] // const char *str\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         rax = dword [obj.my_optind] // design_coupler.c:140 // [0x60a530:4]=1\\n         esi = 0                  // stdlib-float.h:28 // char * *endptr\\n         qword [rsp] = xmm0\\n         rax += 1                 // design_coupler.c:140\\n         rdi = qword [rbx + rax*8] // stdlib-float.h:28 // const char *str\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         rax = dword [obj.my_optind] // design_coupler.c:141 // [0x60a530:4]=1\\n         esi = 0                  // stdlib-float.h:28 // char * *endptr\\n         qword [var_30h] = xmm0\\n         rax += 2                 // design_coupler.c:141\\n         rdi = qword [rbx + rax*8] // stdlib-float.h:28 // const char *str\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         xmm4 = qword [var_30h]   // design_coupler.c:142\\n         qword [var_18h] = xmm0   // stdlib-float.h:28\\n         xmm1 ^= xmm1             // design_coupler.c:143\\n         addsd xmm0,mm4           // design_coupler.c:142\\n         ucomisd xmm1,word [rsp + 0x10] // design_coupler.c:143\\n         mulsd xmm0,xmm0          // design_coupler.c:142\\n         qword [var_40h] = xmm0\\n         if  (((unsigned) var) > 0) goto 0x4013b3 // design_coupler.c:143 // likely\\n\\n    loc_0x00400aaf: // orphan\\n         // CODE XREF from dbg.main @ 0x400a99(x)\\n         rax = dword [obj.my_optind] // design_coupler.c:139 // [0x60a530:4]=1\\n         esi = 0                  // stdlib-float.h:28 // char * *endptr\\n         rdi = qword [rbx + rax*8] // const char *str\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         rax = dword [obj.my_optind] // design_coupler.c:140 // [0x60a530:4]=1\\n         esi = 0                  // stdlib-float.h:28 // char * *endptr\\n         qword [rsp] = xmm0\\n         rax += 1                 // design_coupler.c:140\\n         rdi = qword [rbx + rax*8] // stdlib-float.h:28 // const char *str\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         rax = dword [obj.my_optind] // design_coupler.c:141 // [0x60a530:4]=1\\n         esi = 0                  // stdlib-float.h:28 // char * *endptr\\n         qword [var_30h] = xmm0\\n         rax += 2                 // design_coupler.c:141\\n         rdi = qword [rbx + rax*8] // stdlib-float.h:28 // const char *str\\n         sym.imp.strtod  ()\\n                                  // double strtod(-1, ?)\\n         xmm4 = qword [var_30h]   // design_coupler.c:142\\n         qword [var_18h] = xmm0   // stdlib-float.h:28\\n         xmm1 ^= xmm1             // design_coupler.c:143\\n         addsd xmm0,mm4           // design_coupler.c:142\\n         ucomisd xmm1,word [rsp + 0x10] // design_coupler.c:143\\n         mulsd xmm0,xmm0          // design_coupler.c:142\\n         qword [var_40h] = xmm0\\n         if  (((unsigned) var) > 0) goto 0x4013b3 // design_coupler.c:143 // likely\\n         // CODE XREF from dbg.main @ 0x4013cb(x)\\n         ucomisd xmm1,word [rsp]  // design_coupler.c:146\\n         jae 0x4013d0             // likely\\n\\n    loc_0x00400b26: // orphan\\n         // CODE XREF from dbg.main @ 0x4013cb(x)\\n         ucomisd xmm1,word [rsp]  // design_coupler.c:146\\n         jae 0x4013d0             // likely\\n         // CODE XREF from dbg.main @ 0x4015a7(x)\\n         ucomisd xmm4,word [rsp + 0x18] // design_coupler.c:169\\n         jae 0x401182             // likely\\n\\n    loc_0x00400b31: // orphan\\n         // CODE XREF from dbg.main @ 0x4015a7(x)\\n         ucomisd xmm4,word [rsp + 0x18] // design_coupler.c:169\\n         jae 0x401182             // likely\\n         // CODE XREF from dbg.main @ 0x40138f(x)\\n         xmm0 = qword [var_20h]   // design_coupler.c:192\\n         xmm3 = qword [0x004046e8] // [0x4046e8:8]=0x4049000000000000\\n         movapd xmm2,mm0\\n         ucomisd xmm1,word [rsp + 8] // design_coupler.c:193\\n         cmpnltsd xmm2,mm1        // design_coupler.c:192\\n         andpd xmm0,mm2\\n         andnpd xmm2,mm3\\n         orpd xmm2,mm0\\n         qword [var_38h] = xmm2\\n         if  (((unsigned) var) > 0) goto 0x401394 // design_coupler.c:193 // unlikely\\n\\n    loc_0x00400b3d: // orphan\\n         // CODE XREF from dbg.main @ 0x40138f(x)\\n         xmm0 = qword [var_20h]   // design_coupler.c:192\\n         xmm3 = qword [0x004046e8] // [0x4046e8:8]=0x4049000000000000\\n         movapd xmm2,mm0\\n         ucomisd xmm1,word [rsp + 8] // design_coupler.c:193\\n         cmpnltsd xmm2,mm1        // design_coupler.c:192\\n         andpd xmm0,mm2\\n         andnpd xmm2,mm3\\n         orpd xmm2,mm0\\n         qword [var_38h] = xmm2\\n         if  (((unsigned) var) > 0) goto 0x401394 // design_coupler.c:193 // unlikely\\n         xmm5 = qword [0x00404710] // [0x404710:8]=0x4052c00000000000\\n         qword [var_8h] = xmm5\\n\\n    loc_0x00400b72: // orphan\\n         xmm5 = qword [0x00404710] // [0x404710:8]=0x4052c00000000000\\n         qword [var_8h] = xmm5\\n         // CODE XREF from dbg.main @ 0x4013ae(x)\\n         xmm1 = qword [rsp]       // design_coupler.c:220\\n         xmm0 = qword [0x00404720] // [0x404720:8]=0x4024000000000000\\n         divsd xmm1,word [0x00404718]\\n         qword [var_48h] = xmm4\\n         sym.imp.pow  ()\\n                                  // floating_point pow(?, ?)\\n         xmm3 = qword [var_8h]    // design_coupler.c:222\\n         xmm6 = qword [0x00404728] // design_coupler.c:231 // [0x404728:8]=0x3ff921fb54442d18\\n         divsd xmm3,word [var_50h] // design_coupler.c:222\\n         qword [var_10h] = xmm0   // design_coupler.c:220\\n         mulsd xmm6,xmm6          // design_coupler.c:231\\n         qword [var_30h] = xmm3   // design_coupler.c:222\\n         movapd xmm0,mm6          // design_coupler.c:231\\n         divsd xmm0,mm3\\n         sym.imp.sin  ()\\n                                  // floating_point sin(?)\\n         xmm5 = qword [0x004046d8] // [0x4046d8:8]=0x3ff0000000000000\\n         xmm4 = qword [var_48h]   // design_coupler.c:233\\n         divsd xmm5,mm0           // design_coupler.c:231\\n         movapd xmm1,mm5\\n         xmm5 = qword [0x004046d8] // design_coupler.c:220 // [0x4046d8:8]=0x3ff0000000000000\\n         divsd xmm5,word [var_10h]\\n         mulsd xmm1,xmm1          // design_coupler.c:231\\n         ucomisd xmm1,word [0x004046d8] // design_coupler.c:233\\n         qword [var_20h] = xmm1   // design_coupler.c:231\\n         if  (((unsigned) var) <= 0) goto 0x400ce6 // design_coupler.c:233 // unlikely\\n\\n    loc_0x00400b80: // orphan\\n         // CODE XREF from dbg.main @ 0x4013ae(x)\\n         xmm1 = qword [rsp]       // design_coupler.c:220\\n         xmm0 = qword [0x00404720] // [0x404720:8]=0x4024000000000000\\n         divsd xmm1,word [0x00404718]\\n         qword [var_48h] = xmm4\\n         sym.imp.pow  ()\\n                                  // floating_point pow(?, ?)\\n         xmm3 = qword [var_8h]    // design_coupler.c:222\\n         xmm6 = qword [0x00404728] // design_coupler.c:231 // [0x404728:8]=0x3ff921fb54442d18\\n         divsd xmm3,word [var_50h] // design_coupler.c:222\\n         qword [var_10h] = xmm0   // design_coupler.c:220\\n         mulsd xmm6,xmm6          // design_coupler.c:231\\n         qword [var_30h] = xmm3   // design_coupler.c:222\\n         movapd xmm0,mm6          // design_coupler.c:231\\n         divsd xmm0,mm3\\n         sym.imp.sin  ()\\n                                  // floating_point sin(?)\\n         xmm5 = qword [0x004046d8] // [0x4046d8:8]=0x3ff0000000000000\\n         xmm4 = qword [var_48h]   // design_coupler.c:233\\n         divsd xmm5,mm0           // design_coupler.c:231\\n         movapd xmm1,mm5\\n         xmm5 = qword [0x004046d8] // design_coupler.c:220 // [0x4046d8:8]=0x3ff0000000000000\\n         divsd xmm5,word [var_10h]\\n         mulsd xmm1,xmm1          // design_coupler.c:231\\n         ucomisd xmm1,word [0x004046d8] // design_coupler.c:233\\n         qword [var_20h] = xmm1   // design_coupler.c:231\\n         if  (((unsigned) var) <= 0) goto 0x400ce6 // design_coupler.c:233 // unlikely\\n         rcx = qword [obj.stderr] // design_coupler.c:235 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x10               // 16 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._nERROR_n      // 0x40354b // \\\"\\\\n*****ERROR****\\\\n\\\" // const void *ptr\\n         qword [var_10h] = xmm4\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x52452a2a2a2a2a0a, 0x00000000, -1, ?)\\n         rdi = qword [obj.stderr] // design_coupler.c:236 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         xmm1 = qword [var_50h]\\n         xmm0 = qword [rsp]\\n         esi = str.Sorry__you_cant_make_a__6.3f_dB_coupler_with_a_coupled_line_of__7.4f_m_long._n // 0x403a98 // \\\"Sorry, you can't make a %6.3f dB coupler with a coupled line of %7.4f m long.\\\\n\\\" // const char *format\\n         eax = 2\\n         sym.imp.fprintf  ()\\n                                  // int fprintf(?, \\\"Sorry, you can't make a %6.3f dB coupler with a coupled line of %7.4f m long.\\\\n\\\", ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:237 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x4c               // 'L' // 76 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.Either_couple_off_a_smaller_fraction_of_the_main_power_to_the_coupled_port__n // 0x403ae8 // \\\"Either couple off a smaller fraction of the main power to the coupled port,\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6320726568746945, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:238 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x3e               // '>' // 62 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.or_make_the_line_closer_to_an_odd_multiple_of_a_quarter_wave._n // 0x403b38 // \\\"or make the line closer to an odd multiple of a quarter wave.\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20656b616d20726f, 0x00000000, -1, ?)\\n         xmm7 = qword [var_40h]   // design_coupler.c:239\\n         rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         xmm0 = qword [var_8h]\\n         esi = str.Odd_mulitples_of_a_quarter_wave_are:__.4f___.4f___.4f___.4f_.._m_n // 0x403b78 // \\\"Odd mulitples of a quarter wave are: %.4f, %.4f, %.4f, %.4f .. m\\\\n\\\" // const char *format\\n         xmm3 = qword [0x00404730] // [0x404730:8]=0x4080680000000000\\n         eax = 4\\n         xmm2 = qword [0x00404738] // [0x404738:8]=0x4077700000000000\\n         xmm1 = qword [0x00404740] // [0x404740:8]=0x406c200000000000\\n         divsd xmm0,mm7\\n         divsd xmm3,mm7\\n         divsd xmm2,mm7\\n         divsd xmm1,mm7\\n         sym.imp.fprintf  ()\\n                                  // int fprintf(?, \\\"Odd mulitples of a quarter wave are: %.4f, %.4f, %.4f, %.4f .. m\\\\n\\\", ?)\\n         esi = 0x3a               // design_coupler.c:240 // ':' // 58 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         xmm4 = qword [var_10h]\\n\\n    loc_0x00400c0f: // orphan\\n         rcx = qword [obj.stderr] // design_coupler.c:235 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x10               // 16 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._nERROR_n      // 0x40354b // \\\"\\\\n*****ERROR****\\\\n\\\" // const void *ptr\\n         qword [var_10h] = xmm4\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x52452a2a2a2a2a0a, 0x00000000, -1, ?)\\n         rdi = qword [obj.stderr] // design_coupler.c:236 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         xmm1 = qword [var_50h]\\n         xmm0 = qword [rsp]\\n         esi = str.Sorry__you_cant_make_a__6.3f_dB_coupler_with_a_coupled_line_of__7.4f_m_long._n // 0x403a98 // \\\"Sorry, you can't make a %6.3f dB coupler with a coupled line of %7.4f m long.\\\\n\\\" // const char *format\\n         eax = 2\\n         sym.imp.fprintf  ()\\n                                  // int fprintf(?, \\\"Sorry, you can't make a %6.3f dB coupler with a coupled line of %7.4f m long.\\\\n\\\", ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:237 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x4c               // 'L' // 76 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.Either_couple_off_a_smaller_fraction_of_the_main_power_to_the_coupled_port__n // 0x403ae8 // \\\"Either couple off a smaller fraction of the main power to the coupled port,\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6320726568746945, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:238 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x3e               // '>' // 62 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.or_make_the_line_closer_to_an_odd_multiple_of_a_quarter_wave._n // 0x403b38 // \\\"or make the line closer to an odd multiple of a quarter wave.\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20656b616d20726f, 0x00000000, -1, ?)\\n         xmm7 = qword [var_40h]   // design_coupler.c:239\\n         rdi = qword [obj.stderr] // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         xmm0 = qword [var_8h]\\n         esi = str.Odd_mulitples_of_a_quarter_wave_are:__.4f___.4f___.4f___.4f_.._m_n // 0x403b78 // \\\"Odd mulitples of a quarter wave are: %.4f, %.4f, %.4f, %.4f .. m\\\\n\\\" // const char *format\\n         xmm3 = qword [0x00404730] // [0x404730:8]=0x4080680000000000\\n         eax = 4\\n         xmm2 = qword [0x00404738] // [0x404738:8]=0x4077700000000000\\n         xmm1 = qword [0x00404740] // [0x404740:8]=0x406c200000000000\\n         divsd xmm0,mm7\\n         divsd xmm3,mm7\\n         divsd xmm2,mm7\\n         divsd xmm1,mm7\\n         sym.imp.fprintf  ()\\n                                  // int fprintf(?, \\\"Odd mulitples of a quarter wave are: %.4f, %.4f, %.4f, %.4f .. m\\\\n\\\", ?)\\n         esi = 0x3a               // design_coupler.c:240 // ':' // 58 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         xmm4 = qword [var_10h]\\n         // CODE XREF from dbg.main @ 0x400c09(x)\\n         xmm0 = qword [0x004046d8] // design_coupler.c:246 // [0x4046d8:8]=0x3ff0000000000000\\n         subsd xmm0,word [var_20h]\\n         sqrtsd xmm2,mm0\\n         ucomisd xmm2,mm2\\n         jp 0x4017d6              // unlikely\\n\\n    loc_0x00400ce6: // orphan\\n         // CODE XREF from dbg.main @ 0x400c09(x)\\n         xmm0 = qword [0x004046d8] // design_coupler.c:246 // [0x4046d8:8]=0x3ff0000000000000\\n         subsd xmm0,word [var_20h]\\n         sqrtsd xmm2,mm0\\n         ucomisd xmm2,mm2\\n         jp 0x4017d6              // unlikely\\n         // CODE XREF from dbg.main @ 0x4017eb(x)\\n         xmm1 = qword [0x004046d8] // [0x4046d8:8]=0x3ff0000000000000\\n         addsd xmm1,word [var_20h]\\n         sqrtsd xmm0,mm1\\n         ucomisd xmm0,mm0\\n         jp 0x4017b0              // unlikely\\n\\n    loc_0x00400d02: // orphan\\n         // CODE XREF from dbg.main @ 0x4017eb(x)\\n         xmm1 = qword [0x004046d8] // [0x4046d8:8]=0x3ff0000000000000\\n         addsd xmm1,word [var_20h]\\n         sqrtsd xmm0,mm1\\n         ucomisd xmm0,mm0\\n         jp 0x4017b0              // unlikely\\n         // CODE XREF from dbg.main @ 0x4017d1(x)\\n         xmm5 = qword [var_38h]\\n         edi = str._nFor_a__.3f_dB__.3f_Ohm_coupler_with_a_length_of__.4f_m__n // design_coupler.c:249 // 0x403bc0 // \\\"\\\\nFor a %.3f dB %.3f Ohm coupler with a length of %.4f m,\\\\n\\\" // const char *format\\n         eax = 3\\n         qword [var_40h] = xmm4\\n         mulsd xmm2,xmm2          // design_coupler.c:246\\n         movapd xmm1,mm5          // design_coupler.c:249\\n         divsd xmm2,mm0           // design_coupler.c:246\\n         movapd xmm0,mm5          // design_coupler.c:247\\n         mulsd xmm0,xmm0\\n         qword [var_8h] = xmm2\\n         movapd xmm3,mm0\\n         xmm0 = qword [rsp]       // design_coupler.c:249\\n         divsd xmm3,mm2           // design_coupler.c:247\\n         xmm2 = qword [var_50h]   // design_coupler.c:249\\n         qword [var_10h] = xmm3   // design_coupler.c:247\\n         sym.imp.printf  ()       // design_coupler.c:249\\n                                  // int printf(\\\"\\\\nFor a %.3f dB %.3f Ohm coupler with a length of %.4f m,\\\\n\\\")\\n         xmm0 = qword [var_8h]    // design_coupler.c:250\\n         edi = str.you_need_to_have_an_odd_mode_impedance_Zodd_of__.3f_Ohms_and_n // 0x403c00 // \\\"you need to have an odd-mode impedance Zodd of %.3f Ohms and\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"you need to have an odd-mode impedance Zodd of %.3f Ohms and\\\\n\\\")\\n         xmm0 = qword [var_10h]   // design_coupler.c:251\\n         edi = str.an_even_mode_impedance_Zeven_of__.3f_Ohms_n_n // 0x403c40 // \\\"an even mode impedance Zeven of %.3f Ohms\\\\n\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"an even mode impedance Zeven of %.3f Ohms\\\\n\\\\n\\\")\\n         eax = dword [obj.verbose] // design_coupler.c:252 // [0x60a528:4]=1\\n         xmm4 = qword [var_40h]\\n         var = eax & eax\\n         if  (var <= 0) goto loc_0x400e04 // unlikely\\n\\n    loc_0x00400d1e: // orphan\\n         // CODE XREF from dbg.main @ 0x4017d1(x)\\n         xmm5 = qword [var_38h]\\n         edi = str._nFor_a__.3f_dB__.3f_Ohm_coupler_with_a_length_of__.4f_m__n // design_coupler.c:249 // 0x403bc0 // \\\"\\\\nFor a %.3f dB %.3f Ohm coupler with a length of %.4f m,\\\\n\\\" // const char *format\\n         eax = 3\\n         qword [var_40h] = xmm4\\n         mulsd xmm2,xmm2          // design_coupler.c:246\\n         movapd xmm1,mm5          // design_coupler.c:249\\n         divsd xmm2,mm0           // design_coupler.c:246\\n         movapd xmm0,mm5          // design_coupler.c:247\\n         mulsd xmm0,xmm0\\n         qword [var_8h] = xmm2\\n         movapd xmm3,mm0\\n         xmm0 = qword [rsp]       // design_coupler.c:249\\n         divsd xmm3,mm2           // design_coupler.c:247\\n         xmm2 = qword [var_50h]   // design_coupler.c:249\\n         qword [var_10h] = xmm3   // design_coupler.c:247\\n         sym.imp.printf  ()       // design_coupler.c:249\\n                                  // int printf(\\\"\\\\nFor a %.3f dB %.3f Ohm coupler with a length of %.4f m,\\\\n\\\")\\n         xmm0 = qword [var_8h]    // design_coupler.c:250\\n         edi = str.you_need_to_have_an_odd_mode_impedance_Zodd_of__.3f_Ohms_and_n // 0x403c00 // \\\"you need to have an odd-mode impedance Zodd of %.3f Ohms and\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"you need to have an odd-mode impedance Zodd of %.3f Ohms and\\\\n\\\")\\n         xmm0 = qword [var_10h]   // design_coupler.c:251\\n         edi = str.an_even_mode_impedance_Zeven_of__.3f_Ohms_n_n // 0x403c40 // \\\"an even mode impedance Zeven of %.3f Ohms\\\\n\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"an even mode impedance Zeven of %.3f Ohms\\\\n\\\\n\\\")\\n         eax = dword [obj.verbose] // design_coupler.c:252 // [0x60a528:4]=1\\n         xmm4 = qword [var_40h]\\n         var = eax & eax\\n         if  (var <= 0) goto loc_0x400e04 // unlikely\\n         xmm1 = qword [var_38h]   // design_coupler.c:254\\n         edi = str._.3f_dB_down____________3.3f_Ohm_termination_n_n // 0x403c70 // \\\"%.3f dB down <-- ************************** ---> %3.3f Ohm termination\\\\n\\\\n\\\" // const char *format\\n         eax = 2\\n         xmm0 = qword [rsp]\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"%.3f dB down <-- ************************** ---> %3.3f Ohm termination\\\\n\\\\n\\\")\\n         xmm0 = qword [var_38h]   // design_coupler.c:255\\n         edi = str.Drive_this_port____________3.3f_Ohm_termination_n // 0x403cc0 // \\\"Drive this port --> ************************** ---> %3.3f Ohm termination\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"Drive this port --> ************************** ---> %3.3f Ohm termination\\\\n\\\")\\n         xmm0 = qword [var_50h]   // design_coupler.c:256\\n         edi = str.______________________________8.4f_m________n // 0x403d10 // \\\"                    <------- %8.4f m ----->\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"                    <------- %8.4f m ----->\\\\n\\\")\\n         edi = str._nDrive_Port_1__coupler_out_of_port_2_and_terminate_the_other_ports_in_Zo // design_coupler.c:257 // 0x403d40 // \\\"\\\\nDrive Port 1, coupler out of port 2 and terminate the other ports in Zo\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"\\\\nDrive Port 1, coupler out of port 2 and terminate the other ports in Zo\\\")\\n         edi = str.Such_a_coupler_will_have_the_response_indicated_below._n // design_coupler.c:258 // 0x403d90 // \\\"Such a coupler will have the response indicated below.\\\\n\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Such a coupler will have the response indicated below.\\\\n\\\")\\n         xmm4 = qword [var_40h]\\n\\n    loc_0x00400da6: // orphan\\n         xmm1 = qword [var_38h]   // design_coupler.c:254\\n         edi = str._.3f_dB_down____________3.3f_Ohm_termination_n_n // 0x403c70 // \\\"%.3f dB down <-- ************************** ---> %3.3f Ohm termination\\\\n\\\\n\\\" // const char *format\\n         eax = 2\\n         xmm0 = qword [rsp]\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"%.3f dB down <-- ************************** ---> %3.3f Ohm termination\\\\n\\\\n\\\")\\n         xmm0 = qword [var_38h]   // design_coupler.c:255\\n         edi = str.Drive_this_port____________3.3f_Ohm_termination_n // 0x403cc0 // \\\"Drive this port --> ************************** ---> %3.3f Ohm termination\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"Drive this port --> ************************** ---> %3.3f Ohm termination\\\\n\\\")\\n         xmm0 = qword [var_50h]   // design_coupler.c:256\\n         edi = str.______________________________8.4f_m________n // 0x403d10 // \\\"                    <------- %8.4f m ----->\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"                    <------- %8.4f m ----->\\\\n\\\")\\n         edi = str._nDrive_Port_1__coupler_out_of_port_2_and_terminate_the_other_ports_in_Zo // design_coupler.c:257 // 0x403d40 // \\\"\\\\nDrive Port 1, coupler out of port 2 and terminate the other ports in Zo\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"\\\\nDrive Port 1, coupler out of port 2 and terminate the other ports in Zo\\\")\\n         edi = str.Such_a_coupler_will_have_the_response_indicated_below._n // design_coupler.c:258 // 0x403d90 // \\\"Such a coupler will have the response indicated below.\\\\n\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Such a coupler will have the response indicated below.\\\\n\\\")\\n         xmm4 = qword [var_40h]\\n         // CODE XREF from dbg.main @ 0x400da4(x)\\n         xmm7 = qword [var_18h]   // design_coupler.c:261\\n         ucomisd xmm7,mm4\\n         jae 0x400e2a             // likely\\n\\n    loc_0x00400e04: // orphan\\n         // CODE XREF from dbg.main @ 0x400da4(x)\\n         xmm7 = qword [var_18h]   // design_coupler.c:261\\n         ucomisd xmm7,mm4\\n         jae 0x400e2a             // likely\\n         goto loc_0x400e88\\n\\n    loc_0x00400e10: // orphan\\n         goto loc_0x400e88\\n         // CODE XREFS from dbg.main @ 0x400e5d(x), 0x400e83(x)\\n         addsd xmm4,word [var_28h] // design_coupler.c:261\\n         xmm7 = qword [var_18h]\\n         ucomisd xmm7,mm4\\n         if  (((unsigned) var) < 0) goto 0x400e88 // unlikely\\n\\n    loc_0x00400e18: // orphan\\n         // CODE XREFS from dbg.main @ 0x400e5d(x), 0x400e83(x)\\n         addsd xmm4,word [var_28h] // design_coupler.c:261\\n         xmm7 = qword [var_18h]\\n         ucomisd xmm7,mm4\\n         if  (((unsigned) var) < 0) goto 0x400e88 // unlikely\\n         // CODE XREF from dbg.main @ 0x400e0e(x)\\n         xmm0 = qword [0x00404728] // design_coupler.c:263 // [0x404728:8]=0x3ff921fb54442d18\\n         qword [rsp] = xmm4\\n         mulsd xmm0,xmm0\\n         divsd xmm0,word [var_30h]\\n         sym.imp.sin  ()\\n                                  // floating_point sin(?)\\n         mulsd xmm0,xmm0\\n         sym.imp.log10  ()\\n                                  // floating_point log10(?)\\n         var = dword [obj.verbose] - 2 // design_coupler.c:264 // [0x60a528:4]=1\\n         xmm4 = qword [rsp]\\n         if  (var) goto loc_0x400e18 // likely\\n\\n    loc_0x00400e2a: // orphan\\n         // CODE XREF from dbg.main @ 0x400e0e(x)\\n         xmm0 = qword [0x00404728] // design_coupler.c:263 // [0x404728:8]=0x3ff921fb54442d18\\n         qword [rsp] = xmm4\\n         mulsd xmm0,xmm0\\n         divsd xmm0,word [var_30h]\\n         sym.imp.sin  ()\\n                                  // floating_point sin(?)\\n         mulsd xmm0,xmm0\\n         sym.imp.log10  ()\\n                                  // floating_point log10(?)\\n         var = dword [obj.verbose] - 2 // design_coupler.c:264 // [0x60a528:4]=1\\n         xmm4 = qword [rsp]\\n         if  (var) goto loc_0x400e18 // likely\\n         xmm1 = qword [0x00404718] // design_coupler.c:265 // [0x404718:8]=0x4034000000000000\\n         edi = str.f___7.3f_MHz___coupling_is__.3f_dB_down_on_the_main_arm_n // 0x403dc8 // \\\"f = %7.3f MHz   coupling is %.3f dB down on the main arm\\\\n\\\" // const char *format\\n         eax = 2\\n         mulsd xmm1,xmm1\\n         movapd xmm0,mm4\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"f = %7.3f MHz   coupling is %.3f dB down on the main arm\\\\n\\\")\\n         xmm4 = qword [rsp]\\n         goto loc_0x400e18\\n\\n    loc_0x00400e5f: // orphan\\n         xmm1 = qword [0x00404718] // design_coupler.c:265 // [0x404718:8]=0x4034000000000000\\n         edi = str.f___7.3f_MHz___coupling_is__.3f_dB_down_on_the_main_arm_n // 0x403dc8 // \\\"f = %7.3f MHz   coupling is %.3f dB down on the main arm\\\\n\\\" // const char *format\\n         eax = 2\\n         mulsd xmm1,xmm1\\n         movapd xmm0,mm4\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"f = %7.3f MHz   coupling is %.3f dB down on the main arm\\\\n\\\")\\n         xmm4 = qword [rsp]\\n         goto loc_0x400e18\\n         // CODE XREFS from dbg.main @ 0x400e10(x), 0x400e28(x)\\n         xmm0 = qword [var_50h]   // design_coupler.c:267\\n         edi = str._nYou_may_force_the_length_to_be_any_value_you_want_using_the__L_option___it_does_nnot_have_to_be__.4f_metres_long_n // 0x4044b8 // \\\"\\\\nYou may force the length to be any value you want using the -L option - it does\\\\nnot have to be %.4f metres long\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"\\\\nYou may force the length to be any value you want using the -L option - it does\\\\nnot have to be %.4f metres long\\\\n\\\")\\n         var = r12d & r12d        // design_coupler.c:268\\n         if  (!var) goto loc_0x401155 // likely\\n\\n    loc_0x00400e88: // orphan\\n         // CODE XREFS from dbg.main @ 0x400e10(x), 0x400e28(x)\\n         xmm0 = qword [var_50h]   // design_coupler.c:267\\n         edi = str._nYou_may_force_the_length_to_be_any_value_you_want_using_the__L_option___it_does_nnot_have_to_be__.4f_metres_long_n // 0x4044b8 // \\\"\\\\nYou may force the length to be any value you want using the -L option - it does\\\\nnot have to be %.4f metres long\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"\\\\nYou may force the length to be any value you want using the -L option - it does\\\\nnot have to be %.4f metres long\\\\n\\\")\\n         var = r12d & r12d        // design_coupler.c:268\\n         if  (!var) goto loc_0x401155 // likely\\n         edi = str.Please_be_patient___this_will_take_a_few_minutes_or_so // design_coupler.c:277 // 0x403ee0 // \\\"Please be patient - this will take a few minutes or so\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Please be patient - this will take a few minutes or so\\\")\\n         xmm5 = qword [0x004046f0] // design_coupler.c:278 // [0x4046f0:8]=0x3f947ae147ae147b\\n         xmm7 = qword [0x004046e0] // design_coupler.c:88 // [0x4046e0:8]=0xbff0000000000000\\n         qword [var_20h] = xmm5   // design_coupler.c:278\\n         xmm5 = qword [0x004046f8] // design_coupler.c:84 // [0x4046f8:8]=0x46293e5939a08cea\\n         qword [var_30h] = xmm7   // design_coupler.c:88\\n         qword [var_28h] = xmm7\\n         qword [var_48h] = xmm7\\n         qword [var_40h] = xmm7   // design_coupler.c:86\\n         qword [var_38h] = xmm7\\n         qword [var_18h] = xmm5   // design_coupler.c:84\\n         \\n\\n    loc_0x00400ea6: // orphan\\n         edi = str.Please_be_patient___this_will_take_a_few_minutes_or_so // design_coupler.c:277 // 0x403ee0 // \\\"Please be patient - this will take a few minutes or so\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Please be patient - this will take a few minutes or so\\\")\\n         xmm5 = qword [0x004046f0] // design_coupler.c:278 // [0x4046f0:8]=0x3f947ae147ae147b\\n         xmm7 = qword [0x004046e0] // design_coupler.c:88 // [0x4046e0:8]=0xbff0000000000000\\n         qword [var_20h] = xmm5   // design_coupler.c:278\\n         xmm5 = qword [0x004046f8] // design_coupler.c:84 // [0x4046f8:8]=0x46293e5939a08cea\\n         qword [var_30h] = xmm7   // design_coupler.c:88\\n         qword [var_28h] = xmm7\\n         qword [var_48h] = xmm7\\n         qword [var_40h] = xmm7   // design_coupler.c:86\\n         qword [var_38h] = xmm7\\n         qword [var_18h] = xmm5   // design_coupler.c:84\\n         \\n         // CODE XREF from dbg.main @ 0x401006(x)\\n         ebx = 0x226              // design_coupler.c:192 // 550\\n         xmm4 = qword [0x004046f0] // [0x4046f0:8]=0x3f947ae147ae147b\\n         goto loc_0x400f21\\n\\n    loc_0x00400ef8: // orphan\\n         // CODE XREF from dbg.main @ 0x401006(x)\\n         ebx = 0x226              // design_coupler.c:192 // 550\\n         xmm4 = qword [0x004046f0] // [0x4046f0:8]=0x3f947ae147ae147b\\n         goto loc_0x400f21\\n         // CODE XREF from dbg.main @ 0x400f83(x)\\n         ebx -= 1                 // design_coupler.c:280\\n         addsd xmm4,word [0x004046f0]\\n         if  (!var) goto loc_0x400fe6 // unlikely\\n\\n    loc_0x00400f10: // orphan\\n         // CODE XREF from dbg.main @ 0x400f83(x)\\n         ebx -= 1                 // design_coupler.c:280\\n         addsd xmm4,word [0x004046f0]\\n         if  (!var) goto loc_0x400fe6 // unlikely\\n         // CODE XREFS from dbg.main @ 0x400f05(x), 0x400fe0(x)\\n         xmm3 = qword [0x004046d8] // design_coupler.c:285 // [0x4046d8:8]=0x3ff0000000000000\\n         movapd xmm0,mm4\\n         xmm2 = qword [var_20h]\\n         rdx = var_78h            // int64_t arg3\\n         movapd xmm1,mm3\\n         rsi = var_68h            // int64_t arg2\\n         rdi = var_70h            // int64_t arg1\\n         qword [rsp] = xmm4\\n         dbg.calculate_Zodd_and_Zeven  () // dbg.calculate_Zodd_and_Zeven(0x178070, 0x178068, 0x178078, 0x0, 0x0, 0x0)\\n         xmm1 = qword [var_8h]    // design_coupler.c:286\\n         xmm2 = qword [var_10h]\\n         subsd xmm1,word [var_70h]\\n         xmm5 = qword [var_18h]   // design_coupler.c:287\\n         subsd xmm2,word [var_68h] // design_coupler.c:286\\n         xmm4 = qword [rsp]       // design_coupler.c:287\\n         mulsd xmm1,xmm1          // design_coupler.c:286\\n         mulsd xmm2,xmm2\\n         addsd xmm1,mm2\\n         ucomisd xmm5,mm1         // design_coupler.c:287\\n         if  (((unsigned) var) <= 0) goto 0x400f10 // unlikely\\n\\n    loc_0x00400f21: // orphan\\n         // CODE XREFS from dbg.main @ 0x400f05(x), 0x400fe0(x)\\n         xmm3 = qword [0x004046d8] // design_coupler.c:285 // [0x4046d8:8]=0x3ff0000000000000\\n         movapd xmm0,mm4\\n         xmm2 = qword [var_20h]\\n         rdx = var_78h            // int64_t arg3\\n         movapd xmm1,mm3\\n         rsi = var_68h            // int64_t arg2\\n         rdi = var_70h            // int64_t arg1\\n         qword [rsp] = xmm4\\n         dbg.calculate_Zodd_and_Zeven  () // dbg.calculate_Zodd_and_Zeven(0x178070, 0x178068, 0x178078, 0x0, 0x0, 0x0)\\n         xmm1 = qword [var_8h]    // design_coupler.c:286\\n         xmm2 = qword [var_10h]\\n         subsd xmm1,word [var_70h]\\n         xmm5 = qword [var_18h]   // design_coupler.c:287\\n         subsd xmm2,word [var_68h] // design_coupler.c:286\\n         xmm4 = qword [rsp]       // design_coupler.c:287\\n         mulsd xmm1,xmm1          // design_coupler.c:286\\n         mulsd xmm2,xmm2\\n         addsd xmm1,mm2\\n         ucomisd xmm5,mm1         // design_coupler.c:287\\n         if  (((unsigned) var) <= 0) goto 0x400f10 // unlikely\\n         xmm0 = qword [var_30h]   // design_coupler.c:291\\n         mulsd xmm0,xmm0\\n         sqrtsd xmm2,mm0\\n         ucomisd xmm2,mm2\\n         jp 0x4015ac              // unlikely\\n\\n    loc_0x00400f85: // orphan\\n         xmm0 = qword [var_30h]   // design_coupler.c:291\\n         mulsd xmm0,xmm0\\n         sqrtsd xmm2,mm0\\n         ucomisd xmm2,mm2\\n         jp 0x4015ac              // unlikely\\n         // CODE XREF from dbg.main @ 0x4015cb(x)\\n         xmm6 = qword [var_10h]   // design_coupler.c:293\\n         ebx -= 1                 // design_coupler.c:280\\n         xmm7 = qword [var_8h]    // design_coupler.c:292\\n         xmm5 = qword [var_20h]   // design_coupler.c:291\\n         qword [var_40h] = xmm4\\n         addsd xmm4,word [0x004046f0] // design_coupler.c:280\\n         qword [var_30h] = xmm2   // design_coupler.c:291\\n         qword [var_28h] = xmm6   // design_coupler.c:293\\n         qword [var_48h] = xmm7   // design_coupler.c:292\\n         qword [var_38h] = xmm5   // design_coupler.c:291\\n         qword [var_18h] = xmm1   // design_coupler.c:294\\n         if  (var) goto loc_0x400f21 // design_coupler.c:280 // likely\\n\\n    loc_0x00400f9f: // orphan\\n         // CODE XREF from dbg.main @ 0x4015cb(x)\\n         xmm6 = qword [var_10h]   // design_coupler.c:293\\n         ebx -= 1                 // design_coupler.c:280\\n         xmm7 = qword [var_8h]    // design_coupler.c:292\\n         xmm5 = qword [var_20h]   // design_coupler.c:291\\n         qword [var_40h] = xmm4\\n         addsd xmm4,word [0x004046f0] // design_coupler.c:280\\n         qword [var_30h] = xmm2   // design_coupler.c:291\\n         qword [var_28h] = xmm6   // design_coupler.c:293\\n         qword [var_48h] = xmm7   // design_coupler.c:292\\n         qword [var_38h] = xmm5   // design_coupler.c:291\\n         qword [var_18h] = xmm1   // design_coupler.c:294\\n         if  (var) goto loc_0x400f21 // design_coupler.c:280 // likely\\n         // CODE XREF from dbg.main @ 0x400f1b(x)\\n         xmm7 = qword [0x004046f0] // design_coupler.c:278 // [0x4046f0:8]=0x3f947ae147ae147b\\n         xmm3 = qword [0x00404748] // [0x404748:8]=0x4059000000000000\\n         addsd xmm7,word [var_20h]\\n         ucomisd xmm3,mm7\\n         qword [var_20h] = xmm7\\n         jae 0x400ef8             // likely\\n\\n    loc_0x00400fe6: // orphan\\n         // CODE XREF from dbg.main @ 0x400f1b(x)\\n         xmm7 = qword [0x004046f0] // design_coupler.c:278 // [0x4046f0:8]=0x3f947ae147ae147b\\n         xmm3 = qword [0x00404748] // [0x404748:8]=0x4059000000000000\\n         addsd xmm7,word [var_20h]\\n         ucomisd xmm3,mm7\\n         qword [var_20h] = xmm7\\n         jae 0x400ef8             // likely\\n         xmm6 = qword [var_40h]\\n         edi = str.w___.4f_s___.4f_which_gives_Zo___.4f_Zodd___.4f_Zeven___.4f_n // design_coupler.c:298 // 0x403f18 // \\\"w = %.4f s = %.4f which gives Zo = %.4f Zodd = %.4f Zeven = %.4f\\\\n\\\" // const char *format\\n         xmm4 = qword [var_28h]\\n         eax = 5\\n         xmm3 = qword [var_48h]\\n         xmm2 = qword [var_30h]\\n         movapd xmm0,mm6\\n         xmm1 = qword [var_38h]\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"w = %.4f s = %.4f which gives Zo = %.4f Zodd = %.4f Zeven = %.4f\\\\n\\\")\\n         r14d -= 1                // design_coupler.c:300\\n         if  (!var) goto loc_0x401618 // unlikely\\n\\n    loc_0x0040100c: // orphan\\n         xmm6 = qword [var_40h]\\n         edi = str.w___.4f_s___.4f_which_gives_Zo___.4f_Zodd___.4f_Zeven___.4f_n // design_coupler.c:298 // 0x403f18 // \\\"w = %.4f s = %.4f which gives Zo = %.4f Zodd = %.4f Zeven = %.4f\\\\n\\\" // const char *format\\n         xmm4 = qword [var_28h]\\n         eax = 5\\n         xmm3 = qword [var_48h]\\n         xmm2 = qword [var_30h]\\n         movapd xmm0,mm6\\n         xmm1 = qword [var_38h]\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"w = %.4f s = %.4f which gives Zo = %.4f Zodd = %.4f Zeven = %.4f\\\\n\\\")\\n         r14d -= 1                // design_coupler.c:300\\n         if  (!var) goto loc_0x401618 // unlikely\\n         // CODE XREF from dbg.main @ 0x401640(x)\\n         xmm0 = qword [var_48h]   // design_coupler.c:319\\n         mulsd xmm0,xmm0\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         var = dword [obj.verbose] - 0 // design_coupler.c:320 // [0x60a528:4]=1\\n         qword [rsp] = xmm0       // design_coupler.c:319\\n         if  (var <= 0) goto loc_0x40175b // design_coupler.c:320 // unlikely\\n\\n    loc_0x00401047: // orphan\\n         // CODE XREF from dbg.main @ 0x401640(x)\\n         xmm0 = qword [var_48h]   // design_coupler.c:319\\n         mulsd xmm0,xmm0\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         var = dword [obj.verbose] - 0 // design_coupler.c:320 // [0x60a528:4]=1\\n         qword [rsp] = xmm0       // design_coupler.c:319\\n         if  (var <= 0) goto loc_0x40175b // design_coupler.c:320 // unlikely\\n         // CODE XREF from dbg.main @ 0x4017ab(x)\\n         xmm6 = qword [var_58h]   // design_coupler.c:331\\n         edi = str.H__.4f_w___.4f_s___.4f_n // 0x40355c // \\\"H =%.4f w = %.4f s = %.4f\\\\n\\\" // const char *format\\n         eax = 3\\n         xmm3 = qword [var_38h]\\n         xmm1 = qword [var_40h]\\n         movapd xmm0,mm6\\n         mulsd xmm3,xmm3\\n         mulsd xmm1,xmm1\\n         movapd xmm2,mm3\\n         qword [var_8h] = xmm3\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"H =%.4f w = %.4f s = %.4f\\\\n\\\")\\n         xmm5 = qword [var_40h]   // design_coupler.c:332\\n         edi = str.W_must_be_at_least__.4f__but_larger_does_not_matter._n // 0x4041b8 // \\\"W must be *at least* %.4f, but larger does not matter.\\\\n\\\" // const char *format\\n         xmm6 = qword [var_58h]\\n         eax = 1\\n         movapd xmm1,mm5\\n         xmm0 = qword [0x00404758] // [0x404758:8]=0x4014000000000000\\n         addsd xmm1,mm5\\n         xmm3 = qword [var_8h]\\n         mulsd xmm0,xmm0\\n         mulsd xmm1,xmm1\\n         addsd xmm0,mm1\\n         addsd xmm0,mm3\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"W must be *at least* %.4f, but larger does not matter.\\\\n\\\")\\n         xmm2 = qword [var_28h]   // design_coupler.c:333\\n         edi = str.These_dimensions_give_Zo___.4f_Zodd___.4f_Zeven___.4f_Ohms_n // 0x4041f0 // \\\"These dimensions give Zo = %.4f Zodd = %.4f Zeven = %.4f Ohms\\\\n\\\" // const char *format\\n         xmm1 = qword [var_48h]\\n         eax = 3\\n         xmm0 = qword [rsp]\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"These dimensions give Zo = %.4f Zodd = %.4f Zeven = %.4f Ohms\\\\n\\\")\\n         var = r13d & r13d        // design_coupler.c:334\\n         if  (!var) goto loc_0x4015d0 // likely\\n\\n    loc_0x0040106a: // orphan\\n         // CODE XREF from dbg.main @ 0x4017ab(x)\\n         xmm6 = qword [var_58h]   // design_coupler.c:331\\n         edi = str.H__.4f_w___.4f_s___.4f_n // 0x40355c // \\\"H =%.4f w = %.4f s = %.4f\\\\n\\\" // const char *format\\n         eax = 3\\n         xmm3 = qword [var_38h]\\n         xmm1 = qword [var_40h]\\n         movapd xmm0,mm6\\n         mulsd xmm3,xmm3\\n         mulsd xmm1,xmm1\\n         movapd xmm2,mm3\\n         qword [var_8h] = xmm3\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"H =%.4f w = %.4f s = %.4f\\\\n\\\")\\n         xmm5 = qword [var_40h]   // design_coupler.c:332\\n         edi = str.W_must_be_at_least__.4f__but_larger_does_not_matter._n // 0x4041b8 // \\\"W must be *at least* %.4f, but larger does not matter.\\\\n\\\" // const char *format\\n         xmm6 = qword [var_58h]\\n         eax = 1\\n         movapd xmm1,mm5\\n         xmm0 = qword [0x00404758] // [0x404758:8]=0x4014000000000000\\n         addsd xmm1,mm5\\n         xmm3 = qword [var_8h]\\n         mulsd xmm0,xmm0\\n         mulsd xmm1,xmm1\\n         addsd xmm0,mm1\\n         addsd xmm0,mm3\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"W must be *at least* %.4f, but larger does not matter.\\\\n\\\")\\n         xmm2 = qword [var_28h]   // design_coupler.c:333\\n         edi = str.These_dimensions_give_Zo___.4f_Zodd___.4f_Zeven___.4f_Ohms_n // 0x4041f0 // \\\"These dimensions give Zo = %.4f Zodd = %.4f Zeven = %.4f Ohms\\\\n\\\" // const char *format\\n         xmm1 = qword [var_48h]\\n         eax = 3\\n         xmm0 = qword [rsp]\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"These dimensions give Zo = %.4f Zodd = %.4f Zeven = %.4f Ohms\\\\n\\\")\\n         var = r13d & r13d        // design_coupler.c:334\\n         if  (!var) goto loc_0x4015d0 // likely\\n         // CODE XREF from dbg.main @ 0x401613(x)\\n         edi = str.NOTE_2         // design_coupler.c:342 // 0x403585 // \\\"****NOTE 2****\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"****NOTE 2****\\\")\\n         xmm0 = qword [var_50h]   // design_coupler.c:343\\n         edi = str.The_length_must_be__.4f_m_if_you_use_these_dimensions_for_W__H__w_and_s._n // 0x4043a0 // \\\"The length *must* be %.4f m if you use these dimensions for W, H, w and s.\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"The length *must* be %.4f m if you use these dimensions for W, H, w and s.\\\\n\\\")\\n         xmm0 = qword [var_50h]   // design_coupler.c:344\\n         edi = str.If__.4f_m_is_inconvenient__change_it_with_the__L_option_and_recalculate_n_to_get_new_values_of_W__H__w_and_s_n // 0x4043f0 // \\\"If %.4f m is inconvenient, change it with the -L option and recalculate\\\\n to get new values of W, H, w and s\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"If %.4f m is inconvenient, change it with the -L option and recalculate\\\\n to get new values of W, H, w and s\\\\n\\\")\\n         edi = str.See:_http:__atlc.sourceforge.net // design_coupler.c:345 // 0x404460 // \\\"See: http://atlc.sourceforge.net\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"See: http://atlc.sourceforge.net\\\")\\n         edi = str.See:_http:__atlc.sourceforge.net_couplers.html // design_coupler.c:346 // 0x404488 // \\\"See: http://atlc.sourceforge.net/couplers.html\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"See: http://atlc.sourceforge.net/couplers.html\\\")\\n         goto loc_0x401173\\n\\n    loc_0x0040110b: // orphan\\n         // CODE XREF from dbg.main @ 0x401613(x)\\n         edi = str.NOTE_2         // design_coupler.c:342 // 0x403585 // \\\"****NOTE 2****\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"****NOTE 2****\\\")\\n         xmm0 = qword [var_50h]   // design_coupler.c:343\\n         edi = str.The_length_must_be__.4f_m_if_you_use_these_dimensions_for_W__H__w_and_s._n // 0x4043a0 // \\\"The length *must* be %.4f m if you use these dimensions for W, H, w and s.\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"The length *must* be %.4f m if you use these dimensions for W, H, w and s.\\\\n\\\")\\n         xmm0 = qword [var_50h]   // design_coupler.c:344\\n         edi = str.If__.4f_m_is_inconvenient__change_it_with_the__L_option_and_recalculate_n_to_get_new_values_of_W__H__w_and_s_n // 0x4043f0 // \\\"If %.4f m is inconvenient, change it with the -L option and recalculate\\\\n to get new values of W, H, w and s\\\\n\\\" // const char *format\\n         eax = 1\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"If %.4f m is inconvenient, change it with the -L option and recalculate\\\\n to get new values of W, H, w and s\\\\n\\\")\\n         edi = str.See:_http:__atlc.sourceforge.net // design_coupler.c:345 // 0x404460 // \\\"See: http://atlc.sourceforge.net\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"See: http://atlc.sourceforge.net\\\")\\n         edi = str.See:_http:__atlc.sourceforge.net_couplers.html // design_coupler.c:346 // 0x404488 // \\\"See: http://atlc.sourceforge.net/couplers.html\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"See: http://atlc.sourceforge.net/couplers.html\\\")\\n         goto loc_0x401173\\n         // CODE XREF from dbg.main @ 0x400ea0(x)\\n         edi = str.You_may_try_to_find_a_coupler_with_these_dimensions_using_the__d_option_n // design_coupler.c:270 // 0x403e08 // \\\"You may try to find a coupler with these dimensions using the -d option\\\\n\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"You may try to find a coupler with these dimensions using the -d option\\\\n\\\")\\n         edi = str.Currently_the__d_option_is_not_that_fast__as_it_uses_a_brain_dead_algorithm // design_coupler.c:271 // 0x403e58 // \\\"Currently the -d option is not that fast, as it uses a brain-dead algorithm\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Currently the -d option is not that fast, as it uses a brain-dead algorithm\\\")\\n         edi = str.Hopefully_one_day_the_algorithm_will_be_speeded_up. // design_coupler.c:272 // 0x403ea8 // \\\"Hopefully one day the algorithm will be speeded up.\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Hopefully one day the algorithm will be speeded up.\\\")\\n\\n    loc_0x00401155: // orphan\\n         // CODE XREF from dbg.main @ 0x400ea0(x)\\n         edi = str.You_may_try_to_find_a_coupler_with_these_dimensions_using_the__d_option_n // design_coupler.c:270 // 0x403e08 // \\\"You may try to find a coupler with these dimensions using the -d option\\\\n\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"You may try to find a coupler with these dimensions using the -d option\\\\n\\\")\\n         edi = str.Currently_the__d_option_is_not_that_fast__as_it_uses_a_brain_dead_algorithm // design_coupler.c:271 // 0x403e58 // \\\"Currently the -d option is not that fast, as it uses a brain-dead algorithm\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Currently the -d option is not that fast, as it uses a brain-dead algorithm\\\")\\n         edi = str.Hopefully_one_day_the_algorithm_will_be_speeded_up. // design_coupler.c:272 // 0x403ea8 // \\\"Hopefully one day the algorithm will be speeded up.\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Hopefully one day the algorithm will be speeded up.\\\")\\n         // CODE XREF from dbg.main @ 0x401153(x)\\n         rsp -= 0xffffffffffffff80 // design_coupler.c:349\\n         eax = 0\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         re\\n\\n    loc_0x00401173: // orphan\\n         // CODE XREF from dbg.main @ 0x401153(x)\\n         rsp -= 0xffffffffffffff80 // design_coupler.c:349\\n         eax = 0\\n         rbx = pop  ()\\n         rbp = pop  ()\\n         r12 = pop  ()\\n         r13 = pop  ()\\n         r14 = pop  ()\\n         re\\n         // CODE XREF from dbg.main @ 0x400b37(x)\\n         rcx = qword [obj.stderr] // design_coupler.c:171 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x33               // '3' // 51 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.The_second_command_line_argumentent_you_gave__which // 0x403880 // \\\"The second command line argumentent you gave, which\\\" // const void *ptr\\n         qword [var_30h] = xmm1\\n         qword [var_10h] = xmm4\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6f63657320656854, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:172 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x32               // '2' // 50 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._is_for_the_minimum_noperating_frequenncy_in_MHz_ // 0x4038b8 // \\\" is for the *minimum*\\\\noperating frequenncy in MHz,\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20726f6620736920, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:173 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x2f               // '/' // 47 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._is_less_than_the_third_argument__which_is_the_n // 0x4038f0 // \\\" is less than the third argument, which is the\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7373656c20736920, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:174 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x27               // ''' // 39 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.maximum_operating_frequency_in_MHz._n_n // 0x403920 // \\\"*maximum* operating frequency in MHz.\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6d756d6978616d2a, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:175 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x15               // 21 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_want_a_coupler // 0x403528 // \\\"If you want a coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7720756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:176 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._with_a_coupled_port_that_is_12_dB_down_on_the_input_n // 0x403948 // \\\" with a coupled port that is 12 dB down on the input\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x2061206874697720, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:177 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x2d               // '-' // 45 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.power__covering_144_146_MHz__enter_this_as:_n_n // 0x403980 // \\\"power, covering 144-146 MHz, enter this as:\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x63202c7265776f70, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:178 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x1b               // 27 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.design_coupler_12_144_146_n_n // 0x4034f8 // \\\"design_coupler 12 144 146\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x635f6e6769736564, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:179 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x32               // '2' // 50 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_want_the_physical_dimensions_of_the_coupler // 0x4036a8 // \\\"If you want the physical dimensions of the coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7720756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:180 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x33               // '3' // 51 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._designed_for_you__add_the_n_d_option_on_the_command // 0x4036e0 // \\\" designed for you, add the\\\\n-d option on the command\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x656e676973656420, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:181 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x31               // '1' // 49 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._line__like_this:_n_ndesign_coupler__d_12_144_146_n_n // 0x4039b0 // \\\" line, like this:\\\\n\\\\ndesign_coupler -d 12 144 146\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6c202c656e696c20, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:182 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x39               // '9' // 57 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_run_design_coupler_with_no_command_line_arguments_ // 0x4039e8 // \\\"If you run design_coupler with no command line arguments,\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7220756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:183 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x31               // '1' // 49 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._then_design_coupler_nwill_print_some_information_ // 0x403a28 // \\\" then design_coupler\\\\nwill print some information,\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6564206e65687420, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:184 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._showing_all_the_options._If_you_run_ndesign_coupler // 0x403a60 // \\\" showing *all* the options. If you run\\\\ndesign_coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x676e69776f687320, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:185 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x20               // 32 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._with_the__e_option_like_this:_n_n // 0x403820 // \\\" with the -e option like this:\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6874206874697720, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:186 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x13               // 19 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.design_coupler__e_n_n // 0x403514 // \\\"design_coupler -e\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x635f6e6769736564, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:187 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.lots_of_examples_will_be_shown_of_the_correct_usage._n // 0x403848 // \\\"lots of examples will be shown of the correct usage.\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20666f2073746f6c, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:188 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0xc                // 12 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.Exiting_..._n  // 0x40353e // \\\"Exiting ...\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20676e6974697845, 0x00000000, 0x00000000, ?)\\n         esi = 0x39               // design_coupler.c:189 // '9' // 57 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         xmm1 = qword [var_30h]\\n         xmm4 = qword [var_10h]\\n         goto loc_0x400b3d\\n\\n    loc_0x00401182: // orphan\\n         // CODE XREF from dbg.main @ 0x400b37(x)\\n         rcx = qword [obj.stderr] // design_coupler.c:171 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x33               // '3' // 51 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.The_second_command_line_argumentent_you_gave__which // 0x403880 // \\\"The second command line argumentent you gave, which\\\" // const void *ptr\\n         qword [var_30h] = xmm1\\n         qword [var_10h] = xmm4\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6f63657320656854, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:172 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x32               // '2' // 50 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._is_for_the_minimum_noperating_frequenncy_in_MHz_ // 0x4038b8 // \\\" is for the *minimum*\\\\noperating frequenncy in MHz,\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20726f6620736920, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:173 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x2f               // '/' // 47 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._is_less_than_the_third_argument__which_is_the_n // 0x4038f0 // \\\" is less than the third argument, which is the\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7373656c20736920, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:174 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x27               // ''' // 39 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.maximum_operating_frequency_in_MHz._n_n // 0x403920 // \\\"*maximum* operating frequency in MHz.\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6d756d6978616d2a, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:175 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x15               // 21 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_want_a_coupler // 0x403528 // \\\"If you want a coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7720756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:176 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._with_a_coupled_port_that_is_12_dB_down_on_the_input_n // 0x403948 // \\\" with a coupled port that is 12 dB down on the input\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x2061206874697720, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:177 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x2d               // '-' // 45 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.power__covering_144_146_MHz__enter_this_as:_n_n // 0x403980 // \\\"power, covering 144-146 MHz, enter this as:\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x63202c7265776f70, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:178 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x1b               // 27 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.design_coupler_12_144_146_n_n // 0x4034f8 // \\\"design_coupler 12 144 146\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x635f6e6769736564, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:179 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x32               // '2' // 50 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_want_the_physical_dimensions_of_the_coupler // 0x4036a8 // \\\"If you want the physical dimensions of the coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7720756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:180 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x33               // '3' // 51 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._designed_for_you__add_the_n_d_option_on_the_command // 0x4036e0 // \\\" designed for you, add the\\\\n-d option on the command\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x656e676973656420, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:181 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x31               // '1' // 49 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._line__like_this:_n_ndesign_coupler__d_12_144_146_n_n // 0x4039b0 // \\\" line, like this:\\\\n\\\\ndesign_coupler -d 12 144 146\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6c202c656e696c20, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:182 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x39               // '9' // 57 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_run_design_coupler_with_no_command_line_arguments_ // 0x4039e8 // \\\"If you run design_coupler with no command line arguments,\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7220756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:183 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x31               // '1' // 49 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._then_design_coupler_nwill_print_some_information_ // 0x403a28 // \\\" then design_coupler\\\\nwill print some information,\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6564206e65687420, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:184 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._showing_all_the_options._If_you_run_ndesign_coupler // 0x403a60 // \\\" showing *all* the options. If you run\\\\ndesign_coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x676e69776f687320, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:185 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x20               // 32 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._with_the__e_option_like_this:_n_n // 0x403820 // \\\" with the -e option like this:\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6874206874697720, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:186 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x13               // 19 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.design_coupler__e_n_n // 0x403514 // \\\"design_coupler -e\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x635f6e6769736564, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:187 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.lots_of_examples_will_be_shown_of_the_correct_usage._n // 0x403848 // \\\"lots of examples will be shown of the correct usage.\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20666f2073746f6c, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:188 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0xc                // 12 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.Exiting_..._n  // 0x40353e // \\\"Exiting ...\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20676e6974697845, 0x00000000, 0x00000000, ?)\\n         esi = 0x39               // design_coupler.c:189 // '9' // 57 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         xmm1 = qword [var_30h]\\n         xmm4 = qword [var_10h]\\n         goto loc_0x400b3d\\n         // CODE XREF from dbg.main @ 0x400b6c(x)\\n         xmm3 = qword [0x00404710] // design_coupler.c:194 // [0x404710:8]=0x4052c00000000000\\n         qword [var_8h] = xmm3\\n         divsd xmm3,word [var_40h]\\n         qword [var_50h] = xmm3\\n         goto loc_0x400b80\\n\\n    loc_0x00401394: // orphan\\n         // CODE XREF from dbg.main @ 0x400b6c(x)\\n         xmm3 = qword [0x00404710] // design_coupler.c:194 // [0x404710:8]=0x4052c00000000000\\n         qword [var_8h] = xmm3\\n         divsd xmm3,word [var_40h]\\n         qword [var_50h] = xmm3\\n         goto loc_0x400b80\\n         // CODE XREF from dbg.main @ 0x400b20(x)\\n         xmm0 = qword [var_18h]   // design_coupler.c:144\\n         subsd xmm0,mm4\\n         mulsd xmm0,xmm0\\n         qword [var_28h] = xmm0\\n         goto loc_0x400b26\\n\\n    loc_0x004013b3: // orphan\\n         // CODE XREF from dbg.main @ 0x400b20(x)\\n         xmm0 = qword [var_18h]   // design_coupler.c:144\\n         subsd xmm0,mm4\\n         mulsd xmm0,xmm0\\n         qword [var_28h] = xmm0\\n         goto loc_0x400b26\\n         // CODE XREF from dbg.main @ 0x400b2b(x)\\n         rcx = qword [obj.stderr] // design_coupler.c:151 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._nThe_coupled_power_must_be_less_than_the_input_power. // 0x403598 // \\\"\\\\nThe coupled power must be less than the input power.\\\" // const void *ptr\\n         qword [var_30h] = xmm1\\n         qword [var_10h] = xmm4\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x756f63206568540a, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:152 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x33               // '3' // 51 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._But_please_enter_a_npositive_number_in_dB_for_the // 0x4035d0 // \\\" But please enter a\\\\n*positive* number in dB for the\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x656c702074754220, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:153 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._first_command_line_parameter._If_you_want_a__ncoupler // 0x403608 // \\\" first command line parameter. If you want a \\\\ncoupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6320747372696620, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:154 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x34               // '4' // 52 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._with_a_coupled_port_that_is_12_dB_down_on_the_input // 0x403640 // \\\" with a coupled port that is 12 dB down on the input\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x2061206874697720, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:155 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x2e               // '.' // 46 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._power__covering_n144_146_MHz__enter_this_as:_n_n // 0x403678 // \\\" power, covering\\\\n144-146 MHz, enter this as:\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x202c7265776f7020, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:156 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x1b               // 27 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.design_coupler_12_144_146_n_n // 0x4034f8 // \\\"design_coupler 12 144 146\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x635f6e6769736564, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:157 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x32               // '2' // 50 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_want_the_physical_dimensions_of_the_coupler // 0x4036a8 // \\\"If you want the physical dimensions of the coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7720756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:158 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x33               // '3' // 51 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._designed_for_you__add_the_n_d_option_on_the_command // 0x4036e0 // \\\" designed for you, add the\\\\n-d option on the command\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x656e676973656420, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:159 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x32               // '2' // 50 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._line__like_this:_n_ndesign_coupler__q__12_144_146_n_n // 0x403718 // \\\" line, like this:\\\\n\\\\ndesign_coupler -q -12 144 146\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6c202c656e696c20, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:160 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x2e               // '.' // 46 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_run_design_coupler_with_no_command_line // 0x403750 // \\\"If you run design_coupler with no command line\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7220756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:161 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x28               // '(' // 40 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._arguments__like_this:_n_ndesign_coupler_n_n // 0x403780 // \\\" arguments, like this:\\\\n\\\\ndesign_coupler\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6e656d7567726120, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:162 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x30               // '0' // 48 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.then_design_coupler_will_print_some_information_ // 0x4037b0 // \\\"then design_coupler will print some information,\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x736564206e656874, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:163 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x37               // '7' // 55 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.__showing_all_the_options.__nIf_you_run_design_coupler // 0x4037e8 // \\\"  showing *all* the options. \\\\nIf you run design_coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6e69776f68732020, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:164 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x20               // 32 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._with_the__e_option_like_this:_n_n // 0x403820 // \\\" with the -e option like this:\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6874206874697720, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:165 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x13               // 19 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.design_coupler__e_n_n // 0x403514 // \\\"design_coupler -e\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x635f6e6769736564, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:166 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.lots_of_examples_will_be_shown_of_the_correct_usage._n // 0x403848 // \\\"lots of examples will be shown of the correct usage.\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20666f2073746f6c, 0x00000000, -1, ?)\\n         esi = 0x38               // design_coupler.c:167 // '8' // 56 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         xmm1 = qword [var_30h]\\n         xmm4 = qword [var_10h]\\n         goto loc_0x400b31\\n\\n    loc_0x004013d0: // orphan\\n         // CODE XREF from dbg.main @ 0x400b2b(x)\\n         rcx = qword [obj.stderr] // design_coupler.c:151 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._nThe_coupled_power_must_be_less_than_the_input_power. // 0x403598 // \\\"\\\\nThe coupled power must be less than the input power.\\\" // const void *ptr\\n         qword [var_30h] = xmm1\\n         qword [var_10h] = xmm4\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x756f63206568540a, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:152 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x33               // '3' // 51 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._But_please_enter_a_npositive_number_in_dB_for_the // 0x4035d0 // \\\" But please enter a\\\\n*positive* number in dB for the\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x656c702074754220, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:153 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._first_command_line_parameter._If_you_want_a__ncoupler // 0x403608 // \\\" first command line parameter. If you want a \\\\ncoupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6320747372696620, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:154 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x34               // '4' // 52 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._with_a_coupled_port_that_is_12_dB_down_on_the_input // 0x403640 // \\\" with a coupled port that is 12 dB down on the input\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x2061206874697720, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:155 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x2e               // '.' // 46 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._power__covering_n144_146_MHz__enter_this_as:_n_n // 0x403678 // \\\" power, covering\\\\n144-146 MHz, enter this as:\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x202c7265776f7020, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:156 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x1b               // 27 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.design_coupler_12_144_146_n_n // 0x4034f8 // \\\"design_coupler 12 144 146\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x635f6e6769736564, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:157 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x32               // '2' // 50 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_want_the_physical_dimensions_of_the_coupler // 0x4036a8 // \\\"If you want the physical dimensions of the coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7720756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:158 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x33               // '3' // 51 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._designed_for_you__add_the_n_d_option_on_the_command // 0x4036e0 // \\\" designed for you, add the\\\\n-d option on the command\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x656e676973656420, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:159 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x32               // '2' // 50 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._line__like_this:_n_ndesign_coupler__q__12_144_146_n_n // 0x403718 // \\\" line, like this:\\\\n\\\\ndesign_coupler -q -12 144 146\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6c202c656e696c20, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:160 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x2e               // '.' // 46 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.If_you_run_design_coupler_with_no_command_line // 0x403750 // \\\"If you run design_coupler with no command line\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x7220756f79206649, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:161 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x28               // '(' // 40 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._arguments__like_this:_n_ndesign_coupler_n_n // 0x403780 // \\\" arguments, like this:\\\\n\\\\ndesign_coupler\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6e656d7567726120, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:162 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x30               // '0' // 48 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.then_design_coupler_will_print_some_information_ // 0x4037b0 // \\\"then design_coupler will print some information,\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x736564206e656874, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:163 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x37               // '7' // 55 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.__showing_all_the_options.__nIf_you_run_design_coupler // 0x4037e8 // \\\"  showing *all* the options. \\\\nIf you run design_coupler\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6e69776f68732020, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:164 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x20               // 32 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str._with_the__e_option_like_this:_n_n // 0x403820 // \\\" with the -e option like this:\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x6874206874697720, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:165 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x13               // 19 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.design_coupler__e_n_n // 0x403514 // \\\"design_coupler -e\\\\n\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x635f6e6769736564, 0x00000000, -1, ?)\\n         rcx = qword [obj.stderr] // design_coupler.c:166 // obj.stderr__GLIBC_2.2.5\\n                                  // [0x60a540:8]=0 // FILE *stream\\n         edx = 0x35               // '5' // 53 // size_t nitems\\n         esi = 1                  // size_t size\\n         edi = str.lots_of_examples_will_be_shown_of_the_correct_usage._n // 0x403848 // \\\"lots of examples will be shown of the correct usage.\\\\n\\\" // const void *ptr\\n         sym.imp.fwrite  ()\\n                                  // size_t fwrite(0x20666f2073746f6c, 0x00000000, -1, ?)\\n         esi = 0x38               // design_coupler.c:167 // '8' // 56 // int64_t arg2\\n         edi = 0x403513           // '\\\\x135@' // int64_t arg1\\n         dbg.exit_with_msg_and_exit_code  () // dbg.exit_with_msg_and_exit_code(0x403513)\\n         xmm1 = qword [var_30h]\\n         xmm4 = qword [var_10h]\\n         goto loc_0x400b31\\n         // CODE XREF from dbg.main @ 0x400f99(x)\\n         qword [var_18h] = xmm4\\n         qword [rsp] = xmm1\\n         sym.imp.sqrt  ()         // design_coupler.c:291\\n                                  // floating_point sqrt(?)\\n         xmm4 = qword [var_18h]\\n         movapd xmm2,mm0\\n         xmm1 = qword [rsp]\\n         goto loc_0x400f9f\\n\\n    loc_0x004015ac: // orphan\\n         // CODE XREF from dbg.main @ 0x400f99(x)\\n         qword [var_18h] = xmm4\\n         qword [rsp] = xmm1\\n         sym.imp.sqrt  ()         // design_coupler.c:291\\n                                  // floating_point sqrt(?)\\n         xmm4 = qword [var_18h]\\n         movapd xmm2,mm0\\n         xmm1 = qword [rsp]\\n         goto loc_0x400f9f\\n         // CODE XREF from dbg.main @ 0x401105(x)\\n         edi = str.NOTE_          // design_coupler.c:336 // 0x403577 // \\\"****NOTE ****\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"****NOTE ****\\\")\\n         edi = str.Although_H_is_shown_as_1.0__it_can_be_1_mm__1_cm_or_even_1_m._It_is_important // design_coupler.c:337 // 0x404230 // \\\"Although H is shown as 1.0, it can be 1 mm, 1 cm or even 1 m. It is important\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Although H is shown as 1.0, it can be 1 mm, 1 cm or even 1 m. It is important\\\")\\n         xmm1 = qword [var_38h]   // design_coupler.c:338\\n         edi = str.that_w_is__.4f_times_whatever_H_is__and_that_s_is__.4f_times_whatever_H_is__but_the_absolute_numbers_are_irrelavant._n // 0x404280 // \\\"that w is %.4f times whatever H is, and that s is %.4f times whatever H is, but the absolute numbers are irrelavant.\\\\n\\\" // const char *format\\n         xmm0 = qword [var_40h]\\n         eax = 2\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"that w is %.4f times whatever H is, and that s is %.4f times whatever H is, but the absolute numbers are irrelavant.\\\\n\\\")\\n         edi = str.If_you_know_the_height_H_of_your_enclosure__use_the__H_option_to_indicate // design_coupler.c:339 // 0x4042f8 // \\\"If you know the height H of your enclosure, use the -H option to indicate\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"If you know the height H of your enclosure, use the -H option to indicate\\\")\\n         edi = str.its_value._This_will_ensure_all_the_dimensions_are_scaled_automatically_for_you. // design_coupler.c:340 // 0x404348 // \\\"its value. This will ensure all the dimensions are scaled automatically for you.\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"its value. This will ensure all the dimensions are scaled automatically for you.\\\")\\n         goto loc_0x40110b\\n\\n    loc_0x004015d0: // orphan\\n         // CODE XREF from dbg.main @ 0x401105(x)\\n         edi = str.NOTE_          // design_coupler.c:336 // 0x403577 // \\\"****NOTE ****\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"****NOTE ****\\\")\\n         edi = str.Although_H_is_shown_as_1.0__it_can_be_1_mm__1_cm_or_even_1_m._It_is_important // design_coupler.c:337 // 0x404230 // \\\"Although H is shown as 1.0, it can be 1 mm, 1 cm or even 1 m. It is important\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"Although H is shown as 1.0, it can be 1 mm, 1 cm or even 1 m. It is important\\\")\\n         xmm1 = qword [var_38h]   // design_coupler.c:338\\n         edi = str.that_w_is__.4f_times_whatever_H_is__and_that_s_is__.4f_times_whatever_H_is__but_the_absolute_numbers_are_irrelavant._n // 0x404280 // \\\"that w is %.4f times whatever H is, and that s is %.4f times whatever H is, but the absolute numbers are irrelavant.\\\\n\\\" // const char *format\\n         xmm0 = qword [var_40h]\\n         eax = 2\\n         sym.imp.printf  ()\\n                                  // int printf(\\\"that w is %.4f times whatever H is, and that s is %.4f times whatever H is, but the absolute numbers are irrelavant.\\\\n\\\")\\n         edi = str.If_you_know_the_height_H_of_your_enclosure__use_the__H_option_to_indicate // design_coupler.c:339 // 0x4042f8 // \\\"If you know the height H of your enclosure, use the -H option to indicate\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"If you know the height H of your enclosure, use the -H option to indicate\\\")\\n         edi = str.its_value._This_will_ensure_all_the_dimensions_are_scaled_automatically_for_you. // design_coupler.c:340 // 0x404348 // \\\"its value. This will ensure all the dimensions are scaled automatically for you.\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"its value. This will ensure all the dimensions are scaled automatically for you.\\\")\\n         goto loc_0x40110b\\n         // CODE XREF from dbg.main @ 0x401041(x)\\n         xmm5 = qword [var_38h]   // design_coupler.c:302\\n         subsd xmm5,word [0x004046f0]\\n         qword [var_20h] = xmm5\\n\\n    loc_0x00401618: // orphan\\n         // CODE XREF from dbg.main @ 0x401041(x)\\n         xmm5 = qword [var_38h]   // design_coupler.c:302\\n         subsd xmm5,word [0x004046f0]\\n         qword [var_20h] = xmm5\\n         // CODE XREF from dbg.main @ 0x401756(x)\\n         xmm0 = qword [0x004046f0] // design_coupler.c:302 // [0x4046f0:8]=0x3f947ae147ae147b\\n         addsd xmm0,word [var_38h]\\n         ucomisd xmm0,word [rsp + 0x20]\\n         if  (((unsigned) var) < 0) goto 0x401047 // unlikely\\n\\n    loc_0x0040162c: // orphan\\n         // CODE XREF from dbg.main @ 0x401756(x)\\n         xmm0 = qword [0x004046f0] // design_coupler.c:302 // [0x4046f0:8]=0x3f947ae147ae147b\\n         addsd xmm0,word [var_38h]\\n         ucomisd xmm0,word [rsp + 0x20]\\n         if  (((unsigned) var) < 0) goto 0x401047 // unlikely\\n         xmm3 = qword [var_40h]   // design_coupler.c:304\\n         xmm0 = qword [0x004046f0] // [0x4046f0:8]=0x3f947ae147ae147b\\n         movapd xmm4,mm3\\n         xmm7 = qword [0x00404750] // [0x404750:8]=0x3ef4f8b588e368f1\\n         addsd xmm0,mm3\\n         subsd xmm4,word [0x004046f0]\\n         qword [var_30h] = xmm7\\n         ucomisd xmm0,mm4\\n         if  (((unsigned) var) < 0) goto 0x401744 // unlikely\\n\\n    loc_0x00401646: // orphan\\n         xmm3 = qword [var_40h]   // design_coupler.c:304\\n         xmm0 = qword [0x004046f0] // [0x4046f0:8]=0x3f947ae147ae147b\\n         movapd xmm4,mm3\\n         xmm7 = qword [0x00404750] // [0x404750:8]=0x3ef4f8b588e368f1\\n         addsd xmm0,mm3\\n         subsd xmm4,word [0x004046f0]\\n         qword [var_30h] = xmm7\\n         ucomisd xmm0,mm4\\n         if  (((unsigned) var) < 0) goto 0x401744 // unlikely\\n         \\n\\n    loc_0x0040167c: // orphan\\n         \\n         // CODE XREF from dbg.main @ 0x40173e(x)\\n         xmm3 = qword [0x004046d8] // design_coupler.c:306 // [0x4046d8:8]=0x3ff0000000000000\\n         movapd xmm0,mm4\\n         xmm2 = qword [var_20h]\\n         rdx = var_78h            // int64_t arg3\\n         movapd xmm1,mm3\\n         rsi = var_68h            // int64_t arg2\\n         rdi = var_70h            // int64_t arg1\\n         qword [rsp] = xmm4\\n         dbg.calculate_Zodd_and_Zeven  () // dbg.calculate_Zodd_and_Zeven(0x178070, 0x178068, 0x178078, 0x0, 0x0, 0x0)\\n         xmm1 = qword [var_8h]    // design_coupler.c:307\\n         xmm2 = qword [var_10h]\\n         subsd xmm1,word [var_70h]\\n         xmm3 = qword [var_18h]   // design_coupler.c:308\\n         subsd xmm2,word [var_68h] // design_coupler.c:307\\n         xmm4 = qword [rsp]       // design_coupler.c:308\\n         andpd xmm1,mmword [0x00404760] // design_coupler.c:307\\n         andpd xmm2,mmword [0x00404760]\\n         movapd xmm0,mm1\\n         movapd xmm1,mm2\\n         addsd xmm1,mm0\\n         ucomisd xmm3,mm1         // design_coupler.c:308\\n         if  (((unsigned) var) <= 0) goto 0x401724 // likely\\n\\n    loc_0x00401680: // orphan\\n         // CODE XREF from dbg.main @ 0x40173e(x)\\n         xmm3 = qword [0x004046d8] // design_coupler.c:306 // [0x4046d8:8]=0x3ff0000000000000\\n         movapd xmm0,mm4\\n         xmm2 = qword [var_20h]\\n         rdx = var_78h            // int64_t arg3\\n         movapd xmm1,mm3\\n         rsi = var_68h            // int64_t arg2\\n         rdi = var_70h            // int64_t arg1\\n         qword [rsp] = xmm4\\n         dbg.calculate_Zodd_and_Zeven  () // dbg.calculate_Zodd_and_Zeven(0x178070, 0x178068, 0x178078, 0x0, 0x0, 0x0)\\n         xmm1 = qword [var_8h]    // design_coupler.c:307\\n         xmm2 = qword [var_10h]\\n         subsd xmm1,word [var_70h]\\n         xmm3 = qword [var_18h]   // design_coupler.c:308\\n         subsd xmm2,word [var_68h] // design_coupler.c:307\\n         xmm4 = qword [rsp]       // design_coupler.c:308\\n         andpd xmm1,mmword [0x00404760] // design_coupler.c:307\\n         andpd xmm2,mmword [0x00404760]\\n         movapd xmm0,mm1\\n         movapd xmm1,mm2\\n         addsd xmm1,mm0\\n         ucomisd xmm3,mm1         // design_coupler.c:308\\n         if  (((unsigned) var) <= 0) goto 0x401724 // likely\\n         xmm3 = qword [var_10h]   // design_coupler.c:313\\n         xmm6 = qword [var_20h]   // design_coupler.c:310\\n         qword [var_28h] = xmm3   // design_coupler.c:313\\n         xmm3 = qword [var_8h]    // design_coupler.c:312\\n         qword [var_40h] = xmm4   // design_coupler.c:308\\n         qword [var_48h] = xmm3   // design_coupler.c:312\\n         qword [var_38h] = xmm6   // design_coupler.c:310\\n         qword [var_18h] = xmm1   // design_coupler.c:314\\n\\n    loc_0x004016f4: // orphan\\n         xmm3 = qword [var_10h]   // design_coupler.c:313\\n         xmm6 = qword [var_20h]   // design_coupler.c:310\\n         qword [var_28h] = xmm3   // design_coupler.c:313\\n         xmm3 = qword [var_8h]    // design_coupler.c:312\\n         qword [var_40h] = xmm4   // design_coupler.c:308\\n         qword [var_48h] = xmm3   // design_coupler.c:312\\n         qword [var_38h] = xmm6   // design_coupler.c:310\\n         qword [var_18h] = xmm1   // design_coupler.c:314\\n         // CODE XREF from dbg.main @ 0x4016f2(x)\\n         xmm0 = qword [0x004046f0] // design_coupler.c:304 // [0x4046f0:8]=0x3f947ae147ae147b\\n         addsd xmm4,word [0x00404750]\\n         addsd xmm0,word [var_40h]\\n         ucomisd xmm0,mm4\\n         jae 0x401680             // likely\\n\\n    loc_0x00401724: // orphan\\n         // CODE XREF from dbg.main @ 0x4016f2(x)\\n         xmm0 = qword [0x004046f0] // design_coupler.c:304 // [0x4046f0:8]=0x3f947ae147ae147b\\n         addsd xmm4,word [0x00404750]\\n         addsd xmm0,word [var_40h]\\n         ucomisd xmm0,mm4\\n         jae 0x401680             // likely\\n         // CODE XREF from dbg.main @ 0x401676(x)\\n         xmm3 = qword [var_20h]   // design_coupler.c:302\\n         addsd xmm3,word [var_30h]\\n         qword [var_20h] = xmm3\\n         goto loc_0x40162c\\n\\n    loc_0x00401744: // orphan\\n         // CODE XREF from dbg.main @ 0x401676(x)\\n         xmm3 = qword [var_20h]   // design_coupler.c:302\\n         addsd xmm3,word [var_30h]\\n         qword [var_20h] = xmm3\\n         goto loc_0x40162c\\n         // CODE XREF from dbg.main @ 0x401064(x)\\n         edi = 0x403f60           // design_coupler.c:322 // '`?@' // \\\"|-----------^------------------------------------------------------------------|\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|-----------^------------------------------------------------------------------|\\\")\\n         edi = str._____________________________________________________________________________ // design_coupler.c:323 // 0x403fb8 // \\\"|           |                                                                  |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           |                                                                  |\\\")\\n         edi = str._____________________________w__________s_________w__________________________ // design_coupler.c:324 // 0x404010 // \\\"|           |              <---w---><-----s----><---w-->                       |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           |              <---w---><-----s----><---w-->                       |\\\")\\n         edi = str.___________H__________________________________________________________________ // design_coupler.c:325 // 0x404068 // \\\"|           H              ---------            --------                       |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           H              ---------            --------                       |\\\")\\n         edi = str._____________________________________________________________________________ // design_coupler.c:326 // 0x403fb8 // \\\"|           |                                                                  |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           |                                                                  |\\\")\\n         edi = str.______________Er1.0__air____________________________________________________ // design_coupler.c:327 // 0x4040c0 // \\\"|           |   Er=1.0 (air)                                                   |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           |   Er=1.0 (air)                                                   |\\\")\\n         edi = str.____________v__________________________________________________________________ // design_coupler.c:328 // 0x404118 // \\\"------------v------------------------------------------------------------------\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"------------v------------------------------------------------------------------\\\")\\n         edi = str.__________________________________________W____________________________________ // design_coupler.c:329 // 0x404168 // \\\"<-----------------------------------------W----------------------------------->\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"<-----------------------------------------W----------------------------------->\\\")\\n         goto loc_0x40106a\\n\\n    loc_0x0040175b: // orphan\\n         // CODE XREF from dbg.main @ 0x401064(x)\\n         edi = 0x403f60           // design_coupler.c:322 // '`?@' // \\\"|-----------^------------------------------------------------------------------|\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|-----------^------------------------------------------------------------------|\\\")\\n         edi = str._____________________________________________________________________________ // design_coupler.c:323 // 0x403fb8 // \\\"|           |                                                                  |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           |                                                                  |\\\")\\n         edi = str._____________________________w__________s_________w__________________________ // design_coupler.c:324 // 0x404010 // \\\"|           |              <---w---><-----s----><---w-->                       |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           |              <---w---><-----s----><---w-->                       |\\\")\\n         edi = str.___________H__________________________________________________________________ // design_coupler.c:325 // 0x404068 // \\\"|           H              ---------            --------                       |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           H              ---------            --------                       |\\\")\\n         edi = str._____________________________________________________________________________ // design_coupler.c:326 // 0x403fb8 // \\\"|           |                                                                  |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           |                                                                  |\\\")\\n         edi = str.______________Er1.0__air____________________________________________________ // design_coupler.c:327 // 0x4040c0 // \\\"|           |   Er=1.0 (air)                                                   |\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"|           |   Er=1.0 (air)                                                   |\\\")\\n         edi = str.____________v__________________________________________________________________ // design_coupler.c:328 // 0x404118 // \\\"------------v------------------------------------------------------------------\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"------------v------------------------------------------------------------------\\\")\\n         edi = str.__________________________________________W____________________________________ // design_coupler.c:329 // 0x404168 // \\\"<-----------------------------------------W----------------------------------->\\\" // const char *s\\n         sym.imp.puts  ()\\n                                  // int puts(\\\"<-----------------------------------------W----------------------------------->\\\")\\n         goto loc_0x40106a\\n         // CODE XREF from dbg.main @ 0x400d18(x)\\n         movapd xmm0,mm1          // design_coupler.c:246\\n         qword [var_10h] = xmm2\\n         qword [var_8h] = xmm4\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         xmm2 = qword [var_10h]\\n         xmm4 = qword [var_8h]\\n         goto loc_0x400d1e\\n\\n    loc_0x004017b0: // orphan\\n         // CODE XREF from dbg.main @ 0x400d18(x)\\n         movapd xmm0,mm1          // design_coupler.c:246\\n         qword [var_10h] = xmm2\\n         qword [var_8h] = xmm4\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         xmm2 = qword [var_10h]\\n         xmm4 = qword [var_8h]\\n         goto loc_0x400d1e\\n         // CODE XREF from dbg.main @ 0x400cfc(x)\\n         qword [var_8h] = xmm4\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         xmm4 = qword [var_8h]\\n         movapd xmm2,mm0\\n         goto loc_0x400d02\\n\\n    loc_0x004017d6: // orphan\\n         // CODE XREF from dbg.main @ 0x400cfc(x)\\n         qword [var_8h] = xmm4\\n         sym.imp.sqrt  ()\\n                                  // floating_point sqrt(?)\\n         xmm4 = qword [var_8h]\\n         movapd xmm2,mm0\\n         goto loc_0x400d02\\n\\n}\\n\"}\n"